{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/customers.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/stripe/server/core/customers.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/customers.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/customers.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/stripe/server/core/customers.jsx"}},"code":"let StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_customers_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      account_balance: Match.Maybe(Number),\n      business_vat_id: Match.Maybe(String),\n      coupon: Match.Maybe(String),\n      description: Match.Maybe(String),\n      email: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      shipping: Match.Maybe(Object),\n      source: Match.Maybe(Object)\n    });\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - User (\" + user._id + \") already has a Stripe account.\");\n    }\n\n    if (user && user.emails[0]) {\n      data.email = user.emails[0].address;\n    }\n\n    if (user && user.profile) {\n      data.description = (user.profile.name || \"\") + \" \" + (user.profile.lastName || \"\") + \"-[\" + user._id + \"]\";\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.create, client.customers);\n    let stripeRes = method(data);\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        stripe: Object.assign({}, user.stripe, {\n          id: stripeRes.id\n        })\n      }\n    });\n    return stripeRes;\n  },\n  \"stripe_customers_update\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      account_balance: Match.Maybe(Number),\n      business_vat_id: Match.Maybe(String),\n      coupon: Match.Maybe(String),\n      default_source: Match.Maybe(String),\n      description: Match.Maybe(String),\n      email: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      shipping: Match.Maybe(Object),\n      source: Match.Maybe(Object)\n    });\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (user && user.emails[0]) {\n      data.email = user.emails[0].address;\n    }\n\n    if (!data.description && user && user.profile) {\n      data.description = (user.profile.name || \"\") + \" \" + (user.profile.lastName || \"\") + \" - [\" + user._id + \"]\";\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.update, client.customers);\n    let stripeRes = method(user.stripe.id, data);\n    return stripeRes;\n  },\n  \"stripe_customers_get\": function (user) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user || !user.stripe || !user.stripe.id) {\n      Meteor.call(\"stripe_customers_create\", user, {});\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user || !user.stripe || !user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - User or Stripe data doesn't exist.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.retrieve, client.customers);\n    return method(user.stripe.id);\n  },\n  \"stripe_customers_delete\": function (user) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user || !user.stripe || !user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - User or Stripe data doesn't exist.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.del, client.customers);\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        stripe: {\n          id: null,\n          cards: []\n        }\n      }\n    });\n    return method(user.stripe.id);\n  },\n  \"stripe_customers_list\": function (query) {\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Query Provided\");\n    }\n\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.list, client.customers);\n    return method(query);\n  }\n});","map":{"version":3,"sources":["imports/modules/stripe/server/core/customers.jsx"],"names":["StripeConnection","module","watch","require","default","v","Meteor","check","Match","methods","user","data","Error","Object","account_balance","Maybe","Number","business_vat_id","String","coupon","description","email","metadata","shipping","source","emails","stripe","users","findOne","_id","id","address","profile","name","lastName","client","method","wrapAsync","customers","create","stripeRes","update","$set","assign","default_source","call","retrieve","del","cards","query","created","ObjectIncluding","gt","gte","lt","lte","ending_before","limit","starting_after","list"],"mappings":"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","sourcesContent":["import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_customers_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n        }\n        check(user, Object);\n        check(data, {\n            account_balance: Match.Maybe(Number),\n            business_vat_id: Match.Maybe(String),\n            coupon: Match.Maybe(String),\n            description: Match.Maybe(String),\n            email: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            shipping: Match.Maybe(Object),\n            source: Match.Maybe(Object)\n        });\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - User (\" + user._id + \") already has a Stripe account.\");\n        }\n\n        if (user && user.emails[0]) {\n            data.email = user.emails[0].address;\n        }\n\n        if (user && user.profile) {\n            data.description = (user.profile.name || \"\") + \" \" + (user.profile.lastName || \"\") + \"-[\" + user._id + \"]\";\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.create, client.customers);\n\n        let stripeRes = method(data);\n\n        Meteor.users.update({_id: user._id}, {$set: {stripe: Object.assign({}, user.stripe, {id: stripeRes.id})}});\n\n        return stripeRes;\n    },\n    \"stripe_customers_update\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n        }\n\n        check(user, Object);\n        check(data, {\n            account_balance: Match.Maybe(Number),\n            business_vat_id: Match.Maybe(String),\n            coupon: Match.Maybe(String),\n            default_source: Match.Maybe(String),\n            description: Match.Maybe(String),\n            email: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            shipping: Match.Maybe(Object),\n            source: Match.Maybe(Object)\n        });\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (user && user.emails[0]) {\n            data.email = user.emails[0].address;\n        }\n\n        if (!data.description && user && user.profile) {\n            data.description = (user.profile.name || \"\") + \" \" + (user.profile.lastName || \"\") + \" - [\" + user._id + \"]\";\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.update, client.customers);\n\n        let stripeRes = method(user.stripe.id, data);\n\n        return stripeRes;\n    },\n    \"stripe_customers_get\": function (user) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n\n        check(user, Object);\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user || !user.stripe || !user.stripe.id) {\n            Meteor.call(\"stripe_customers_create\",user,{});\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user || !user.stripe || !user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - User or Stripe data doesn't exist.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.retrieve, client.customers);\n\n        return method(user.stripe.id);\n    },\n    \"stripe_customers_delete\": function (user) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n\n        check(user, Object);\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user || !user.stripe || !user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - User or Stripe data doesn't exist.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.del, client.customers);\n\n        Meteor.users.update({_id: user._id}, {$set: {stripe: {id: null, cards: []}}});\n\n        return method(user.stripe.id);\n    },\n    \"stripe_customers_list\": function (query) {\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Query Provided\");\n        }\n\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.list, client.customers);\n        return method(query);\n    }\n});"]},"sourceType":"script","hash":"7f386e621456f6ddd14d7798b3e7256dd487e63e"}
