{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/facebook/server/cover-profile-photo.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/facebook/server/cover-profile-photo.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/facebook/server/cover-profile-photo.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/facebook/server/cover-profile-photo.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/facebook/server/cover-profile-photo.jsx"}},"code":"let FacebookConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\n\nlet request = require('request').defaults({\n  encoding: null\n});\n\nMeteor.methods({\n  /*coverURL = idPhoto already uploaded*/\n\n  /* Meteor.call('facebook-update-cover-photo','pageID',IDphoto,(err,res)=>{console.log(err,res)}); */\n  \"facebook-update-cover-photo\": function (pageID, coverURL, callback) {\n    let account = SocialAccounts.findOne({\n      _id: pageID\n    });\n    let connection = account.connection;\n    console.log('Connetition Data', connection);\n    let client = FacebookConnection(connection.accessToken);\n    const fbID = connection.id;\n\n    if (client) {\n      client.api(`${fbID}/albums`, {\n        fields: ['name', 'id']\n      }, function (res) {\n        console.log('album', res);\n        const albumID = res.data.filter(album => album.name === 'Cover Photos')[0].id;\n        console.log('Cover Photos ID', albumID);\n        client.api(`${albumID}/photos`, 'post', {\n          url: coverURL\n        }, function (res) {\n          console.log('Cover Response', res);\n        });\n      });\n      return client.api('/' + fbID, \"post\", {\n        cover: coverURL\n      }, function (res) {\n        if (!res || res.error) {\n          console.log(!res ? 'error occurred' : res.error);\n          return;\n        }\n\n        console.log('success: ' + res.success);\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  },\n\n  /*coverURL = page URL*/\n\n  /* Meteor.call('facebook-update-profile-photo','pageID','coverURL',(err,res)=>{console.log(err,res)}); */\n  \"facebook-update-profile-photo\": function (pageID, coverURL, callback) {\n    let account = SocialAccounts.findOne({\n      _id: pageID\n    });\n    let connection = account.connection;\n    console.log('Connetition Data', connection);\n    let client = FacebookConnection(connection.accessToken);\n    const fbID = connection.id;\n\n    if (client) {\n      client.api(`${fbID}/albums`, {\n        fields: ['name', 'id']\n      }, function (res) {\n        console.log('album', res);\n        const albumID = res.data.filter(album => album.name === 'Profile Pictures')[0].id;\n        console.log('Cover Photos ID', albumID);\n        client.api(`${albumID}/photos`, 'post', {\n          url: coverURL\n        }, function (res) {\n          console.log('Cover Response', res);\n        });\n      });\n      return client.api('/' + fbID + '/picture', \"post\", {\n        picture: coverURL\n      }, function (res) {\n        if (!res || res.error) {\n          console.log(!res ? 'error occurred' : res.error);\n          return;\n        }\n\n        console.log('success: ' + res.success);\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  }\n});","map":{"version":3,"sources":["imports/modules/facebook/server/cover-profile-photo.jsx"],"names":["FacebookConnection","module","watch","require","default","v","request","defaults","encoding","Meteor","methods","pageID","coverURL","callback","account","SocialAccounts","findOne","_id","connection","console","log","client","accessToken","fbID","id","api","fields","res","albumID","data","filter","album","name","url","cover","error","success","picture"],"mappings":"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","sourcesContent":["import FacebookConnection from \"./connection\";\n\nlet request = require('request').defaults({encoding: null});\n\nMeteor.methods({\n\t/*coverURL = idPhoto already uploaded*/\n\t/* Meteor.call('facebook-update-cover-photo','pageID',IDphoto,(err,res)=>{console.log(err,res)}); */\n    \"facebook-update-cover-photo\": function (pageID, coverURL, callback) {\n    \tlet account = SocialAccounts.findOne({_id: pageID});\n        let connection = account.connection;\n        console.log('Connetition Data', connection);\n        let client = FacebookConnection(connection.accessToken);\n        const fbID = connection.id;\n\n        if (client) {\n        \tclient.api(`${fbID}/albums`, {fields: ['name','id']}, function(res){\n        \t\tconsole.log('album',res);\n        \t\tconst albumID = res.data.filter((album) => album.name === 'Cover Photos')[0].id;\n        \t\tconsole.log('Cover Photos ID',albumID);\n        \t\tclient.api(`${albumID}/photos`, 'post', {\n\t               url: coverURL,\n\t            }, function (res) {\n               \t\tconsole.log('Cover Response',res);\n\t            });\n        \t});\n            return client.api('/'+fbID, \"post\", {\n                                cover: coverURL,\n                            }, function (res) {\n                                if (!res || res.error) {\n                                    console.log(!res ? 'error occurred' : res.error);\n                                    return;\n                                }\n                                console.log('success: ' + res.success);\n                                if (callback) {\n                                    callback();\n                                }\n                            });\n        }\n    },\n    /*coverURL = page URL*/\n    /* Meteor.call('facebook-update-profile-photo','pageID','coverURL',(err,res)=>{console.log(err,res)}); */\n    \"facebook-update-profile-photo\": function (pageID, coverURL, callback) {\n    \tlet account = SocialAccounts.findOne({_id: pageID});\n        let connection = account.connection;\n        console.log('Connetition Data', connection);\n        let client = FacebookConnection(connection.accessToken);\n        const fbID = connection.id;\n\n        if (client) {\n        \tclient.api(`${fbID}/albums`, {fields: ['name','id']}, function(res){\n        \t\tconsole.log('album',res);\n        \t\tconst albumID = res.data.filter((album) => album.name === 'Profile Pictures')[0].id;\n        \t\tconsole.log('Cover Photos ID',albumID);\n        \t\tclient.api(`${albumID}/photos`, 'post', {\n\t               url: coverURL,\n\t            }, function (res) {\n               \t\tconsole.log('Cover Response',res);\n\t            });\n        \t});\n            return client.api('/'+fbID+'/picture', \"post\", {\n                                picture: coverURL,\n                            }, function (res) {\n                                if (!res || res.error) {\n                                    console.log(!res ? 'error occurred' : res.error);\n                                    return;\n                                }\n                                console.log('success: ' + res.success);\n                                if (callback) {\n                                    callback();\n                                }\n                            });\n        }\n    }\n});"]},"sourceType":"script","hash":"92d157dc6a11ae278d6918295f54ce585a83ec0b"}
