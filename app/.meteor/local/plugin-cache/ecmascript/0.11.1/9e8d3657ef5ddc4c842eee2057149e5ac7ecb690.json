{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/transfers.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/stripe/server/core/transfers.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/transfers.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/transfers.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/stripe/server/core/transfers.jsx"}},"code":"let StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_transfers_create\": function (data) {\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Transfer Data Provided\");\n    }\n\n    check(data, {\n      amount: Number,\n      application_fee: Match.Maybe(Number),\n      currency: String,\n      destination: String,\n      description: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      source_transaction: Match.Maybe(String),\n      statement_descriptor: Match.Maybe(String),\n      source_type: Match.Maybe(String),\n      method: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.transfers.create, client.transfers);\n    return method(data);\n  },\n  \"stripe_transfers_update\": function (transferID, data) {\n    if (!transferID) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer Data Provided\");\n    }\n\n    check(transferID, String);\n    check(data, {\n      description: Match.Maybe(String),\n      metadata: Match.Maybe(Object)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.transfers.update, client.transfers);\n    return method(transferID, data);\n  },\n  \"stripe_transfers_get\": function (transferID) {\n    if (!transferID) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer ID Provided\");\n    }\n\n    check(transferID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.transfers.retrieve, client.transfers);\n    return method(transferID);\n  },\n  \"stripe_transfers_list\": function (query) {\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Query Provided\");\n    }\n\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      date: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      destination: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String),\n      status: Match.Maybe(String),\n      transfer_group: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.transfers.list, client.transfers);\n    return method(query);\n  }\n});","map":{"version":3,"sources":["imports/modules/stripe/server/core/transfers.jsx"],"names":["StripeConnection","module","watch","require","default","v","Meteor","check","Match","methods","data","Error","amount","Number","application_fee","Maybe","currency","String","destination","description","metadata","Object","source_transaction","statement_descriptor","source_type","method","client","wrapAsync","transfers","create","transferID","update","retrieve","query","created","ObjectIncluding","gt","gte","lt","lte","date","ending_before","limit","starting_after","status","transfer_group","list"],"mappings":"AAAA,IAAIA,gBAAJ;AAAqBC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACC,UAAQC,CAAR,EAAU;AAACL,uBAAiBK,CAAjB;AAAmB;;AAA/B,CAAtC,EAAuE,CAAvE;AAA0E,IAAIC,MAAJ;AAAWL,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACG,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,KAAJ;AAAUN,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACI,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIG,KAAJ;AAAUP,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACK,QAAMH,CAAN,EAAQ;AAACG,YAAMH,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAKzPC,OAAOG,OAAP,CAAe;AACX,6BAA2B,UAAUC,IAAV,EAAgB;AACvC,QAAI,CAACA,IAAL,EAAW;AACP,YAAM,IAAIJ,OAAOK,KAAX,CAAiB,GAAjB,EAAsB,gDAAtB,CAAN;AACH;;AACDJ,UAAMG,IAAN,EAAY;AACRE,cAAQC,MADA;AAERC,uBAAiBN,MAAMO,KAAN,CAAYF,MAAZ,CAFT;AAGRG,gBAAUC,MAHF;AAIRC,mBAAaD,MAJL;AAKRE,mBAAaX,MAAMO,KAAN,CAAYE,MAAZ,CALL;AAMRG,gBAAUZ,MAAMO,KAAN,CAAYM,MAAZ,CANF;AAORC,0BAAoBd,MAAMO,KAAN,CAAYE,MAAZ,CAPZ;AAQRM,4BAAsBf,MAAMO,KAAN,CAAYE,MAAZ,CARd;AASRO,mBAAahB,MAAMO,KAAN,CAAYE,MAAZ,CATL;AAURQ,cAAQjB,MAAMO,KAAN,CAAYE,MAAZ;AAVA,KAAZ;AAaA,QAAIS,SAAS1B,kBAAb;AACA,QAAIyB,SAASnB,OAAOqB,SAAP,CAAiBD,OAAOE,SAAP,CAAiBC,MAAlC,EAA0CH,OAAOE,SAAjD,CAAb;AAEA,WAAOH,OAAOf,IAAP,CAAP;AACH,GAtBU;AAuBX,6BAA2B,UAAUoB,UAAV,EAAsBpB,IAAtB,EAA4B;AACnD,QAAI,CAACoB,UAAL,EAAiB;AACb,YAAM,IAAIxB,OAAOK,KAAX,CAAiB,GAAjB,EAAsB,qDAAtB,CAAN;AACH;;AACD,QAAI,CAACD,IAAL,EAAW;AACP,YAAM,IAAIJ,OAAOK,KAAX,CAAiB,GAAjB,EAAsB,uDAAtB,CAAN;AACH;;AAEDJ,UAAMuB,UAAN,EAAkBb,MAAlB;AACAV,UAAMG,IAAN,EAAY;AACRS,mBAAaX,MAAMO,KAAN,CAAYE,MAAZ,CADL;AAERG,gBAAUZ,MAAMO,KAAN,CAAYM,MAAZ;AAFF,KAAZ;AAKA,QAAIK,SAAS1B,kBAAb;AACA,QAAIyB,SAASnB,OAAOqB,SAAP,CAAiBD,OAAOE,SAAP,CAAiBG,MAAlC,EAA0CL,OAAOE,SAAjD,CAAb;AAEA,WAAOH,OAAOK,UAAP,EAAmBpB,IAAnB,CAAP;AACH,GAzCU;AA0CX,0BAAwB,UAAUoB,UAAV,EAAsB;AAC1C,QAAI,CAACA,UAAL,EAAiB;AACb,YAAM,IAAIxB,OAAOK,KAAX,CAAiB,GAAjB,EAAsB,qDAAtB,CAAN;AACH;;AAEDJ,UAAMuB,UAAN,EAAkBb,MAAlB;AAEA,QAAIS,SAAS1B,kBAAb;AACA,QAAIyB,SAASnB,OAAOqB,SAAP,CAAiBD,OAAOE,SAAP,CAAiBI,QAAlC,EAA4CN,OAAOE,SAAnD,CAAb;AAEA,WAAOH,OAAOK,UAAP,CAAP;AACH,GArDU;AAsDX,2BAAyB,UAAUG,KAAV,EAAiB;AACtC,QAAI,CAACA,KAAL,EAAY;AACR,YAAM,IAAI3B,OAAOK,KAAX,CAAiB,GAAjB,EAAsB,wCAAtB,CAAN;AACH;;AAEDJ,UAAM0B,KAAN,EAAa;AACTC,eAAS1B,MAAMO,KAAN,CAAYP,MAAM2B,eAAN,CAAsB;AACvCC,YAAI5B,MAAMO,KAAN,CAAYE,MAAZ,CADmC;AAEvCoB,aAAK7B,MAAMO,KAAN,CAAYE,MAAZ,CAFkC;AAGvCqB,YAAI9B,MAAMO,KAAN,CAAYE,MAAZ,CAHmC;AAIvCsB,aAAK/B,MAAMO,KAAN,CAAYE,MAAZ;AAJkC,OAAtB,CAAZ,CADA;AAOTuB,YAAMhC,MAAMO,KAAN,CAAYP,MAAM2B,eAAN,CAAsB;AACpCC,YAAI5B,MAAMO,KAAN,CAAYE,MAAZ,CADgC;AAEpCoB,aAAK7B,MAAMO,KAAN,CAAYE,MAAZ,CAF+B;AAGpCqB,YAAI9B,MAAMO,KAAN,CAAYE,MAAZ,CAHgC;AAIpCsB,aAAK/B,MAAMO,KAAN,CAAYE,MAAZ;AAJ+B,OAAtB,CAAZ,CAPG;AAaTC,mBAAaV,MAAMO,KAAN,CAAYE,MAAZ,CAbJ;AAcTwB,qBAAejC,MAAMO,KAAN,CAAYE,MAAZ,CAdN;AAeTyB,aAAOlC,MAAMO,KAAN,CAAYF,MAAZ,CAfE;AAgBT8B,sBAAgBnC,MAAMO,KAAN,CAAYE,MAAZ,CAhBP;AAiBT2B,cAAQpC,MAAMO,KAAN,CAAYE,MAAZ,CAjBC;AAkBT4B,sBAAgBrC,MAAMO,KAAN,CAAYE,MAAZ;AAlBP,KAAb;AAoBA,QAAIS,SAAS1B,kBAAb;AACA,QAAIyB,SAASnB,OAAOqB,SAAP,CAAiBD,OAAOE,SAAP,CAAiBkB,IAAlC,EAAwCpB,OAAOE,SAA/C,CAAb;AACA,WAAOH,OAAOQ,KAAP,CAAP;AACH;AAlFU,CAAf","sourcesContent":["import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_transfers_create\": function (data) {\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Transfer Data Provided\");\n        }\n        check(data, {\n            amount: Number,\n            application_fee: Match.Maybe(Number),\n            currency: String,\n            destination: String,\n            description: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            source_transaction: Match.Maybe(String),\n            statement_descriptor: Match.Maybe(String),\n            source_type: Match.Maybe(String),\n            method: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.transfers.create, client.transfers);\n\n        return method(data);\n    },\n    \"stripe_transfers_update\": function (transferID, data) {\n        if (!transferID) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer Data Provided\");\n        }\n\n        check(transferID, String);\n        check(data, {\n            description: Match.Maybe(String),\n            metadata: Match.Maybe(Object)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.transfers.update, client.transfers);\n\n        return method(transferID, data);\n    },\n    \"stripe_transfers_get\": function (transferID) {\n        if (!transferID) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer ID Provided\");\n        }\n\n        check(transferID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.transfers.retrieve, client.transfers);\n\n        return method(transferID);\n    },\n    \"stripe_transfers_list\": function (query) {\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Query Provided\");\n        }\n\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            date: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            destination: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String),\n            status: Match.Maybe(String),\n            transfer_group: Match.Maybe(String)\n        });\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.transfers.list, client.transfers);\n        return method(query);\n    }\n});"]},"sourceType":"script","hash":"9e8d3657ef5ddc4c842eee2057149e5ac7ecb690"}
