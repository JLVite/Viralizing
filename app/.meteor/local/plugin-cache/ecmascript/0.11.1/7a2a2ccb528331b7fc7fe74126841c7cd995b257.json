{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/core/ui/components/forms/input-file-upload.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/core/ui/components/forms/input-file-upload.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/core/ui/components/forms/input-file-upload.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/core/ui/components/forms/input-file-upload.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/core/ui/components/forms/input-file-upload.jsx"}},"code":"let React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Dropzone;\nmodule.watch(require(\"react-dropzone\"), {\n  default(v) {\n    Dropzone = v;\n  }\n\n}, 1);\nlet notie;\nmodule.watch(require(\"notie\"), {\n  default(v) {\n    notie = v;\n  }\n\n}, 2);\n\nclass InputFileUpload extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      files: []\n    };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  onDrop(acceptedFiles) {\n    let files = [];\n    let component = this;\n    acceptedFiles.forEach(function (file) {\n      let uploader = new Slingshot.Upload(component.props.uploader);\n      uploader.send(file, function (error, downloadUrl) {\n        if (error) {\n          // Log service detailed response\n          notie.alert(3, \"Error uploading image.\", 3);\n          console.error('Error uploading', error);\n        } else {\n          component.props.input.onChange(downloadUrl);\n\n          if (component.props.callback) {\n            component.props.callback(downloadUrl);\n          }\n        }\n      });\n      uploader.progressVal = 0;\n      Tracker.autorun(function () {\n        let progress = uploader.progress();\n\n        if (progress) {\n          let uploaderPosition = component.state.files.indexOf(uploader);\n\n          if (uploaderPosition !== -1) {\n            let newFiles = [...component.state.files];\n            newFiles[uploaderPosition].progressVal = progress * 100;\n            component.setState({\n              files: newFiles\n            });\n          }\n        }\n      });\n      files.push(uploader);\n    });\n    this.setState({\n      files: files\n    });\n  }\n\n  render() {\n    let {\n      multiple,\n      maxSize,\n      className,\n      activeClassName,\n      accept\n    } = this.props.settings;\n    return React.createElement(\"div\", null, React.createElement(Dropzone, {\n      onDrop: this.onDrop,\n      multiple: multiple || false,\n      maxSize: maxSize || 15 * 1024 * 1024,\n      className: className,\n      activeClassName: activeClassName,\n      accept: accept || \"image/png, image/jpeg, image/gif\"\n    }, this.props.content || \"Drop zone\", this.state.files.length > 0 ? React.createElement(\"div\", {\n      className: \"upload-progress\"\n    }, this.state.files.map((file, i) => React.createElement(\"div\", {\n      className: \"progress-bar \" + (file.progressVal === 100 ? \"done\" : \"\"),\n      key: i\n    }, React.createElement(\"div\", {\n      className: \"bar\",\n      style: {\n        width: file.progressVal + \"%\"\n      }\n    })))) : null));\n  }\n\n}\n\nmodule.exportDefault(InputFileUpload);","map":{"version":3,"sources":["imports/modules/core/ui/components/forms/input-file-upload.jsx"],"names":["React","module","watch","require","default","v","Dropzone","notie","InputFileUpload","Component","constructor","state","files","onDrop","bind","acceptedFiles","component","forEach","file","uploader","Slingshot","Upload","props","send","error","downloadUrl","alert","console","input","onChange","callback","progressVal","Tracker","autorun","progress","uploaderPosition","indexOf","newFiles","setState","push","render","multiple","maxSize","className","activeClassName","accept","settings","content","length","map","i","width","exportDefault"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Dropzone from\"react-dropzone\";\nimport notie from \"notie\";\n\nclass InputFileUpload extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            files: []\n        };\n\n        this.onDrop = this.onDrop.bind(this);\n    }\n    onDrop(acceptedFiles) {\n        let files = [];\n        let component = this;\n        acceptedFiles.forEach(function (file) {\n            let uploader = new Slingshot.Upload(component.props.uploader);\n\n            uploader.send(file, function (error, downloadUrl) {\n                if (error) {\n                    // Log service detailed response\n                    notie.alert(3,\"Error uploading image.\",3);\n                    console.error('Error uploading', error);\n                }\n                else {\n                    component.props.input.onChange(downloadUrl);\n                    if(component.props.callback){\n                        component.props.callback(downloadUrl);\n                    }\n                }\n            });\n\n            uploader.progressVal = 0;\n\n            Tracker.autorun(function () {\n                let progress = uploader.progress();\n                if (progress) {\n                    let uploaderPosition = component.state.files.indexOf(uploader);\n                    if (uploaderPosition !== -1) {\n                        let newFiles = [...component.state.files];\n                        newFiles[uploaderPosition].progressVal = progress*100;\n                        component.setState({\n                            files: newFiles\n                        });\n                    }\n                }\n            });\n\n            files.push(uploader);\n\n        });\n\n        this.setState({\n            files: files\n        });\n    }\n    render(){\n        let { multiple, maxSize, className, activeClassName, accept } = this.props.settings;\n        return(\n           <div>\n               <Dropzone onDrop={this.onDrop}\n                         multiple={multiple||false}\n                         maxSize={maxSize||15 * 1024 * 1024}\n                         className={className}\n                         activeClassName={activeClassName}\n                         accept={accept||\"image/png, image/jpeg, image/gif\"}>\n                   {this.props.content||\"Drop zone\"}\n                   {this.state.files.length > 0 ? <div className=\"upload-progress\">\n                           {this.state.files.map((file, i) => (\n                               <div className={\"progress-bar \"+((file.progressVal===100)?\"done\":\"\")} key={i}>\n                                   <div className=\"bar\" style={{width:file.progressVal+\"%\"}}/>\n                               </div>\n                           ))}\n                       </div> : null}\n               </Dropzone>\n\n           </div>\n        )\n    }\n}\n\nexport default InputFileUpload;"]},"sourceType":"script","hash":"7a2a2ccb528331b7fc7fe74126841c7cd995b257"}
