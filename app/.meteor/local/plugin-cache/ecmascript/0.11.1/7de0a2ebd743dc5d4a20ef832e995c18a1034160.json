{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/events/resolvers/events.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/server/schemas/events/resolvers/events.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/events/resolvers/events.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/events/resolvers/events.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/server/schemas/events/resolvers/events.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    eventsOwn(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      console.log(\"EVENTS_OWN\", args);\n      let posts = [];\n      let campaigns = [];\n\n      if (args.posts) {\n        posts = Posts.find({\n          owner: userID\n        }).fetch().map(p => ({\n          _id: p._id,\n          type: \"post\",\n          allDay: false,\n          start: p.date,\n          end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n          title: (p.account.name || \"\") + \" \" + (p.account.lastName || \"\"),\n          preview: p.account.avatar,\n          network: p.account.network\n        }));\n      }\n\n      if (args.all) {\n        campaigns = Campaigns.find({\n          owner: userID\n        }).fetch().map(c => ({\n          _id: c._id,\n          type: \"campaign\",\n          allDay: true,\n          start: c.information.dateStart,\n          end: c.information.dateEnd,\n          title: c.information.name,\n          preview: c.information.profile,\n          network: null\n        }));\n      } //TODO: IMPLEMENT REST OF FILTERS\n\n\n      return [...posts, ...campaigns];\n    },\n\n    eventsCampaign(root, args, context) {\n      let query = {\n        campaign: args.campaignID\n      };\n\n      if (!args.all) {\n        let filters = [];\n        Object.keys(args).forEach(key => {\n          if (args[key]) {\n            filters.push(key);\n          }\n        });\n        query.status = {\n          $in: filters\n        };\n      }\n\n      let posts = Posts.find(query).fetch().map(p => ({\n        _id: p._id,\n        type: \"post\",\n        allDay: false,\n        start: p.date,\n        end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n        title: (p.account.name || \"\") + \" \" + (p.account.lastName || \"\"),\n        preview: p.account.avatar,\n        network: p.account.network\n      }));\n      return posts;\n    },\n\n    eventsAccount(root, args, context) {\n      let query = {\n        \"account._id\": args.accountID\n      };\n\n      if (!args.all) {\n        let filters = [];\n        Object.keys(args).forEach(key => {\n          if (args[key]) {\n            filters.push(key);\n          }\n        });\n        query.status = {\n          $in: filters\n        };\n      }\n\n      let posts = Posts.find(query).fetch().map(p => ({\n        _id: p._id,\n        type: \"post\",\n        allDay: false,\n        start: p.date,\n        end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n        title: (p.account.name || \"\") + \" \" + (p.account.lastName || \"\"),\n        preview: p.account.avatar,\n        network: p.account.network\n      }));\n      return posts;\n    }\n\n  }\n});","map":{"version":3,"sources":["imports/server/schemas/events/resolvers/events.jsx"],"names":["Meteor","module","watch","require","v","exportDefault","Query","eventsOwn","root","args","context","userID","userId","console","log","posts","campaigns","Posts","find","owner","fetch","map","p","_id","type","allDay","start","date","end","moment","Date","add","toDate","title","account","name","lastName","preview","avatar","network","all","Campaigns","c","information","dateStart","dateEnd","profile","eventsCampaign","query","campaign","campaignID","filters","Object","keys","forEach","key","push","status","$in","eventsAccount","accountID"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAAXH,OAAOI,aAAP,CAEe;AACXC,SAAO;AACHC,cAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;AAC3B,YAAMC,SAASD,QAAQE,MAAR,IAAkB,mBAAjC;AACAC,cAAQC,GAAR,CAAY,YAAZ,EAA0BL,IAA1B;AACA,UAAIM,QAAQ,EAAZ;AACA,UAAIC,YAAY,EAAhB;;AACA,UAAIP,KAAKM,KAAT,EAAgB;AACZA,gBAAQE,MAAMC,IAAN,CAAW;AAACC,iBAAOR;AAAR,SAAX,EAA4BS,KAA5B,GAAoCC,GAApC,CAAyCC,CAAD,KAAQ;AACpDC,eAAKD,EAAEC,GAD6C;AAEpDC,gBAAM,MAF8C;AAGpDC,kBAAQ,KAH4C;AAIpDC,iBAAOJ,EAAEK,IAJ2C;AAKpDC,eAAKC,OAAO,IAAIC,IAAJ,CAASR,EAAEK,IAAX,CAAP,EAAyBI,GAAzB,CAA6B,CAA7B,EAAgC,SAAhC,EAA2CC,MAA3C,EAL+C;AAMpDC,iBAAQ,CAACX,EAAEY,OAAF,CAAUC,IAAV,IAAkB,EAAnB,IAAyB,GAAzB,IAAgCb,EAAEY,OAAF,CAAUE,QAAV,IAAsB,EAAtD,CAN4C;AAOpDC,mBAASf,EAAEY,OAAF,CAAUI,MAPiC;AAQpDC,mBAASjB,EAAEY,OAAF,CAAUK;AARiC,SAAR,CAAxC,CAAR;AAUH;;AACD,UAAI9B,KAAK+B,GAAT,EAAc;AACVxB,oBAAYyB,UAAUvB,IAAV,CAAe;AAACC,iBAAOR;AAAR,SAAf,EAAgCS,KAAhC,GAAwCC,GAAxC,CAA6CqB,CAAD,KAAQ;AAC5DnB,eAAKmB,EAAEnB,GADqD;AAE5DC,gBAAM,UAFsD;AAG5DC,kBAAQ,IAHoD;AAI5DC,iBAAOgB,EAAEC,WAAF,CAAcC,SAJuC;AAK5DhB,eAAKc,EAAEC,WAAF,CAAcE,OALyC;AAM5DZ,iBAAOS,EAAEC,WAAF,CAAcR,IANuC;AAO5DE,mBAASK,EAAEC,WAAF,CAAcG,OAPqC;AAQ5DP,mBAAS;AARmD,SAAR,CAA5C,CAAZ;AAUH,OA5B0B,CA6B3B;;;AACA,aAAO,CAAC,GAAGxB,KAAJ,EAAW,GAAGC,SAAd,CAAP;AACH,KAhCE;;AAiCH+B,mBAAevC,IAAf,EAAqBC,IAArB,EAA2BC,OAA3B,EAAoC;AAChC,UAAIsC,QAAQ;AACRC,kBAAUxC,KAAKyC;AADP,OAAZ;;AAIA,UAAI,CAACzC,KAAK+B,GAAV,EAAe;AACX,YAAIW,UAAU,EAAd;AACAC,eAAOC,IAAP,CAAY5C,IAAZ,EAAkB6C,OAAlB,CAA2BC,GAAD,IAAS;AAC/B,cAAI9C,KAAK8C,GAAL,CAAJ,EAAe;AACXJ,oBAAQK,IAAR,CAAaD,GAAb;AACH;AACJ,SAJD;AAKAP,cAAMS,MAAN,GAAe;AAACC,eAAKP;AAAN,SAAf;AACH;;AAED,UAAIpC,QAAQE,MAAMC,IAAN,CAAW8B,KAAX,EAAkB5B,KAAlB,GAA0BC,GAA1B,CAA+BC,CAAD,KAAQ;AAC9CC,aAAKD,EAAEC,GADuC;AAE9CC,cAAM,MAFwC;AAG9CC,gBAAQ,KAHsC;AAI9CC,eAAOJ,EAAEK,IAJqC;AAK9CC,aAAKC,OAAO,IAAIC,IAAJ,CAASR,EAAEK,IAAX,CAAP,EAAyBI,GAAzB,CAA6B,CAA7B,EAAgC,SAAhC,EAA2CC,MAA3C,EALyC;AAM9CC,eAAQ,CAACX,EAAEY,OAAF,CAAUC,IAAV,IAAkB,EAAnB,IAAyB,GAAzB,IAAgCb,EAAEY,OAAF,CAAUE,QAAV,IAAsB,EAAtD,CANsC;AAO9CC,iBAASf,EAAEY,OAAF,CAAUI,MAP2B;AAQ9CC,iBAASjB,EAAEY,OAAF,CAAUK;AAR2B,OAAR,CAA9B,CAAZ;AAUA,aAAOxB,KAAP;AACH,KA3DE;;AA4DH4C,kBAAcnD,IAAd,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AAC/B,UAAIsC,QAAQ;AACR,uBAAevC,KAAKmD;AADZ,OAAZ;;AAIA,UAAI,CAACnD,KAAK+B,GAAV,EAAe;AACX,YAAIW,UAAU,EAAd;AACAC,eAAOC,IAAP,CAAY5C,IAAZ,EAAkB6C,OAAlB,CAA2BC,GAAD,IAAS;AAC/B,cAAI9C,KAAK8C,GAAL,CAAJ,EAAe;AACXJ,oBAAQK,IAAR,CAAaD,GAAb;AACH;AACJ,SAJD;AAKAP,cAAMS,MAAN,GAAe;AAACC,eAAKP;AAAN,SAAf;AACH;;AAED,UAAIpC,QAAQE,MAAMC,IAAN,CAAW8B,KAAX,EAAkB5B,KAAlB,GAA0BC,GAA1B,CAA+BC,CAAD,KAAQ;AAC9CC,aAAKD,EAAEC,GADuC;AAE9CC,cAAM,MAFwC;AAG9CC,gBAAQ,KAHsC;AAI9CC,eAAOJ,EAAEK,IAJqC;AAK9CC,aAAKC,OAAO,IAAIC,IAAJ,CAASR,EAAEK,IAAX,CAAP,EAAyBI,GAAzB,CAA6B,CAA7B,EAAgC,SAAhC,EAA2CC,MAA3C,EALyC;AAM9CC,eAAQ,CAACX,EAAEY,OAAF,CAAUC,IAAV,IAAkB,EAAnB,IAAyB,GAAzB,IAAgCb,EAAEY,OAAF,CAAUE,QAAV,IAAsB,EAAtD,CANsC;AAO9CC,iBAASf,EAAEY,OAAF,CAAUI,MAP2B;AAQ9CC,iBAASjB,EAAEY,OAAF,CAAUK;AAR2B,OAAR,CAA9B,CAAZ;AAUA,aAAOxB,KAAP;AACH;;AAtFE;AADI,CAFf","sourcesContent":["import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        eventsOwn(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            console.log(\"EVENTS_OWN\", args);\n            let posts = [];\n            let campaigns = [];\n            if (args.posts) {\n                posts = Posts.find({owner: userID}).fetch().map((p) => ({\n                    _id: p._id,\n                    type: \"post\",\n                    allDay: false,\n                    start: p.date,\n                    end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n                    title: ((p.account.name || \"\") + \" \" + (p.account.lastName || \"\")),\n                    preview: p.account.avatar,\n                    network: p.account.network\n                }));\n            }\n            if (args.all) {\n                campaigns = Campaigns.find({owner: userID}).fetch().map((c) => ({\n                    _id: c._id,\n                    type: \"campaign\",\n                    allDay: true,\n                    start: c.information.dateStart,\n                    end: c.information.dateEnd,\n                    title: c.information.name,\n                    preview: c.information.profile,\n                    network: null\n                }));\n            }\n            //TODO: IMPLEMENT REST OF FILTERS\n            return [...posts, ...campaigns]\n        },\n        eventsCampaign(root, args, context) {\n            let query = {\n                campaign: args.campaignID\n            };\n\n            if (!args.all) {\n                let filters = [];\n                Object.keys(args).forEach((key) => {\n                    if (args[key]) {\n                        filters.push(key);\n                    }\n                });\n                query.status = {$in: filters};\n            }\n\n            let posts = Posts.find(query).fetch().map((p) => ({\n                _id: p._id,\n                type: \"post\",\n                allDay: false,\n                start: p.date,\n                end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n                title: ((p.account.name || \"\") + \" \" + (p.account.lastName || \"\")),\n                preview: p.account.avatar,\n                network: p.account.network\n            }));\n            return posts;\n        },\n        eventsAccount(root, args, context) {\n            let query = {\n                \"account._id\": args.accountID\n            };\n\n            if (!args.all) {\n                let filters = [];\n                Object.keys(args).forEach((key) => {\n                    if (args[key]) {\n                        filters.push(key);\n                    }\n                });\n                query.status = {$in: filters};\n            }\n\n            let posts = Posts.find(query).fetch().map((p) => ({\n                _id: p._id,\n                type: \"post\",\n                allDay: false,\n                start: p.date,\n                end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n                title: ((p.account.name || \"\") + \" \" + (p.account.lastName || \"\")),\n                preview: p.account.avatar,\n                network: p.account.network\n            }));\n            return posts;\n        }\n    }\n};"]},"sourceType":"script","hash":"7de0a2ebd743dc5d4a20ef832e995c18a1034160"}
