{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/twitter/server/post-create.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/twitter/server/post-create.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/twitter/server/post-create.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/twitter/server/post-create.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/twitter/server/post-create.jsx"}},"code":"let TwitterConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\n\nlet request = require('request').defaults({\n  encoding: null\n});\n\nMeteor.methods({\n  \"twitter-post-create\": function (connection, post, callback) {\n    if (typeof connection === 'string') {\n      let account = SocialAccounts.findOne({\n        _id: connection\n      });\n      connection = account.connection;\n    }\n\n    const tweetID = connection.id;\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      /*console.log(\"TWITTER_CLIENT\",client.post);*/\n      let postMessage = function (post) {\n        return client.post('statuses/update', post, function (error, tweet, response) {\n          if (error) {\n            throw new Meteor.Error(\"Twitter: Failed to Post\", error);\n          }\n\n          if (callback) {\n            callback();\n          }\n        });\n      },\n          postImage = function (post) {\n        request.get(post.media, function (error, response, body) {\n          if (!error && response.statusCode == 200) {\n            client.post('media/upload', {\n              media: body\n            }, function (error, media, response) {\n              if (error) {\n                console.log(error);\n                return new Meteor.Error(\"Twitter: Failed to Upload Media\");\n              }\n\n              if (!error) {\n                post.media_ids = media.media_id_string;\n                delete post.media;\n                return postMessage(post);\n              }\n            });\n          }\n        });\n      };\n\n      console.log(\"TWITTER_POST_DATE:\", post.date, \"_CURRENT_TIME:\", new Date());\n      let message = {\n        status: post.message // + \"Scheduled at: \" + moment(post.date).format(\"h:m A\") + \" Posted at: \" + moment(new Date()).format(\"h:m A\")\n\n      };\n\n      if (post.location) {\n        message.lat = post.location[0];\n        message.long = post.location[1];\n        message.display_coordinates = true;\n      }\n\n      if (post.media) {\n        message.media = post.media;\n      }\n\n      let query;\n\n      if (message.media) {\n        query = postImage(message);\n      } else {\n        query = postMessage(message);\n      }\n\n      return query;\n    }\n  }\n});","map":{"version":3,"sources":["imports/modules/twitter/server/post-create.jsx"],"names":["TwitterConnection","module","watch","require","default","v","request","defaults","encoding","Meteor","methods","connection","post","callback","account","SocialAccounts","findOne","_id","tweetID","id","client","accessToken","accessTokenSecret","postMessage","error","tweet","response","Error","postImage","get","media","body","statusCode","console","log","media_ids","media_id_string","date","Date","message","status","location","lat","long","display_coordinates","query"],"mappings":"AAAA,IAAIA,iBAAJ;AAAsBC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACC,UAAQC,CAAR,EAAU;AAACL,wBAAkBK,CAAlB;AAAoB;;AAAhC,CAArC,EAAuE,CAAvE;;AAEtB,IAAIC,UAAUH,QAAQ,SAAR,EAAmBI,QAAnB,CAA4B;AAACC,YAAU;AAAX,CAA5B,CAAd;;AAEAC,OAAOC,OAAP,CAAe;AACX,yBAAuB,UAAUC,UAAV,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AACzD,QAAG,OAAOF,UAAP,KAAuB,QAA1B,EAAmC;AAC/B,UAAIG,UAAUC,eAAeC,OAAf,CAAuB;AAACC,aAAKN;AAAN,OAAvB,CAAd;AACAA,mBAAaG,QAAQH,UAArB;AACH;;AACD,UAAMO,UAAUP,WAAWQ,EAA3B;AACA,QAAIC,SAASpB,kBAAkBW,WAAWU,WAA7B,EAA0CV,WAAWW,iBAArD,CAAb;;AAEA,QAAIF,MAAJ,EAAY;AACR;AACA,UAAIG,cAAc,UAAUX,IAAV,EAAgB;AAC1B,eAAOQ,OAAOR,IAAP,CAAY,iBAAZ,EAA+BA,IAA/B,EAAqC,UAAUY,KAAV,EAAiBC,KAAjB,EAAwBC,QAAxB,EAAkC;AAC1E,cAAIF,KAAJ,EAAW;AACP,kBAAM,IAAIf,OAAOkB,KAAX,CAAiB,yBAAjB,EAA4CH,KAA5C,CAAN;AACH;;AACD,cAAIX,QAAJ,EAAc;AACVA;AACH;AACJ,SAPM,CAAP;AAQH,OATL;AAAA,UAUIe,YAAY,UAAUhB,IAAV,EAAgB;AACxBN,gBAAQuB,GAAR,CAAYjB,KAAKkB,KAAjB,EAAwB,UAAUN,KAAV,EAAiBE,QAAjB,EAA2BK,IAA3B,EAAiC;AACrD,cAAI,CAACP,KAAD,IAAUE,SAASM,UAAT,IAAuB,GAArC,EAA0C;AAEtCZ,mBAAOR,IAAP,CAAY,cAAZ,EAA4B;AAACkB,qBAAOC;AAAR,aAA5B,EAA2C,UAAUP,KAAV,EAAiBM,KAAjB,EAAwBJ,QAAxB,EAAkC;AAEzE,kBAAIF,KAAJ,EAAW;AACPS,wBAAQC,GAAR,CAAYV,KAAZ;AACA,uBAAO,IAAIf,OAAOkB,KAAX,CAAiB,iCAAjB,CAAP;AACH;;AACD,kBAAI,CAACH,KAAL,EAAY;AACRZ,qBAAKuB,SAAL,GAAiBL,MAAMM,eAAvB;AACA,uBAAOxB,KAAKkB,KAAZ;AAEA,uBAAOP,YAAYX,IAAZ,CAAP;AACH;AACJ,aAZD;AAaH;AACJ,SAjBD;AAkBH,OA7BL;;AA+BAqB,cAAQC,GAAR,CAAY,oBAAZ,EAAkCtB,KAAKyB,IAAvC,EAA6C,gBAA7C,EAA+D,IAAIC,IAAJ,EAA/D;AACA,UAAIC,UAAU;AACVC,gBAAQ5B,KAAK2B,OADH,CACU;;AADV,OAAd;;AAIA,UAAI3B,KAAK6B,QAAT,EAAmB;AACfF,gBAAQG,GAAR,GAAc9B,KAAK6B,QAAL,CAAc,CAAd,CAAd;AACAF,gBAAQI,IAAR,GAAe/B,KAAK6B,QAAL,CAAc,CAAd,CAAf;AACAF,gBAAQK,mBAAR,GAA8B,IAA9B;AACH;;AACD,UAAIhC,KAAKkB,KAAT,EAAgB;AACZS,gBAAQT,KAAR,GAAgBlB,KAAKkB,KAArB;AACH;;AAED,UAAIe,KAAJ;;AAEA,UAAIN,QAAQT,KAAZ,EAAmB;AACfe,gBAAQjB,UAAUW,OAAV,CAAR;AACH,OAFD,MAEO;AACHM,gBAAQtB,YAAYgB,OAAZ,CAAR;AACH;;AAED,aAAOM,KAAP;AACH;AACJ;AAlEU,CAAf","sourcesContent":["import TwitterConnection from \"./connection\";\n\nlet request = require('request').defaults({encoding: null});\n\nMeteor.methods({\n    \"twitter-post-create\": function (connection, post, callback) {\n        if(typeof(connection) === 'string'){\n            let account = SocialAccounts.findOne({_id: connection});\n            connection = account.connection;\n        }\n        const tweetID = connection.id;\n        let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        if (client) {\n            /*console.log(\"TWITTER_CLIENT\",client.post);*/\n            let postMessage = function (post) {\n                    return client.post('statuses/update', post, function (error, tweet, response) {\n                        if (error) {\n                            throw new Meteor.Error(\"Twitter: Failed to Post\", error);\n                        }\n                        if (callback) {\n                            callback();\n                        }\n                    });\n                },\n                postImage = function (post) {\n                    request.get(post.media, function (error, response, body) {\n                        if (!error && response.statusCode == 200) {\n\n                            client.post('media/upload', {media: body}, function (error, media, response) {\n\n                                if (error) {\n                                    console.log(error);\n                                    return new Meteor.Error(\"Twitter: Failed to Upload Media\");\n                                }\n                                if (!error) {\n                                    post.media_ids = media.media_id_string;\n                                    delete post.media;\n\n                                    return postMessage(post);\n                                }\n                            });\n                        }\n                    });\n                };\n\n            console.log(\"TWITTER_POST_DATE:\", post.date, \"_CURRENT_TIME:\", new Date());\n            let message = {\n                status: post.message// + \"Scheduled at: \" + moment(post.date).format(\"h:m A\") + \" Posted at: \" + moment(new Date()).format(\"h:m A\")\n            };\n\n            if (post.location) {\n                message.lat = post.location[0];\n                message.long = post.location[1];\n                message.display_coordinates = true;\n            }\n            if (post.media) {\n                message.media = post.media;\n            }\n\n            let query;\n\n            if (message.media) {\n                query = postImage(message);\n            } else {\n                query = postMessage(message);\n            }\n\n            return query;\n        }\n    }\n});\n"]},"sourceType":"script","hash":"b6ae29975952908aacebbe1d50e7038959e6a849"}
