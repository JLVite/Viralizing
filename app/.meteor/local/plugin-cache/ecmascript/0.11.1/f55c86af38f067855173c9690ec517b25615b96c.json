{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/instagram/server/account-stats.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/instagram/server/account-stats.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/instagram/server/account-stats.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/instagram/server/account-stats.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/instagram/server/account-stats.jsx"}},"code":"let InstagramConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    InstagramConnection = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"instagram-account-stats\": function (userName, profile) {\n    if (!profile) {\n      profile = SocialAccounts.findOne({\n        \"network\": \"instagram\"\n      });\n    }\n\n    if (!profile) {\n      throw new Meteor.Error(\"There's no matching profile\");\n    }\n\n    let connection = profile.connection,\n        client = InstagramConnection(connection.accessToken);\n\n    if (profile) {\n      let posts = [];\n      let syncUser = Meteor.wrapAsync(client.user_self, client); //console.log(\"before user\");\n\n      let user = syncUser({\n        access_token: connection.accessToken\n      }); //console.log(\"after user\", user);\n\n      let syncPosts = Meteor.wrapAsync(client.user_self_media_recent, client),\n          getPosts = function (max_id) {\n        let query = {\n          count: 200\n        };\n\n        if (max_id) {\n          query.max_id = max_id;\n        }\n\n        let result = syncPosts(query, {\n          access_token: connection.accessToken\n        }),\n            lastPost = result[result.length - 1];\n        posts = [...posts, ...result];\n\n        if (lastPost) {\n          if (max_id) {\n            if (max_id !== lastPost.id) {\n              getPosts(lastPost.id);\n            }\n          } else {\n            getPosts(lastPost.id);\n          }\n        }\n      };\n\n      getPosts();\n      let samplePost = {\n        created_time: Number(new Date()) / 1000\n      };\n      const first = posts[0] || samplePost;\n      const last = posts[posts.length - 1] || samplePost;\n      let comments = 0;\n      let likes = 0;\n\n      for (const x of posts) {\n        comments += x.comments.count;\n        likes += x.likes.count;\n      }\n\n      let result = {\n        comments,\n        commentsPerPost: comments / posts.length,\n        likes,\n        likesPerPost: likes / posts.length,\n        engagement: (comments + likes) / posts.length / user.counts.followed_by,\n        followers: user.counts.followed_by,\n        following: user.counts.follows,\n        posts: user.counts.media,\n        postsPerDay: posts.length / Math.abs(moment(new Date(Number(first.created_time) * 1000)).diff(moment(new Date(Number(last.created_time) * 1000)), \"days\"))\n      };\n      Object.keys(result).forEach(key => {\n        if (Number.isNaN(result[key])) {\n          result[key] = 0;\n        }\n      });\n\n      if (result.postsPerDay === Infinity) {\n        result.postsPerDay = 0;\n      }\n\n      return result;\n    }\n  }\n});","map":{"version":3,"sources":["imports/modules/instagram/server/account-stats.jsx"],"names":["InstagramConnection","module","watch","require","default","v","Meteor","methods","userName","profile","SocialAccounts","findOne","Error","connection","client","accessToken","posts","syncUser","wrapAsync","user_self","user","access_token","syncPosts","user_self_media_recent","getPosts","max_id","query","count","result","lastPost","length","id","samplePost","created_time","Number","Date","first","last","comments","likes","x","commentsPerPost","likesPerPost","engagement","counts","followed_by","followers","following","follows","media","postsPerDay","Math","abs","moment","diff","Object","keys","forEach","key","isNaN","Infinity"],"mappings":"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","sourcesContent":["import InstagramConnection from \"./connection\";\n\nMeteor.methods({\n    \"instagram-account-stats\": function (userName, profile) {\n        if (!profile) {\n            profile = SocialAccounts.findOne({\"network\": \"instagram\"});\n        }\n\n        if (!profile) {\n            throw new Meteor.Error(\"There's no matching profile\");\n        }\n\n        let connection = profile.connection,\n            client = InstagramConnection(connection.accessToken);\n\n        if (profile) {\n            let posts = [];\n\n            let syncUser = Meteor.wrapAsync(client.user_self, client);\n\n            //console.log(\"before user\");\n            let user = syncUser({access_token: connection.accessToken});\n            //console.log(\"after user\", user);\n\n            let syncPosts = Meteor.wrapAsync(client.user_self_media_recent, client),\n                getPosts = function (max_id) {\n                    let query = {\n                        count: 200\n                    };\n                    if (max_id) {\n                        query.max_id = max_id;\n                    }\n\n                    let result = syncPosts(query, {access_token: connection.accessToken}),\n                        lastPost = result[(result.length - 1)];\n                    posts = [...posts, ...result];\n\n                    if (lastPost) {\n                        if (max_id) {\n                            if (max_id !== lastPost.id) {\n                                getPosts(lastPost.id);\n                            }\n                        } else {\n                            getPosts(lastPost.id);\n                        }\n                    }\n                };\n\n            getPosts();\n\n            let samplePost = {created_time: Number(new Date()) / 1000}\n            const first = posts[0] || samplePost;\n            const last = posts[posts.length - 1] || samplePost;\n\n            let comments = 0;\n            let likes = 0;\n\n            for (const x of posts) {\n                comments += x.comments.count;\n                likes += x.likes.count;\n            }\n\n            let result = {\n                comments,\n                commentsPerPost: comments / posts.length,\n                likes,\n                likesPerPost: likes / posts.length,\n                engagement: ((comments + likes) / posts.length) / user.counts.followed_by,\n                followers: user.counts.followed_by,\n                following: user.counts.follows,\n                posts: user.counts.media,\n                postsPerDay: (posts.length / (Math.abs((moment(new Date(Number(first.created_time) * 1000)).diff(moment(new Date(Number(last.created_time) * 1000)), \"days\")))))\n            };\n\n            Object.keys(result).forEach((key) => {\n                if (Number.isNaN(result[key])) {\n                    result[key] = 0;\n                }\n            });\n\n            if (result.postsPerDay === Infinity) {\n                result.postsPerDay = 0;\n            }\n\n            return result\n\n        }\n    }\n});"]},"sourceType":"script","hash":"f55c86af38f067855173c9690ec517b25615b96c"}
