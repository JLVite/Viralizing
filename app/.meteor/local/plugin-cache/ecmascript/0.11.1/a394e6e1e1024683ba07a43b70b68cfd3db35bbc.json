{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/statement/server/methods.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/statement/server/methods.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/statement/server/methods.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/statement/server/methods.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/statement/server/methods.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/payments/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"payments-create-fake\": function () {\n    let user = Meteor.user();\n    let accounts = SocialAccounts.find({}, {\n      fields: {\n        _id: 1\n      }\n    }).fetch();\n    accounts = [...accounts, ...accounts, ...accounts];\n    let cards = [\"Visa\", \"Amex\", \"MasterCard\", \"Discover\"];\n    let payments = accounts.map(a => Object.assign({}, Schema, {\n      status: \"completed\",\n      from: user._id,\n      to: a._id,\n      campaign: Math.round(Math.random()) ? \"FGHsw43uezjudkN2p\" : \"XEuAEdnJL57WobBKN\",\n      amount: Math.round(Math.random() * 100000),\n      date: moment().subtract(Math.floor(Math.random() * 600), 'days').toDate(),\n      paymentMethod: {\n        brand: cards[Math.floor(Math.random() * 4)],\n        last4: String(Math.floor(Math.random() * 10)) + String(Math.floor(Math.random() * 10)) + String(Math.floor(Math.random() * 10)) + String(Math.floor(Math.random() * 10))\n      }\n    }));\n    return payments.map(p => Payments.insert(p));\n  }\n});","map":{"version":3,"sources":["imports/modules/statement/server/methods.jsx"],"names":["Meteor","module","watch","require","v","Schema","default","methods","user","accounts","SocialAccounts","find","fields","_id","fetch","cards","payments","map","a","Object","assign","status","from","to","campaign","Math","round","random","amount","date","moment","subtract","floor","toDate","paymentMethod","brand","last4","String","p","Payments","insert"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,yCAAR,CAAb,EAAgE;AAACG,UAAQF,CAAR,EAAU;AAACC,aAAOD,CAAP;AAAS;;AAArB,CAAhE,EAAuF,CAAvF;AAGrFJ,OAAOO,OAAP,CAAe;AACX,0BAAwB,YAAU;AAC9B,QAAIC,OAAOR,OAAOQ,IAAP,EAAX;AACA,QAAIC,WAAWC,eAAeC,IAAf,CAAoB,EAApB,EAAuB;AAACC,cAAO;AAACC,aAAI;AAAL;AAAR,KAAvB,EAAyCC,KAAzC,EAAf;AACAL,eAAS,CAAC,GAAGA,QAAJ,EAAa,GAAGA,QAAhB,EAAyB,GAAGA,QAA5B,CAAT;AACA,QAAIM,QAAM,CAAC,MAAD,EAAS,MAAT,EAAiB,YAAjB,EAA+B,UAA/B,CAAV;AACA,QAAIC,WAASP,SAASQ,GAAT,CAAaC,KAAGC,OAAOC,MAAP,CAAc,EAAd,EAAiBf,MAAjB,EAAwB;AACjDgB,cAAQ,WADyC;AAEjDC,YAAMd,KAAKK,GAFsC;AAGjDU,UAAIL,EAAEL,GAH2C;AAIjDW,gBAAUC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,EAAX,IAA0B,mBAA1B,GAA8C,mBAJP;AAKjDC,cAAQH,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAc,MAAzB,CALyC;AAMjDE,YAAMC,SAASC,QAAT,CAAkBN,KAAKO,KAAL,CAAWP,KAAKE,MAAL,KAAc,GAAzB,CAAlB,EAAgD,MAAhD,EAAwDM,MAAxD,EAN2C;AAOjDC,qBAAe;AACXC,eAAOpB,MAAMU,KAAKO,KAAL,CAAWP,KAAKE,MAAL,KAAc,CAAzB,CAAN,CADI;AAEXS,eAAOC,OAAOZ,KAAKO,KAAL,CAAWP,KAAKE,MAAL,KAAc,EAAzB,CAAP,IAAqCU,OAAOZ,KAAKO,KAAL,CAAWP,KAAKE,MAAL,KAAc,EAAzB,CAAP,CAArC,GAA0EU,OAAOZ,KAAKO,KAAL,CAAWP,KAAKE,MAAL,KAAc,EAAzB,CAAP,CAA1E,GAA+GU,OAAOZ,KAAKO,KAAL,CAAWP,KAAKE,MAAL,KAAc,EAAzB,CAAP;AAF3G;AAPkC,KAAxB,CAAhB,CAAb;AAaA,WAAOX,SAASC,GAAT,CAAaqB,KAAGC,SAASC,MAAT,CAAgBF,CAAhB,CAAhB,CAAP;AACH;AApBU,CAAf","sourcesContent":["import {Meteor} from \"meteor/meteor\";\nimport Schema from \"../../../server/schemas/payments/schema\";\n\nMeteor.methods({\n    \"payments-create-fake\": function(){\n        let user = Meteor.user();\n        let accounts = SocialAccounts.find({},{fields:{_id:1}}).fetch();\n        accounts=[...accounts,...accounts,...accounts];\n        let cards=[\"Visa\", \"Amex\", \"MasterCard\", \"Discover\"];\n        let payments=accounts.map(a=>Object.assign({},Schema,{\n            status: \"completed\",\n            from: user._id,\n            to: a._id,\n            campaign: Math.round(Math.random())?\"FGHsw43uezjudkN2p\":\"XEuAEdnJL57WobBKN\",\n            amount: Math.round(Math.random()*100000),\n            date: moment().subtract(Math.floor(Math.random()*600),'days').toDate(),\n            paymentMethod: {\n                brand: cards[Math.floor(Math.random()*4)],\n                last4: String(Math.floor(Math.random()*10))+String(Math.floor(Math.random()*10))+String(Math.floor(Math.random()*10))+String(Math.floor(Math.random()*10))\n            }\n        }));\n\n        return payments.map(p=>Payments.insert(p));\n    }\n});"]},"sourceType":"script","hash":"a394e6e1e1024683ba07a43b70b68cfd3db35bbc"}
