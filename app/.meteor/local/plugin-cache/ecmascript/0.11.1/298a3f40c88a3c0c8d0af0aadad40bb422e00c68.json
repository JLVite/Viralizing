{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/core/server/users/methods.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/core/server/users/methods.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/core/server/users/methods.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/core/server/users/methods.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/core/server/users/methods.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet md5;\nmodule.watch(require(\"md5\"), {\n  default(v) {\n    md5 = v;\n  }\n\n}, 2);\nlet Schema;\nmodule.watch(require(\"./schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 3);\nMeteor.methods({\n  users_create_account: function (email, password, plan, source) {\n    let defaultUser = Schema;\n\n    if (source && source.type) {\n      defaultUser.source = source;\n    }\n\n    let accountData = Accounts.createUser({\n      email: email,\n      password: password,\n      profile: defaultUser.profile\n    });\n    /*\n     if(typeof(accountData)===\"string\"){\n     console.log(\"Create Stripe ID\");\n     Meteor.call('payments_customer_create',accountData,plan);\n     }*/\n\n    return accountData;\n  },\n  users_update_profile: function (profile) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n    return {\n      stauts: \"success\"\n    };\n  },\n  users_change_password: function (userID, password) {\n    return false;\n    let change = Accounts.setPassword(userID, password);\n    return {\n      stauts: \"success\"\n    };\n  },\n  users_check_password: function (digest) {\n    check(digest, String);\n\n    if (this.userId) {\n      let user = Meteor.user();\n      let password = {\n        digest: digest,\n        algorithm: 'sha-256'\n      };\n\n      let result = Accounts._checkPassword(user, password);\n\n      return result.error == null;\n    } else {\n      return false;\n    }\n  },\n  \"users-get-flags\": function () {\n    let user = Meteor.user();\n    let userData = Meteor.users.findOne({\n      _id: user._id\n    }, {\n      fields: {\n        flags: 1\n      }\n    });\n    return userData.flags;\n  },\n  \"users-update-flag\": function (flag, value) {\n    check(flag, String);\n    check(value, Boolean);\n    let user = Meteor.user();\n\n    if (!user) {\n      throw new Meteor.Error(500, \"Use Doesn't Exist\");\n    }\n\n    let flags = Object.assign({}, user.flags);\n    flags[flag] = value;\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        flags\n      }\n    });\n  },\n  \"users-update-modal-profile\": function (data) {\n    let user = Meteor.user();\n\n    if (!user) {\n      throw new Meteor.Error(500, \"Use Doesn't Exist\");\n    }\n\n    let profile = Object.assign({}, user.profile, data);\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        profile\n      }\n    });\n  }\n});","map":{"version":3,"sources":["imports/modules/core/server/users/methods.jsx"],"names":["Meteor","module","watch","require","v","check","md5","default","Schema","methods","users_create_account","email","password","plan","source","defaultUser","type","accountData","Accounts","createUser","profile","users_update_profile","users","update","userId","$set","stauts","users_change_password","userID","change","setPassword","users_check_password","digest","String","user","algorithm","result","_checkPassword","error","userData","findOne","_id","fields","flags","flag","value","Boolean","Error","Object","assign","data"],"mappings":"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","sourcesContent":["import {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport md5 from \"md5\";\nimport Schema from \"./schema\";\n\nMeteor.methods({\n    users_create_account: function (email, password, plan, source) {\n        let defaultUser = Schema;\n\n        if (source && source.type) {\n            defaultUser.source = source;\n        }\n\n        let accountData = Accounts.createUser({\n            email: email,\n            password: password,\n            profile: defaultUser.profile\n        });\n\n        /*\n         if(typeof(accountData)===\"string\"){\n         console.log(\"Create Stripe ID\");\n         Meteor.call('payments_customer_create',accountData,plan);\n         }*/\n\n        return accountData\n    },\n    users_update_profile: function (profile) {\n        Meteor.users.update(Meteor.userId(), {$set: {profile: profile}});\n        return {\n            stauts: \"success\"\n        }\n    },\n    users_change_password: function (userID, password) {\n        return false;\n        let change = Accounts.setPassword(userID, password);\n\n        return {\n            stauts: \"success\"\n        }\n    },\n    users_check_password: function (digest) {\n        check(digest, String);\n\n        if (this.userId) {\n            let user = Meteor.user();\n            let password = {digest: digest, algorithm: 'sha-256'};\n            let result = Accounts._checkPassword(user, password);\n            return result.error == null;\n        } else {\n            return false;\n        }\n    },\n    \"users-get-flags\": function () {\n        let user = Meteor.user();\n        let userData = Meteor.users.findOne({_id: user._id}, {fields: {flags: 1}});\n        return userData.flags;\n    },\n    \"users-update-flag\": function (flag, value) {\n        check(flag, String);\n        check(value, Boolean);\n        let user = Meteor.user();\n        if (!user) {\n            throw new Meteor.Error(500, \"Use Doesn't Exist\");\n        }\n        let flags = Object.assign({}, user.flags);\n        flags[flag] = value;\n        Meteor.users.update({_id: user._id}, {$set: {flags}})\n    },\n    \"users-update-modal-profile\": function (data) {\n        let user = Meteor.user();\n        if (!user) {\n            throw new Meteor.Error(500, \"Use Doesn't Exist\");\n        }\n        let profile = Object.assign({}, user.profile, data);\n        Meteor.users.update({_id: user._id}, {$set: {profile}})\n    }\n});\n"]},"sourceType":"script","hash":"298a3f40c88a3c0c8d0af0aadad40bb422e00c68"}
