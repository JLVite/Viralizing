{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/team-attack/resolvers/team-attack.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/server/schemas/team-attack/resolvers/team-attack.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/team-attack/resolvers/team-attack.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/team-attack/resolvers/team-attack.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/server/schemas/team-attack/resolvers/team-attack.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    teamAttacksOwn(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        owner: userID\n      };\n      return TeamAttack.find(query).fetch();\n    },\n\n    teamAttack(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        _id: args._id\n      };\n      return TeamAttack.findOne(query);\n    },\n\n    accountsTeamAttack(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      console.log(\"ACCOUNTS_TEAM_ATTACK\", args);\n      let {\n        action_type,\n        results_order,\n        influencer_gender,\n        influencer_age,\n        influencer_country,\n        influencer_followers,\n        audience_gender,\n        audience_age,\n        audience_nrssg,\n        audience_country,\n        influencer_networks\n      } = args;\n\n      let getBounds = function (bounds, validator) {\n        let $gt = bounds.min;\n        let $lt = bounds.max;\n\n        if (validator) {\n          $gt = validator(bounds.min);\n          $lt = validator(bounds.max);\n        }\n\n        return {\n          $gt,\n          $lt\n        };\n      };\n\n      let query = {\n        suspended: {\n          $ne: true\n        },\n        delete: {\n          $ne: true\n        },\n        network: {\n          $in: influencer_networks\n        }\n      };\n      let options = {};\n\n      if (results_order && action_type) {\n        options.sort = {};\n\n        switch (results_order) {\n          case \"higherPrice\":\n            options.sort[`pricing.${action_type}`] = -1;\n            break;\n\n          case \"lowestPrice\":\n            options.sort[`pricing.${action_type}`] = 1;\n            break;\n\n          case \"higherEngagement\":\n            options.sort[\"statistics.engagement\"] = -1;\n            break;\n\n          case \"lowerEngagement\":\n            options.sort[\"statistics.engagement\"] = 1;\n            break;\n        }\n      }\n\n      if (action_type) {\n        if (action_type === \"post\" || action_type === \"share\") {\n          query[`pricing.${action_type}`] = {\n            $exists: true,\n            $ne: \"\"\n          };\n        }\n      }\n\n      if (influencer_gender && influencer_gender !== \"all\") {\n        query[\"information.gender\"] = influencer_gender;\n      }\n\n      if (influencer_age && influencer_age !== \"all\") {\n        influencer_age = {\n          min: influencer_age.max,\n          max: influencer_age.min\n        };\n        query[\"information.birthDate\"] = getBounds(influencer_age, function (value) {\n          return moment().subtract(Number(value), \"years\").toDate();\n        });\n      }\n\n      console.log(\"ACCOUNTS_TEAM_ATTACK_QUERY\", query, options);\n      return SocialAccounts.find(query, options).fetch(); //TODO: ADD FILTER ONLY INFLUENCER ACCOUNTS\n\n      console.log(\"INFLUENCER_FOLLOWERS\", influencer_followers); //ARGS: { gender: 'all', age: 'all', country: 'all', followers: 'all' }\n\n      if (influencer_country && influencer_country !== \"all\") {\n        query[\"information.country\"] = {\n          $in: influencer_country\n        };\n      }\n\n      if (influencer_followers && influencer_followers !== \"all\") {\n        query[\"statistics.followers\"] = getBounds(influencer_followers, Number);\n      }\n\n      if (audience_gender && audience_gender !== \"all\") {\n        query[\"information.audience.gender\"] = audience_gender;\n      }\n\n      if (audience_nrssg && audience_nrssg !== \"all\") {\n        query[\"information.audience.nrssg\"] = audience_nrssg;\n      }\n\n      if (audience_country && audience_country !== \"all\") {\n        query[\"information.audience.country\"] = {\n          $in: audience_country\n        };\n      }\n\n      if (audience_age && audience_age !== \"all\") {\n        let queryValues = [];\n        let brackets = [\"18-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65\"];\n        brackets.forEach(bracket => {\n          let split = bracket.split(\"-\");\n          let minValue = Number(split[0]);\n          let maxValue = Number(split[1]);\n\n          if (minValue >= audience_age.min && maxValue <= audience_age.max) {\n            queryValues.push(bracket);\n          }\n        });\n        query[\"information.audience.age\"] = {\n          $in: queryValues\n        };\n      }\n\n      console.log(\"ACCOUNTS_TEAMATTACK\", query);\n      return SocialAccounts.find(query).fetch();\n    }\n\n  },\n  TeamAttack: {\n    owner: account => {\n      let user = Meteor.users.findOne({\n        _id: account.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    members: team => {\n      if (!team.members || team.members.length === 0) {\n        return [];\n      }\n\n      let members = SocialAccounts.find({\n        _id: {\n          $in: team.members\n        }\n      }, {\n        fields: {\n          connection: 0\n        }\n      }).fetch();\n      return members;\n    }\n  }\n});","map":{"version":3,"sources":["imports/server/schemas/team-attack/resolvers/team-attack.jsx"],"names":["Meteor","module","watch","require","v","exportDefault","Query","teamAttacksOwn","root","args","context","userID","userId","query","owner","TeamAttack","find","fetch","teamAttack","_id","findOne","accountsTeamAttack","console","log","action_type","results_order","influencer_gender","influencer_age","influencer_country","influencer_followers","audience_gender","audience_age","audience_nrssg","audience_country","influencer_networks","getBounds","bounds","validator","$gt","min","$lt","max","suspended","$ne","delete","network","$in","options","sort","$exists","value","moment","subtract","Number","toDate","SocialAccounts","queryValues","brackets","forEach","bracket","split","minValue","maxValue","push","account","user","users","fields","services","members","team","length","connection"],"mappings":"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","sourcesContent":["import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        teamAttacksOwn(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                owner: userID\n            };\n\n            return TeamAttack.find(query).fetch();\n        },\n\n        teamAttack(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                _id: args._id\n            };\n\n            return TeamAttack.findOne(query);\n        },\n\n        accountsTeamAttack(root, args, context){\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            console.log(\"ACCOUNTS_TEAM_ATTACK\", args);\n            let {\n                action_type,\n                results_order,\n                influencer_gender,\n                influencer_age,\n                influencer_country,\n                influencer_followers,\n                audience_gender,\n                audience_age,\n                audience_nrssg,\n                audience_country,\n                influencer_networks\n            }=args;\n\n            let getBounds = function (bounds, validator) {\n                let $gt = bounds.min;\n                let $lt = bounds.max;\n\n                if (validator) {\n                    $gt = validator(bounds.min);\n                    $lt = validator(bounds.max);\n                }\n\n                return {$gt, $lt};\n            };\n\n            let query = {\n                suspended: {$ne: true},\n                delete: {$ne: true},\n                network: {$in: influencer_networks}\n            };\n\n            let options = {};\n\n            if(results_order && action_type){\n                options.sort={};\n                switch(results_order) {\n                    case \"higherPrice\":\n                        options.sort[`pricing.${action_type}`]=-1;\n                        break;\n                    case \"lowestPrice\":\n                        options.sort[`pricing.${action_type}`]=1;\n                        break;\n                    case \"higherEngagement\":\n                        options.sort[\"statistics.engagement\"]=-1;\n                        break;\n                    case \"lowerEngagement\":\n                        options.sort[\"statistics.engagement\"]=1;\n                        break;\n                }\n            }\n\n            if(action_type){\n                if(action_type===\"post\" || action_type===\"share\"){\n                    query[`pricing.${action_type}`]={$exists:true, $ne:\"\"};\n                }\n            }\n\n            if (influencer_gender && influencer_gender !== \"all\") {\n                query[\"information.gender\"] = influencer_gender;\n            }\n\n            if (influencer_age && influencer_age !== \"all\") {\n                influencer_age={min: influencer_age.max, max:influencer_age.min};\n                query[\"information.birthDate\"] = getBounds(influencer_age, function(value){\n                    return moment().subtract(Number(value),\"years\").toDate();\n                });\n            }\n\n            console.log(\"ACCOUNTS_TEAM_ATTACK_QUERY\", query, options);\n            return SocialAccounts.find(query, options).fetch();\n            //TODO: ADD FILTER ONLY INFLUENCER ACCOUNTS\n\n\n\n\n            console.log(\"INFLUENCER_FOLLOWERS\",influencer_followers);\n\n            //ARGS: { gender: 'all', age: 'all', country: 'all', followers: 'all' }\n\n\n            if (influencer_country && influencer_country !== \"all\") {\n                query[\"information.country\"] = {$in: influencer_country};\n            }\n\n\n\n\n            if (influencer_followers && influencer_followers !== \"all\") {\n                query[\"statistics.followers\"] = getBounds(influencer_followers, Number);\n            }\n\n            if (audience_gender && audience_gender !== \"all\") {\n                query[\"information.audience.gender\"] = audience_gender;\n            }\n\n            if (audience_nrssg && audience_nrssg !== \"all\") {\n                query[\"information.audience.nrssg\"] = audience_nrssg;\n            }\n\n            if (audience_country && audience_country !== \"all\") {\n                query[\"information.audience.country\"] = {$in: audience_country};\n            }\n\n            if (audience_age && audience_age !== \"all\") {\n                let queryValues=[];\n                let brackets=[\"18-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65\"];\n\n                brackets.forEach((bracket)=>{\n                    let split=bracket.split(\"-\");\n                    let minValue=Number(split[0]);\n                    let maxValue=Number(split[1]);\n                    if(minValue>=audience_age.min && maxValue<=audience_age.max){\n                        queryValues.push(bracket);\n                    }\n                });\n\n                query[\"information.audience.age\"] = {$in:queryValues};\n            }\n\n            console.log(\"ACCOUNTS_TEAMATTACK\", query);\n            return SocialAccounts.find(query).fetch();\n        },\n    },\n    TeamAttack: {\n        owner: (account) => {\n            let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n            return user\n        },\n        members: (team) => {\n            if(!team.members || team.members.length===0){\n                return [];\n            }\n            let members = SocialAccounts.find({\n                _id: {$in: team.members}\n            }, {fields: {connection: 0}}).fetch();\n            return members\n        }\n    }\n};\n"]},"sourceType":"script","hash":"ba903d313c84ec2ef8c2ad1b3928d0cfd46c3359"}
