{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/campaigns/ui/components/invites.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/campaigns/ui/components/invites.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/campaigns/ui/components/invites.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/campaigns/ui/components/invites.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/campaigns/ui/components/invites.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet reduxForm;\nmodule.watch(require(\"redux-form\"), {\n  reduxForm(v) {\n    reduxForm = v;\n  }\n\n}, 1);\nlet connect;\nmodule.watch(require(\"react-redux\"), {\n  connect(v) {\n    connect = v;\n  }\n\n}, 2);\nlet Translate, I18n;\nmodule.watch(require(\"react-redux-i18n\"), {\n  Translate(v) {\n    Translate = v;\n  },\n\n  I18n(v) {\n    I18n = v;\n  }\n\n}, 3);\nlet Saving;\nmodule.watch(require(\"../../../core/ui/components/saving\"), {\n  default(v) {\n    Saving = v;\n  }\n\n}, 4);\nlet CampaignInvitesHeader;\nmodule.watch(require(\"./invites/header\"), {\n  default(v) {\n    CampaignInvitesHeader = v;\n  }\n\n}, 5);\nlet CampaignListView;\nmodule.watch(require(\"./invites/list-view/container\"), {\n  default(v) {\n    CampaignListView = v;\n  }\n\n}, 6);\nlet CampaignTableView;\nmodule.watch(require(\"./invites/table-view/container\"), {\n  default(v) {\n    CampaignTableView = v;\n  }\n\n}, 7);\nlet notie;\nmodule.watch(require(\"notie\"), {\n  default(v) {\n    notie = v;\n  }\n\n}, 8);\nlet ListEmpty;\nmodule.watch(require(\"../../../core/ui/components/list-empty\"), {\n  default(v) {\n    ListEmpty = v;\n  }\n\n}, 9);\n\nlet getTranslation = key => {\n  return \"Campaigns.edit.tabs.invites.\" + key;\n};\n\nclass CampaignInvites extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      invites: [],\n      actionIndex: 0,\n      currentOption: null,\n      saving: \"saved\",\n      view: \"list\"\n    };\n    this.deleteInvite = this.deleteInvite.bind(this);\n    this.createInvite = this.createInvite.bind(this);\n    this.updateInvite = this.updateInvite.bind(this);\n    this.goToAction = this.goToAction.bind(this);\n    this.updateInviteValue = this.updateInviteValue.bind(this);\n    this.toggleNetwork = this.toggleNetwork.bind(this);\n    this.addInviteOption = this.addInviteOption.bind(this);\n    this.saveInvites = this.saveInvites.bind(this);\n    this.deleteInviteOption = this.deleteInviteOption.bind(this);\n    this.updateViewType = this.updateViewType.bind(this);\n  }\n\n  toggleNetwork(network) {\n    let component = this;\n    return function () {\n      let newState = (0, _objectSpread2.default)({}, component.state);\n      newState.invites = [...newState.invites];\n      let newInvite = (0, _objectSpread2.default)({}, newState.invites[newState.actionIndex]);\n      newInvite.networks = (0, _objectSpread2.default)({}, newInvite.networks);\n      newInvite.networks[network] = !newInvite.networks[network];\n      newState.invites.splice(newState.actionIndex, 1, newInvite);\n      component.setState(newState);\n    };\n  }\n\n  goToAction(action) {\n    let component = this;\n    return function (e) {\n      let val;\n\n      if (action === \"goTo\") {\n        val = Number(e.target.value);\n      }\n\n      if (action === \"previous\") {\n        if (component.state.actionIndex === 0) return;\n        val = component.state.actionIndex - 1;\n      }\n\n      if (action === \"next\") {\n        if (component.state.actionIndex === component.props.invites.length - 1) return;\n        val = component.state.actionIndex + 1;\n      }\n\n      component.setState({\n        actionIndex: val\n      });\n    };\n  }\n\n  updateInviteValue(key) {\n    let component = this;\n    return function (e) {\n      let val = e.target ? e.target.value : e;\n      let newState = (0, _objectSpread2.default)({}, component.state);\n      let newInvite = (0, _objectSpread2.default)({}, newState.invites[newState.actionIndex]);\n      newInvite[key] = val; //console.log(\"NEW_INVITE\",key,val);\n\n      newState.invites = [...newState.invites];\n      newState.invites.splice(newState.actionIndex, 1, newInvite); //console.log(\"updateInviteValue\", newState);\n\n      component.setState(newState);\n    };\n  }\n\n  addInviteOption(option) {\n    let newState = (0, _objectSpread2.default)({}, this.state);\n    let newInvite = (0, _objectSpread2.default)({}, newState.invites[newState.actionIndex]);\n    newInvite.options = [...newInvite.options];\n    newInvite.options.push(option);\n    newState.invites.splice(newState.actionIndex, 1, newInvite); //console.log(\"ADD_INVITE_OPTION\", newState);\n\n    this.setState(newState);\n  }\n\n  deleteInviteOption(option) {\n    delete option.index;\n    let newState = (0, _objectSpread2.default)({}, this.state);\n    let newInvite = (0, _objectSpread2.default)({}, newState.invites[newState.actionIndex]);\n    newInvite.options = [...newInvite.options];\n    option = newInvite.options.filter(o => o.date === option.date && o.media === option.media && o.message === option.message)[0];\n    let indexOfOption = newInvite.options.indexOf(option);\n    newInvite.options.splice(indexOfOption, 1);\n    console.log(\"DELETE_OPTION\", newInvite, option);\n    this.setState(newState);\n  }\n\n  createInvite() {\n    let component = this;\n    let {\n      campaign\n    } = this.props;\n    let data = {\n      campaign\n    };\n    Meteor.call(\"invite-create\", data, function (err, res) {\n      if (err) {\n        if (err.error === 500) {\n          err.error = I18n.t(getTranslation(\"messages.error\"));\n        } //console.log(\"ERROR\", err);\n\n\n        notie.alert(3, err.reason || err.error, 3);\n        return;\n      }\n\n      notie.alert(1, I18n.t(getTranslation(\"messages.saved\")), 3);\n      setTimeout(function () {\n        console.log(\"SERVER_CRETE_INVITE_RESPONSE\", res);\n        component.props.refetch({\n          date: new Date()\n        });\n      }, 100);\n    });\n  }\n\n  updateInvite(data) {\n    //console.log(\"CREATE!\");\n    let component = this;\n    Meteor.call(\"invite-update\", data, function (err, res) {\n      if (err) {\n        if (err.error === 500) {\n          err.error = I18n.t(getTranslation(\"messages.error\"));\n        } //console.log(\"ERROR\", err);\n\n\n        notie.alert(3, err.reason || err.error, 3);\n        return;\n      }\n\n      notie.alert(1, I18n.t(getTranslation(\"messages.updated\")), 3); //component.props.refetch();\n\n      component.closeModal(); //console.log(\"SERVER_UPDATE_INVITE_RESPONSE\", res);\n    });\n  }\n\n  deleteInvite(element) {\n    let component = this;\n    return function () {\n      swal({\n        title: 'Are you sure?',\n        text: \"You won't be able to revert this!\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, delete it!'\n      }).then(function () {\n        let newState = component.state;\n        newState.invites = [...newState.invites];\n        let indexOfMatch = null;\n        let match = newState.invites.filter((t, i) => {\n          if (t._id === element._id) {\n            indexOfMatch = i;\n          }\n\n          return t._id === element._id;\n        })[0];\n\n        if (match) {\n          newState.invites.splice(indexOfMatch, 1);\n          component.setState(newState);\n          component.save();\n        } else {\n          console.error(\"SOMETHING WENT WRONG\");\n        }\n      });\n    };\n  }\n\n  saveInvites(silent) {\n    let component = this;\n    let {\n      campaign\n    } = this.props;\n    let invites = this.state.invites;\n    this.saving = true;\n\n    if (silent && typeof silent === \"boolean\") {\n      silent = true;\n    } else {\n      silent = false;\n    }\n\n    if (silent && this.savedData === JSON.stringify(invites)) {\n      this.setState({\n        saving: \"saved\"\n      });\n      return;\n    }\n\n    this.setState({\n      saving: \"saving\"\n    });\n    this.savedData = JSON.stringify(invites);\n    Meteor.call(\"invite-save-multiple\", invites, campaign._id, function (err, res) {\n      if (err) {\n        if (err.error === 500) {\n          err.error = I18n.t(getTranslation(\"messages.error\"));\n        } //console.log(\"ERROR\", err);\n\n\n        notie.alert(3, err.reason || err.error, 3);\n        return;\n      }\n\n      component.setState({\n        saving: \"saved\"\n      });\n\n      if (!silent) {\n        notie.alert(1, I18n.t(getTranslation(\"messages.saved\")), 3);\n      }\n      /*\n      component.props.refetch({\n          \"campaignID\": component.props.campaign._id\n      });\n      * */\n      //console.log(\"SERVER_SAVE_INVITE_RESPONSE\", res);\n\n    });\n  }\n\n  componentWillMount() {\n    let {\n      invites\n    } = this.props; //console.log(\"WILL_MOINT\", invites);\n\n    this.setState({\n      invites: [...invites]\n    });\n  }\n\n  componentWillReceiveProps() {\n    let {\n      invites\n    } = this.props; // this.setState({invites:[...invites]})\n  }\n\n  componentDidUpdate() {\n    let {\n      invites\n    } = this.props;\n\n    if (this.state.invites.length === 0 || invites.length > this.state.invites.length || this.saving) {\n      //this.setState({invites:[...invites]});\n      this.saving = false;\n    }\n  }\n\n  componentDidMount() {\n    this.savedData = JSON.stringify(this.props.invites);\n    let component = this;\n    this.saveInterval = setInterval(function () {\n      if (component.state.invites && component.state.invites.length > 0) {\n        component.saveInvites(true);\n      }\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.saveInterval);\n  }\n\n  updateViewType(view) {\n    let component = this;\n    return function () {\n      component.setState({\n        view\n      });\n    };\n  }\n\n  render() {\n    let {\n      campaign,\n      accounts,\n      teamAttacks\n    } = this.props;\n    let {\n      invites,\n      view,\n      actionIndex\n    } = this.state;\n    let {\n      updateViewType,\n      toggleNetwork,\n      updateInviteValue,\n      addInviteOption,\n      goToAction,\n      createInvite,\n      saveInvites,\n      deleteInviteOption\n    } = this;\n    let currentInvite = this.state.invites[actionIndex];\n\n    if (invites.length === 0) {\n      return React.createElement(ListEmpty, {\n        message: React.createElement(Translate, {\n          value: getTranslation(\"empty.message\")\n        }),\n        button: React.createElement(Translate, {\n          value: getTranslation(\"empty.button\")\n        }),\n        callback: createInvite\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"content-padding-30 invite-actions\"\n    }, React.createElement(CampaignInvitesHeader, {\n      campaign: campaign,\n      updateViewType: updateViewType\n    }), React.createElement(\"div\", {\n      className: \"spacer-20\"\n    }), view === \"list\" ? React.createElement(CampaignListView, {\n      invites: invites,\n      accounts: accounts,\n      teamAttacks: teamAttacks,\n      currentInvite: currentInvite,\n      actionIndex: actionIndex,\n      toggleNetwork: toggleNetwork,\n      updateInviteValue: updateInviteValue,\n      addInviteOption: addInviteOption,\n      deleteInviteOption: deleteInviteOption,\n      goToAction: goToAction,\n      createInvite: createInvite,\n      saveInvites: saveInvites\n    }) : React.createElement(CampaignTableView, {\n      invites: invites,\n      hasTotal: true,\n      campaign: campaign\n    }), React.createElement(Saving, {\n      state: this.state.saving\n    }));\n  }\n\n}\n\nCampaignInvites = reduxForm({\n  form: 'invite-action'\n})(CampaignInvites);\nmodule.exportDefault(connect(state => {\n  return {\n    campaign: state.form[\"campaign-edit\"].values\n  };\n})(CampaignInvites));","map":{"version":3,"sources":["imports/modules/campaigns/ui/components/invites.jsx"],"names":["React","module","watch","require","default","v","reduxForm","connect","Translate","I18n","Saving","CampaignInvitesHeader","CampaignListView","CampaignTableView","notie","ListEmpty","getTranslation","key","CampaignInvites","Component","constructor","state","invites","actionIndex","currentOption","saving","view","deleteInvite","bind","createInvite","updateInvite","goToAction","updateInviteValue","toggleNetwork","addInviteOption","saveInvites","deleteInviteOption","updateViewType","network","component","newState","newInvite","networks","splice","setState","action","e","val","Number","target","value","props","length","option","options","push","index","filter","o","date","media","message","indexOfOption","indexOf","console","log","campaign","data","Meteor","call","err","res","error","t","alert","reason","setTimeout","refetch","Date","closeModal","element","swal","title","text","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","indexOfMatch","match","i","_id","save","silent","savedData","JSON","stringify","componentWillMount","componentWillReceiveProps","componentDidUpdate","componentDidMount","saveInterval","setInterval","componentWillUnmount","clearInterval","render","accounts","teamAttacks","currentInvite","form","exportDefault","values"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {reduxForm} from \"redux-form\";\nimport {connect} from \"react-redux\";\nimport {Translate, I18n} from \"react-redux-i18n\";\nimport Saving from \"../../../core/ui/components/saving\";\nimport CampaignInvitesHeader from \"./invites/header\";\nimport CampaignListView from \"./invites/list-view/container\";\nimport CampaignTableView from \"./invites/table-view/container\";\nimport notie from \"notie\";\nimport ListEmpty from \"../../../core/ui/components/list-empty\";\n\nlet getTranslation = (key) => {\n    return \"Campaigns.edit.tabs.invites.\" + key;\n};\n\nclass CampaignInvites extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            invites:[],\n            actionIndex: 0,\n            currentOption: null,\n            saving: \"saved\",\n            view: \"list\"\n        };\n\n        this.deleteInvite = this.deleteInvite.bind(this);\n        this.createInvite = this.createInvite.bind(this);\n        this.updateInvite = this.updateInvite.bind(this);\n        this.goToAction=this.goToAction.bind(this);\n        this.updateInviteValue=this.updateInviteValue.bind(this);\n        this.toggleNetwork=this.toggleNetwork.bind(this);\n        this.addInviteOption=this.addInviteOption.bind(this);\n        this.saveInvites=this.saveInvites.bind(this);\n        this.deleteInviteOption=this.deleteInviteOption.bind(this);\n        this.updateViewType=this.updateViewType.bind(this);\n    }\n\n    toggleNetwork(network){\n        let component=this;\n        return function(){\n            let newState={...component.state};\n            newState.invites=[...newState.invites];\n            let newInvite={...newState.invites[newState.actionIndex]};\n            newInvite.networks={...newInvite.networks};\n            newInvite.networks[network]=!newInvite.networks[network];\n            newState.invites.splice(newState.actionIndex,1,newInvite);\n            component.setState(newState);\n        }\n    }\n\n    goToAction(action){\n        let component=this;\n        return function(e){\n            let val;\n            if(action===\"goTo\"){\n                val=Number(e.target.value);\n            }\n            if(action===\"previous\"){\n                if(component.state.actionIndex===0) return;\n                val=component.state.actionIndex-1;\n            }\n            if(action===\"next\"){\n                if(component.state.actionIndex===(component.props.invites.length-1)) return;\n                val=component.state.actionIndex+1;\n            }\n            component.setState({actionIndex:val});\n        }\n    }\n\n    updateInviteValue(key){\n        let component=this;\n        return function(e){\n            let val=e.target?e.target.value:e;\n            let newState={...component.state};\n            let newInvite={...newState.invites[newState.actionIndex]};\n            newInvite[key]=val;\n            //console.log(\"NEW_INVITE\",key,val);\n            newState.invites=[...newState.invites];\n            newState.invites.splice(newState.actionIndex,1,newInvite);\n            //console.log(\"updateInviteValue\", newState);\n            component.setState(newState);\n        }\n    }\n\n    addInviteOption(option){\n        let newState={...this.state};\n        let newInvite={...newState.invites[newState.actionIndex]};\n        newInvite.options=[...newInvite.options];\n        newInvite.options.push(option);\n        newState.invites.splice(newState.actionIndex,1,newInvite);\n        //console.log(\"ADD_INVITE_OPTION\", newState);\n        this.setState(newState);\n    }\n\n    deleteInviteOption(option){\n\n        delete option.index;\n        let newState={...this.state};\n        let newInvite={...newState.invites[newState.actionIndex]};\n        newInvite.options=[...newInvite.options];\n        option=newInvite.options.filter(o=>o.date===option.date && o.media===option.media && o.message===option.message)[0];\n        let indexOfOption=newInvite.options.indexOf(option);\n        newInvite.options.splice(indexOfOption,1);\n        console.log(\"DELETE_OPTION\", newInvite, option);\n        this.setState(newState);\n\n    }\n\n    createInvite() {\n        let component = this;\n        let {campaign} = this.props;\n        let data={campaign};\n        Meteor.call(\"invite-create\", data, function (err, res) {\n            if (err) {\n                if (err.error === 500) {\n                    err.error = I18n.t(getTranslation(\"messages.error\"));\n                }\n                //console.log(\"ERROR\", err);\n                notie.alert(3, err.reason || err.error, 3);\n                return\n            }\n            notie.alert(1, I18n.t(getTranslation(\"messages.saved\")), 3);\n            setTimeout(function(){\n                console.log(\"SERVER_CRETE_INVITE_RESPONSE\", res);\n                component.props.refetch({date:new Date()});\n            },100);\n\n        });\n    }\n\n    updateInvite(data) {\n        //console.log(\"CREATE!\");\n        let component = this;\n        Meteor.call(\"invite-update\", data, function (err, res) {\n            if (err) {\n                if (err.error === 500) {\n                    err.error = I18n.t(getTranslation(\"messages.error\"));\n                }\n                //console.log(\"ERROR\", err);\n                notie.alert(3, err.reason || err.error, 3);\n                return\n            }\n            notie.alert(1, I18n.t(getTranslation(\"messages.updated\")), 3);\n            //component.props.refetch();\n            component.closeModal();\n            //console.log(\"SERVER_UPDATE_INVITE_RESPONSE\", res);\n        });\n    }\n\n    deleteInvite(element) {\n        let component = this;\n        return function () {\n            swal({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                type: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, delete it!'\n            }).then(function () {\n                let newState = component.state;\n                newState.invites=[...newState.invites];\n                let indexOfMatch = null;\n                let match = newState.invites.filter((t, i) => {\n                    if (t._id === element._id) {\n                        indexOfMatch = i;\n                    }\n                    return t._id === element._id;\n                })[0];\n                if (match) {\n                    newState.invites.splice(indexOfMatch, 1);\n                    component.setState(newState);\n                    component.save()\n                } else {\n                    console.error(\"SOMETHING WENT WRONG\");\n                }\n            })\n        }\n    }\n\n    saveInvites(silent){\n        let component = this;\n        let {campaign} = this.props;\n        let invites=this.state.invites;\n        this.saving=true;\n        if (silent && typeof(silent) === \"boolean\") {\n            silent = true;\n        } else {\n            silent = false;\n        }\n\n        if (silent && this.savedData === JSON.stringify(invites)) {\n            this.setState({saving: \"saved\"});\n            return\n        }\n        this.setState({saving: \"saving\"});\n        this.savedData = JSON.stringify(invites);\n        Meteor.call(\"invite-save-multiple\", invites, campaign._id, function (err, res) {\n            if (err) {\n                if (err.error === 500) {\n                    err.error = I18n.t(getTranslation(\"messages.error\"));\n                }\n                //console.log(\"ERROR\", err);\n                notie.alert(3, err.reason || err.error, 3);\n                return\n            }\n            component.setState({saving: \"saved\"});\n            if(!silent){\n                notie.alert(1, I18n.t(getTranslation(\"messages.saved\")), 3);\n            }\n\n            /*\n            component.props.refetch({\n                \"campaignID\": component.props.campaign._id\n            });\n            * */\n\n            //console.log(\"SERVER_SAVE_INVITE_RESPONSE\", res);\n        });\n    }\n\n    componentWillMount(){\n        let {invites}=this.props;\n        //console.log(\"WILL_MOINT\", invites);\n        this.setState({invites:[...invites]})\n    }\n\n    componentWillReceiveProps(){\n        let {invites}=this.props;\n       // this.setState({invites:[...invites]})\n    }\n\n    componentDidUpdate(){\n        let {invites}=this.props;\n        if(this.state.invites.length===0 || invites.length>this.state.invites.length || this.saving){\n            //this.setState({invites:[...invites]});\n            this.saving=false;\n        }\n    }\n\n    componentDidMount() {\n        this.savedData = JSON.stringify(this.props.invites);\n        let component = this;\n        this.saveInterval=setInterval(function () {\n            if (component.state.invites && component.state.invites.length>0) {\n                component.saveInvites(true);\n            }\n        }, 5000);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.saveInterval);\n    }\n\n    updateViewType(view){\n        let component=this;\n        return function(){\n            component.setState({view})\n        }\n    }\n\n    render() {\n        let {campaign, accounts, teamAttacks}= this.props;\n        let {invites, view, actionIndex}=this.state;\n        let {updateViewType,toggleNetwork, updateInviteValue, addInviteOption, goToAction, createInvite,saveInvites, deleteInviteOption}=this;\n        let currentInvite=this.state.invites[actionIndex];\n        if(invites.length===0){\n            return (\n                <ListEmpty message={<Translate value={getTranslation(\"empty.message\")}/>}\n                           button={<Translate value={getTranslation(\"empty.button\")}/>}\n                           callback={createInvite}/>\n            )\n        }\n        return (\n            <div className=\"content-padding-30 invite-actions\">\n                <CampaignInvitesHeader campaign={campaign} updateViewType={updateViewType}/>\n                <div className=\"spacer-20\"/>\n                {view===\"list\"?<CampaignListView invites={invites}\n                                                 accounts={accounts}\n                                                 teamAttacks={teamAttacks}\n                                                 currentInvite={currentInvite}\n                                                 actionIndex={actionIndex}\n                                                 toggleNetwork={toggleNetwork}\n                                                 updateInviteValue={updateInviteValue}\n                                                 addInviteOption={addInviteOption}\n                                                 deleteInviteOption={deleteInviteOption}\n                                                 goToAction={goToAction}\n                                                 createInvite={createInvite}\n                                                 saveInvites={saveInvites}/>:<CampaignTableView invites={invites}\n                                                                                                hasTotal={true}\n                                                                                                campaign={campaign}/>}\n                <Saving state={this.state.saving}/>\n            </div>\n        );\n    }\n}\n\nCampaignInvites = reduxForm({\n    form: 'invite-action'\n})(CampaignInvites);\n\nexport default connect(state => {\n    return {\n        campaign: state.form[\"campaign-edit\"].values\n    }\n})(CampaignInvites)\n\n"]},"sourceType":"script","hash":"27d2a1ccd2c5955d085daca35745d452b30e076c"}
