{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/charges.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/stripe/server/core/charges.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/charges.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/core/charges.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/stripe/server/core/charges.jsx"}},"code":"let StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_charges_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      amount: Number,\n      currency: String,\n      application_fee: Match.Maybe(Number),\n      capture: Match.Maybe(Boolean),\n      description: Match.Maybe(String),\n      destination: Match.Maybe(Match.ObjectIncluding({\n        account: Match.Maybe(Object),\n        amount: Match.Maybe(Number)\n      })),\n      transfer_group: Match.Maybe(String),\n      on_behalf_of: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      receipt_email: Match.Maybe(String),\n      shipping: Match.Maybe(Object),\n      customer: Match.Maybe(String),\n      source: Match.Maybe(String)\n    });\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (user && user.emails[0]) {\n      data.receipt_email = user.emails[0].address;\n    }\n\n    if (!data.source) {\n      if (!user.stripe.id) {\n        throw new Meteor.Error(500, \"[Stripe Charges] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n      }\n\n      data.customer = user.stripe.id;\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.create, client.charges);\n    return method(data);\n  },\n  \"stripe_charges_update\": function (chargeID, data) {\n    if (!chargeID) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe User Data Provided\");\n    }\n\n    check(chargeID, String);\n    check(data, {\n      description: Match.Maybe(String),\n      fraud_details: Match.Maybe(Object),\n      metadata: Match.Maybe(Object),\n      receipt_email: Match.Maybe(String),\n      destination: Match.Maybe(Match.ObjectIncluding({\n        address: Match.Maybe(Match.ObjectIncluding({\n          line1: String,\n          city: Match.Maybe(String),\n          country: Match.Maybe(String),\n          lin2: Match.Maybe(String),\n          postal_code: Match.Maybe(String),\n          state: Match.Maybe(String)\n        })),\n        name: String,\n        carrier: Match.Maybe(String),\n        phone: Match.Maybe(String),\n        tracking_number: Match.Maybe(String)\n      })),\n      transfer_group: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.update, client.charges);\n    return method(chargeID, data);\n  },\n  \"stripe_charges_get\": function (chargeID) {\n    if (!chargeID) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n    }\n\n    check(chargeID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.retrieve, client.charges);\n    return method(chargeID);\n  },\n  \"stripe_charges_capture\": function (chargeID, data) {\n    if (!chargeID) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n    }\n\n    check(chargeID, String);\n    check(data, {\n      amount: Match.Maybe(Number),\n      application_fee: Match.Maybe(Number),\n      receipt_email: Match.Maybe(String),\n      statement_descriptor: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.capture, client.charges);\n    return method(chargeID, data);\n  },\n  \"stripe_charges_list\": function (query) {\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Query Provided\");\n    }\n\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      customer: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      source: Match.Maybe(Match.ObjectIncluding({\n        object: Match.Maybe(String)\n      })),\n      starting_after: Match.Maybe(String),\n      transfer_group: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.list, client.charges);\n    return method(query);\n  }\n});","map":{"version":3,"sources":["imports/modules/stripe/server/core/charges.jsx"],"names":["StripeConnection","module","watch","require","default","v","Meteor","check","Match","methods","user","data","Error","Object","amount","Number","currency","String","application_fee","Maybe","capture","Boolean","description","destination","ObjectIncluding","account","transfer_group","on_behalf_of","metadata","receipt_email","shipping","customer","source","emails","stripe","users","findOne","_id","address","id","client","method","wrapAsync","charges","create","chargeID","fraud_details","line1","city","country","lin2","postal_code","state","name","carrier","phone","tracking_number","update","retrieve","statement_descriptor","query","created","gt","gte","lt","lte","ending_before","limit","object","starting_after","list"],"mappings":"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","sourcesContent":["import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_charges_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n        }\n        check(user, Object);\n        check(data, {\n            amount: Number,\n            currency: String,\n            application_fee: Match.Maybe(Number),\n            capture: Match.Maybe(Boolean),\n            description: Match.Maybe(String),\n            destination: Match.Maybe(Match.ObjectIncluding({\n                account: Match.Maybe(Object),\n                amount: Match.Maybe(Number)\n            })),\n            transfer_group: Match.Maybe(String),\n            on_behalf_of: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            receipt_email: Match.Maybe(String),\n            shipping: Match.Maybe(Object),\n            customer: Match.Maybe(String),\n            source: Match.Maybe(String)\n        });\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (user && user.emails[0]) {\n            data.receipt_email = user.emails[0].address;\n        }\n\n        if (!data.source) {\n            if (!user.stripe.id) {\n                throw new Meteor.Error(500, \"[Stripe Charges] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n            }\n            data.customer = user.stripe.id;\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.create, client.charges);\n\n        return method(data);\n    },\n    \"stripe_charges_update\": function (chargeID, data) {\n        if (!chargeID) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe User Data Provided\");\n        }\n\n        check(chargeID, String);\n        check(data, {\n            description: Match.Maybe(String),\n            fraud_details: Match.Maybe(Object),\n            metadata: Match.Maybe(Object),\n            receipt_email: Match.Maybe(String),\n            destination: Match.Maybe(Match.ObjectIncluding({\n                address: Match.Maybe(Match.ObjectIncluding({\n                    line1: String,\n                    city: Match.Maybe(String),\n                    country: Match.Maybe(String),\n                    lin2: Match.Maybe(String),\n                    postal_code: Match.Maybe(String),\n                    state: Match.Maybe(String)\n                })),\n                name: String,\n                carrier: Match.Maybe(String),\n                phone: Match.Maybe(String),\n                tracking_number: Match.Maybe(String)\n            })),\n            transfer_group: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.update, client.charges);\n\n        return method(chargeID, data);\n    },\n    \"stripe_charges_get\": function (chargeID) {\n        if (!chargeID) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n        }\n\n        check(chargeID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.retrieve, client.charges);\n\n        return method(chargeID);\n    },\n    \"stripe_charges_capture\": function (chargeID, data) {\n        if (!chargeID) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n        }\n\n        check(chargeID, String);\n        check(data,{\n            amount: Match.Maybe(Number),\n            application_fee: Match.Maybe(Number),\n            receipt_email: Match.Maybe(String),\n            statement_descriptor: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.capture, client.charges);\n\n        return method(chargeID,data);\n    },\n    \"stripe_charges_list\": function (query) {\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Query Provided\");\n        }\n\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            customer: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            source: Match.Maybe(Match.ObjectIncluding({\n                object: Match.Maybe(String)\n            })),\n            starting_after: Match.Maybe(String),\n            transfer_group: Match.Maybe(String)\n        });\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.list, client.charges);\n        return method(query);\n    }\n});"]},"sourceType":"script","hash":"e44c7500b4db509703671bc47872fee356277255"}
