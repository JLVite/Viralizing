{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/twitter/server/account-stats.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/twitter/server/account-stats.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/twitter/server/account-stats.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/twitter/server/account-stats.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/twitter/server/account-stats.jsx"}},"code":"let TwitterConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"twitter-account-stats\": function (screenName, profile) {\n    if (!profile) {\n      profile = SocialAccounts.findOne({\n        \"network\": \"twitter\"\n      });\n    }\n\n    if (!profile) {\n      throw new Meteor.Error(\"There's no matching profile\");\n      return;\n    }\n\n    let connection = profile.connection,\n        client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (profile) {\n      let posts = [];\n\n      let syncClient = Meteor.wrapAsync(client.get, client),\n          getTweets = function (max_id) {\n        let query = {\n          screen_name: screenName,\n          count: 200,\n          include_rts: 0,\n          exclude_replies: 1\n        };\n\n        if (max_id) {\n          query.max_id = max_id;\n        }\n\n        let result = syncClient(\"statuses/user_timeline\", query),\n            lastTweet = result[result.length - 1];\n        posts = [...posts, ...result];\n\n        if (lastTweet) {\n          if (max_id) {\n            if (max_id !== lastTweet.id) {\n              getTweets(lastTweet.id);\n            }\n          } else {\n            getTweets(lastTweet.id);\n          }\n        }\n      };\n\n      getTweets();\n      const first = posts[0];\n      const last = posts[posts.length - 1];\n      let retweets = 0;\n      let favorites = 0;\n\n      for (const x of posts) {\n        retweets += x.retweet_count;\n        favorites += x.favorite_count;\n      }\n\n      let user = posts[0].user;\n      let result = {\n        retweets,\n        retweetsPerPost: retweets / posts.length,\n        favorites,\n        favoritesPerPost: favorites / posts.length,\n        engagement: (retweets + favorites) / posts.length / user.followers_count,\n        followers: user.followers_count,\n        following: user.friends_count,\n        posts: user.statuses_count,\n        postsPerDay: posts.length / Math.abs(moment(new Date(first.created_at)).diff(moment(new Date(last.created_at)), \"days\"))\n      };\n      Object.keys(result).forEach(key => {\n        if (Number.isNaN(result[key])) {\n          result[key] = 0;\n        }\n      });\n\n      if (result.postsPerDay === Infinity) {\n        result.postsPerDay = 0;\n      }\n\n      return result;\n    }\n  }\n});","map":{"version":3,"sources":["imports/modules/twitter/server/account-stats.jsx"],"names":["TwitterConnection","module","watch","require","default","v","Meteor","methods","screenName","profile","SocialAccounts","findOne","Error","connection","client","accessToken","accessTokenSecret","posts","syncClient","wrapAsync","get","getTweets","max_id","query","screen_name","count","include_rts","exclude_replies","result","lastTweet","length","id","first","last","retweets","favorites","x","retweet_count","favorite_count","user","retweetsPerPost","favoritesPerPost","engagement","followers_count","followers","following","friends_count","statuses_count","postsPerDay","Math","abs","moment","Date","created_at","diff","Object","keys","forEach","key","Number","isNaN","Infinity"],"mappings":"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","sourcesContent":["import TwitterConnection from \"./connection\";\n\nMeteor.methods({\n    \"twitter-account-stats\": function (screenName, profile) {\n        if(!profile){\n            profile = SocialAccounts.findOne({\"network\": \"twitter\"});\n        }\n\n        if (!profile) {\n            throw new Meteor.Error(\"There's no matching profile\");\n            return;\n        }\n\n        let connection = profile.connection,\n            client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        if (profile) {\n            let posts = [];\n\n            let syncClient = Meteor.wrapAsync(client.get, client),\n                getTweets = function (max_id) {\n                    let query = {\n                        screen_name: screenName,\n                        count: 200,\n                        include_rts: 0,\n                        exclude_replies: 1\n                    };\n                    if (max_id) {\n                        query.max_id = max_id;\n                    }\n\n                    let result = syncClient(\"statuses/user_timeline\", query),\n                        lastTweet = result[(result.length - 1)];\n                    posts = [...posts, ...result];\n\n                    if (lastTweet) {\n                        if (max_id) {\n                            if (max_id !== lastTweet.id) {\n                                getTweets(lastTweet.id);\n                            }\n                        } else {\n                            getTweets(lastTweet.id);\n                        }\n                    }\n                };\n\n            getTweets();\n\n            const first = posts[0];\n            const last = posts[posts.length - 1];\n\n            let retweets = 0;\n            let favorites = 0;\n\n            for (const x of posts) {\n                retweets += x.retweet_count;\n                favorites += x.favorite_count;\n            }\n\n            let user = posts[0].user;\n\n            let result = {\n                retweets,\n                retweetsPerPost: retweets / posts.length,\n                favorites,\n                favoritesPerPost: favorites / posts.length,\n                engagement: ((retweets + favorites) / posts.length) / user.followers_count,\n                followers: user.followers_count,\n                following: user.friends_count,\n                posts: user.statuses_count,\n                postsPerDay: (posts.length / (Math.abs((moment(new Date(first.created_at)).diff(moment(new Date(last.created_at)), \"days\")))))\n            };\n\n            Object.keys(result).forEach((key) => {\n                if (Number.isNaN(result[key])) {\n                    result[key] = 0;\n                }\n            });\n\n            if(result.postsPerDay===Infinity){\n                result.postsPerDay=0;\n            }\n\n            return result\n        }\n    }\n});\n"]},"sourceType":"script","hash":"2832199a94295b4b72424141d5171d75ced8c2df"}
