{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/subscriptions/invoices.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/stripe/server/subscriptions/invoices.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/subscriptions/invoices.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/subscriptions/invoices.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/stripe/server/subscriptions/invoices.jsx"}},"code":"let StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_invoices_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice Data Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    data.customer = user.stripe.id;\n    check(data, {\n      customer: String,\n      application_fee: Match.Maybe(String),\n      description: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      statement_descriptor: Match.Maybe(String),\n      subscription: Match.Maybe(String),\n      tax_percent: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.create, client.invoices);\n    return method(data);\n  },\n  \"stripe_invoices_update\": function (invoiceID, data) {\n    if (!invoiceID) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice Data Provided\");\n    }\n\n    check(invoiceID, String);\n    check(data, {\n      application_fee: Match.Maybe(String),\n      closed: Match.Maybe(Boolean),\n      description: Match.Maybe(String),\n      forgiven: Match.Maybe(Boolean),\n      metadata: Match.Maybe(Object),\n      statement_descriptor: Match.Maybe(String),\n      subscription: Match.Maybe(String),\n      tax_percent: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.update, client.invoices);\n    return method(invoiceID, data);\n  },\n  \"stripe_invoices_get\": function (invoiceID) {\n    if (!invoiceID) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n    }\n\n    check(invoiceID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.retrieve, client.invoices);\n    return method(invoiceID);\n  },\n  \"stripe_invoices_get_items\": function (invoiceID, query) {\n    if (!invoiceID) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n    }\n\n    check(invoiceID, String);\n    check(query, {\n      coupon: Match.Maybe(String),\n      customer: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String),\n      subscription: Match.Maybe(String),\n      subscription_items: Match.Maybe(Match.ObjectIncluding({\n        id: Match.Maybe(String),\n        deleted: Match.Maybe(String),\n        plan: Match.Maybe(String),\n        quantity: Match.Maybe(String)\n      })),\n      subscription_plan: Match.Maybe(String),\n      subscription_prorate: Match.Maybe(String),\n      subscription_proration_date: Match.Maybe(String),\n      subscription_quantity: Match.Maybe(String),\n      subscription_tax_percent: Match.Maybe(String),\n      subscription_trial_end: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.retrieveLines, client.invoices);\n    return method(invoiceID);\n  },\n  \"stripe_invoices_get_upcoming\": function (user, query) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Application User Provided\");\n    }\n\n    check(user, Object);\n    check(query, {\n      coupon: Match.Maybe(String),\n      subscription: Match.Maybe(String),\n      subscription_items: Match.Maybe(Match.ObjectIncluding({\n        id: Match.Maybe(String),\n        deleted: Match.Maybe(String),\n        plan: Match.Maybe(String),\n        quantity: Match.Maybe(String)\n      })),\n      subscription_plan: Match.Maybe(String),\n      subscription_prorate: Match.Maybe(String),\n      subscription_proration_date: Match.Maybe(String),\n      subscription_quantity: Match.Maybe(String),\n      subscription_tax_percent: Match.Maybe(String),\n      subscription_trial_end: Match.Maybe(String)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.retrieveUpcoming, client.invoices);\n    return method(user.stripe.id, query);\n  },\n  \"stripe_invoices_pay\": function (invoiceID) {\n    if (!invoiceID) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n    }\n\n    check(invoiceID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.pay, client.invoices);\n    return method(invoiceID);\n  },\n  \"stripe_invoices_list\": function (query) {\n    check(query, {\n      customer: Match.Maybe(String),\n      date: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.list, client.invoices);\n    return method(query);\n  }\n});","map":{"version":3,"sources":["imports/modules/stripe/server/subscriptions/invoices.jsx"],"names":["StripeConnection","module","watch","require","default","v","Meteor","check","Match","methods","user","data","Error","Object","stripe","users","findOne","_id","id","customer","String","application_fee","Maybe","description","metadata","statement_descriptor","subscription","tax_percent","Number","client","method","wrapAsync","invoices","create","invoiceID","closed","Boolean","forgiven","update","retrieve","query","coupon","ending_before","limit","starting_after","subscription_items","ObjectIncluding","deleted","plan","quantity","subscription_plan","subscription_prorate","subscription_proration_date","subscription_quantity","subscription_tax_percent","subscription_trial_end","retrieveLines","retrieveUpcoming","pay","date","gt","gte","lt","lte","list"],"mappings":"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","sourcesContent":["import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_invoices_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice Data Provided\");\n        }\n        check(user, Object);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        data.customer = user.stripe.id;\n\n        check(data, {\n            customer: String,\n            application_fee: Match.Maybe(String),\n            description: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            statement_descriptor: Match.Maybe(String),\n            subscription: Match.Maybe(String),\n            tax_percent: Match.Maybe(Number)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.create, client.invoices);\n\n        return method(data);\n    },\n    \"stripe_invoices_update\": function (invoiceID, data) {\n        if (!invoiceID) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice Data Provided\");\n        }\n\n        check(invoiceID, String);\n        check(data, {\n            application_fee: Match.Maybe(String),\n            closed: Match.Maybe(Boolean),\n            description: Match.Maybe(String),\n            forgiven: Match.Maybe(Boolean),\n            metadata: Match.Maybe(Object),\n            statement_descriptor: Match.Maybe(String),\n            subscription: Match.Maybe(String),\n            tax_percent: Match.Maybe(Number),\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.update, client.invoices);\n\n        return method(invoiceID, data);\n    },\n    \"stripe_invoices_get\": function (invoiceID) {\n        if (!invoiceID) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n        }\n\n        check(invoiceID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.retrieve, client.invoices);\n\n        return method(invoiceID);\n    },\n    \"stripe_invoices_get_items\": function (invoiceID, query) {\n        if (!invoiceID) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n        }\n\n        check(invoiceID, String);\n        check(query, {\n            coupon: Match.Maybe(String),\n            customer: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String),\n            subscription: Match.Maybe(String),\n            subscription_items: Match.Maybe(Match.ObjectIncluding({\n                id: Match.Maybe(String),\n                deleted: Match.Maybe(String),\n                plan: Match.Maybe(String),\n                quantity: Match.Maybe(String)\n            })),\n            subscription_plan: Match.Maybe(String),\n            subscription_prorate: Match.Maybe(String),\n            subscription_proration_date: Match.Maybe(String),\n            subscription_quantity: Match.Maybe(String),\n            subscription_tax_percent: Match.Maybe(String),\n            subscription_trial_end: Match.Maybe(String)\n\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.retrieveLines, client.invoices);\n\n        return method(invoiceID);\n    },\n    \"stripe_invoices_get_upcoming\": function (user, query) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Application User Provided\");\n        }\n\n        check(user, Object);\n        check(query, {\n            coupon: Match.Maybe(String),\n            subscription: Match.Maybe(String),\n            subscription_items: Match.Maybe(Match.ObjectIncluding({\n                id: Match.Maybe(String),\n                deleted: Match.Maybe(String),\n                plan: Match.Maybe(String),\n                quantity: Match.Maybe(String)\n            })),\n            subscription_plan: Match.Maybe(String),\n            subscription_prorate: Match.Maybe(String),\n            subscription_proration_date: Match.Maybe(String),\n            subscription_quantity: Match.Maybe(String),\n            subscription_tax_percent: Match.Maybe(String),\n            subscription_trial_end: Match.Maybe(String)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.retrieveUpcoming, client.invoices);\n\n        return method(user.stripe.id, query);\n    },\n    \"stripe_invoices_pay\": function (invoiceID) {\n        if (!invoiceID) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n        }\n\n        check(invoiceID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.pay, client.invoices);\n\n        return method(invoiceID);\n    },\n    \"stripe_invoices_list\": function (query) {\n        check(query, {\n            customer: Match.Maybe(String),\n            date: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.list, client.invoices);\n        return method(query);\n    }\n});"]},"sourceType":"script","hash":"52f81ac1ac4d039d01f10339de3e8e4b15c6e787"}
