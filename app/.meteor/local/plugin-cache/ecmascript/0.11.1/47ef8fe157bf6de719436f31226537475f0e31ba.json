{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/facebook/server/account-stats.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/facebook/server/account-stats.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/facebook/server/account-stats.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/facebook/server/account-stats.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/facebook/server/account-stats.jsx"}},"code":"let FacebookConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"facebook-account-stats\": function (userID, profile) {\n    if (!profile) {\n      profile = SocialAccounts.findOne({\n        \"network\": \"facebook\"\n      });\n    }\n\n    if (!profile) {\n      throw new Meteor.Error(\"There's no matching profile\");\n    }\n\n    let connection = profile.connection;\n    let client = FacebookConnection(connection.accessToken);\n\n    if (profile) {\n      let posts = [];\n      let fields = [];\n      let likesPerPage = null;\n\n      if (profile.type === \"fanPage\") {\n        fields = [\"fan_count\"];\n      }\n\n      let syncFB = Meteor.wrapAsync(client.napi, client);\n      let user = syncFB(userID, {\n        fields\n      });\n      let lastPost = null;\n\n      let getPosts = function (until) {\n        let query = userID + \"/feed\";\n        let params = {\n          limit: 100,\n          fields: [\"id\", \"message\", \"picture\", \"link\", \"shares\", \"created_time\", \"comments.limit(1).summary(true)\", \"likes.limit(1).summary(true)\"]\n        };\n\n        if (until) {\n          params.until = until;\n        }\n\n        let result = syncFB(query, params);\n\n        if (lastPost) {\n          if (lastPost.id === result.data[result.data.length - 1].id) {\n            return;\n          }\n        }\n\n        posts = [...posts, ...result.data];\n        lastPost = result.data[result.data.length - 1];\n        let lastPostCreation = new Date(result.data[result.data.length - 1].created_time);\n\n        if (result.data.length > 1 && result.paging.next) {\n          getPosts(Number(lastPostCreation) / 1000);\n        }\n      };\n\n      let getPageLikes = function (until) {\n        let day = new Date();\n        var nextDay = new Date(day);\n        nextDay.setDate(day.getDate() + 1);\n        let query = userID + \"/insights\";\n        let params = {\n          pretty: 0,\n          since: day.toJSON().slice(0, 10),\n          until: nextDay.toJSON().slice(0, 10),\n          metric: \"page_fans\"\n        };\n        let result = syncFB(query, params);\n        console.log(result);\n\n        if (result.data && result.data[0]) {\n          return result.data.values[0].value;\n        } else {\n          return null;\n        }\n      };\n\n      getPosts();\n      const first = posts[0];\n      const last = posts[posts.length - 1];\n      let comments = 0;\n      let likes = 0;\n      let shares = 0;\n\n      for (const x of posts) {\n        if (x.comments) {\n          comments += x.comments.summary.total_count;\n        }\n\n        if (x.likes) {\n          likes += x.likes.summary.total_count;\n        }\n\n        if (x.shares) {\n          shares += x.shares.count;\n        }\n      }\n\n      let result = {\n        comments,\n        commentsPerPost: comments / posts.length,\n        likes,\n        likesPerPost: likes / posts.length,\n        shares,\n        sharesPerPost: shares / posts.length,\n        engagement: (comments + likes + shares) / posts.length / user.fan_count,\n        profileLikes: getPageLikes(),\n        posts: posts.length,\n        postsPerDay: posts.length / Math.abs(moment(first.created_time).diff(moment(new Date(last.created_time)), \"days\"))\n      };\n\n      if (user.fan_count) {\n        result.profileLikes = user.fan_count;\n      }\n\n      Object.keys(result).forEach(key => {\n        if (Number.isNaN(result[key])) {\n          result[key] = 0;\n        }\n      });\n\n      if (result.postsPerDay === Infinity) {\n        result.postsPerDay = 0;\n      }\n\n      return result;\n    }\n  }\n});","map":{"version":3,"sources":["imports/modules/facebook/server/account-stats.jsx"],"names":["FacebookConnection","module","watch","require","default","v","Meteor","methods","userID","profile","SocialAccounts","findOne","Error","connection","client","accessToken","posts","fields","likesPerPage","type","syncFB","wrapAsync","napi","user","lastPost","getPosts","until","query","params","limit","result","id","data","length","lastPostCreation","Date","created_time","paging","next","Number","getPageLikes","day","nextDay","setDate","getDate","pretty","since","toJSON","slice","metric","console","log","values","value","first","last","comments","likes","shares","x","summary","total_count","count","commentsPerPost","likesPerPost","sharesPerPost","engagement","fan_count","profileLikes","postsPerDay","Math","abs","moment","diff","Object","keys","forEach","key","isNaN","Infinity"],"mappings":"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","sourcesContent":["import FacebookConnection from \"./connection\";\n\nMeteor.methods({\n    \"facebook-account-stats\": function (userID, profile) {\n        if (!profile) {\n            profile = SocialAccounts.findOne({\"network\": \"facebook\"});\n        }\n\n        if (!profile) {\n            throw new Meteor.Error(\"There's no matching profile\");\n        }\n\n        let connection = profile.connection;\n        let client = FacebookConnection(connection.accessToken);\n\n        if (profile) {\n            let posts = [];\n            let fields = [];\n            let likesPerPage=null;\n            if (profile.type === \"fanPage\") {\n                fields = [\"fan_count\"];\n            }\n\n            let syncFB = Meteor.wrapAsync(client.napi, client);\n\n            let user = syncFB(userID, {fields});\n\n            let lastPost = null;\n\n            let getPosts = function (until) {\n                let query = userID + \"/feed\";\n                let params = {\n                    limit: 100,\n                    fields: [\"id\", \"message\", \"picture\", \"link\", \"shares\", \"created_time\", \"comments.limit(1).summary(true)\", \"likes.limit(1).summary(true)\"]\n                };\n\n                if (until) {\n                    params.until = until;\n                }\n\n                let result = syncFB(query, params);\n\n                if (lastPost) {\n                    if (lastPost.id === result.data[result.data.length - 1].id) {\n                        return;\n                    }\n                }\n\n                posts = [...posts, ...result.data];\n                lastPost = result.data[result.data.length - 1];\n\n                let lastPostCreation = new Date(result.data[result.data.length - 1].created_time);\n\n                if (result.data.length > 1 && result.paging.next) {\n                    getPosts(Number(lastPostCreation) / 1000);\n                }\n            };\n\n            let getPageLikes = function (until) {\n                let day = new Date();\n                var nextDay = new Date(day);\n                    nextDay.setDate(day.getDate()+1);\n\n                let query = userID + \"/insights\";\n                let params = {\n                    pretty:0,\n                    since:day.toJSON().slice(0,10),\n                    until:nextDay.toJSON().slice(0,10),\n                    metric:\"page_fans\"\n                    \n                };\n\n                let result = syncFB(query, params);\n                console.log(result);\n\n                if(result.data && result.data[0]){\n                    return result.data.values[0].value;\n                } else {\n                    return null;\n                }\n            };\n\n            getPosts();\n           \n\n            const first = posts[0];\n            const last = posts[posts.length - 1];\n\n            let comments = 0;\n            let likes = 0;\n            let shares = 0;\n\n            for (const x of posts) {\n                if (x.comments) {\n                    comments += x.comments.summary.total_count;\n                }\n                if (x.likes) {\n                    likes += x.likes.summary.total_count;\n                }\n                if (x.shares) {\n                    shares += x.shares.count;\n                }\n            }\n\n            let result = {\n                comments,\n                commentsPerPost: comments / posts.length,\n                likes,\n                likesPerPost: likes / posts.length,\n                shares,\n                sharesPerPost: shares / posts.length,\n                engagement: ((comments + likes + shares) / posts.length) / user.fan_count,\n                profileLikes: getPageLikes(),\n                posts: posts.length,\n                postsPerDay: (posts.length / (Math.abs((moment(first.created_time)).diff(moment(new Date(last.created_time)), \"days\"))))\n            };\n\n            if (user.fan_count) {\n                result.profileLikes = user.fan_count;\n            }\n\n            Object.keys(result).forEach((key) => {\n                if (Number.isNaN(result[key])) {\n                    result[key] = 0;\n                }\n            });\n\n            if (result.postsPerDay === Infinity) {\n                result.postsPerDay = 0;\n            }\n\n            return result\n\n        }\n    }\n});"]},"sourceType":"script","hash":"47ef8fe157bf6de719436f31226537475f0e31ba"}
