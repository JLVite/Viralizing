{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/payment-methods/bank-accounts.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/stripe/server/payment-methods/bank-accounts.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/payment-methods/bank-accounts.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/stripe/server/payment-methods/bank-accounts.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/stripe/server/payment-methods/bank-accounts.jsx"}},"code":"let StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_bank_accounts_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      source: Match.OneOf(String, Match.ObjectIncluding({\n        object: String,\n        account_number: String,\n        country: String,\n        currency: String,\n        account_holder_name: String,\n        account_holder_type: String,\n        routing_number: String\n      })),\n      metadata: Match.Maybe(Object)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.createSource, client.customers);\n    return method(user.stripe.id, data);\n  },\n  \"stripe_bank_accounts_update\": function (user, accountID, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!accountID) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account Data Provided\");\n    }\n\n    check(user, Object);\n    check(accountID, String);\n    check(data, {\n      account_holder_name: Match.Maybe(String),\n      account_holder_type: Match.Maybe(String),\n      metadata: Match.Maybe(Object)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.updateCard, client.customers);\n    return method(user.stripe.id, accountID, data);\n  },\n  \"stripe_bank_accounts_get\": function (user, accountID) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!accountID) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n    }\n\n    check(user, Object);\n    check(accountID, String);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.retrieveSource, client.customers);\n    return method(user.stripe.id, accountID);\n  },\n  \"stripe_bank_accounts_delete\": function (user, accountID) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!accountID) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n    }\n\n    check(user, Object);\n    check(accountID, String);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.deleteSource, client.customers);\n    return method(user.stripe.id, accountID);\n  },\n  \"stripe_bank_accounts_verify\": function (user, accountID, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!accountID) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(accountID, String);\n    check(data, {\n      amounts: [Number],\n      verification_method: Match.Maybe(Object)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.verifySource, client.customers);\n    return method(user.stripe.id, accountID, data);\n  },\n  \"stripe_bank_accounts_list\": function (user, query) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Query Provided\");\n    }\n\n    check(user, Object);\n    check(query, {\n      object: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    query.object = \"bank_account\";\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.listSources, client.customers);\n    return method(user.stripe.id, query);\n  }\n});","map":{"version":3,"sources":["imports/modules/stripe/server/payment-methods/bank-accounts.jsx"],"names":["StripeConnection","module","watch","require","default","v","Meteor","check","Match","methods","user","data","Error","Object","source","OneOf","String","ObjectIncluding","object","account_number","country","currency","account_holder_name","account_holder_type","routing_number","metadata","Maybe","stripe","users","findOne","_id","id","client","method","wrapAsync","customers","createSource","accountID","updateCard","retrieveSource","deleteSource","amounts","Number","verification_method","verifySource","query","ending_before","limit","starting_after","listSources"],"mappings":"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","sourcesContent":["import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_bank_accounts_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe User Data Provided\");\n        }\n        check(user, Object);\n        check(data, {\n            source: Match.OneOf(String, Match.ObjectIncluding({\n                object: String,\n                account_number: String,\n                country: String,\n                currency: String,\n                account_holder_name: String,\n                account_holder_type: String,\n                routing_number: String\n            })),\n            metadata: Match.Maybe(Object)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.createSource, client.customers);\n\n        return method(user.stripe.id, data);\n    },\n    \"stripe_bank_accounts_update\": function (user, accountID, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!accountID) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account Data Provided\");\n        }\n\n        check(user, Object);\n        check(accountID, String);\n        check(data, {\n            account_holder_name: Match.Maybe(String),\n            account_holder_type: Match.Maybe(String),\n            metadata: Match.Maybe(Object)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.updateCard, client.customers);\n\n        return method(user.stripe.id, accountID, data);\n    },\n    \"stripe_bank_accounts_get\": function (user, accountID) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!accountID) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n        }\n\n        check(user, Object);\n        check(accountID, String);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.retrieveSource, client.customers);\n\n        return method(user.stripe.id, accountID);\n    },\n    \"stripe_bank_accounts_delete\": function (user, accountID) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!accountID) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n        }\n\n        check(user, Object);\n        check(accountID, String);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.deleteSource, client.customers);\n\n        return method(user.stripe.id, accountID);\n    },\n    \"stripe_bank_accounts_verify\": function (user, accountID, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!accountID) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n        }\n\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe User Data Provided\");\n        }\n\n        check(user, Object);\n        check(accountID, String);\n        check(data, {\n            amounts: [Number],\n            verification_method: Match.Maybe(Object)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.verifySource, client.customers);\n\n        return method(user.stripe.id, accountID, data);\n    },\n    \"stripe_bank_accounts_list\": function (user, query) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Query Provided\");\n        }\n\n        check(user, Object);\n        check(query, {\n            object: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        query.object = \"bank_account\";\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.listSources, client.customers);\n        return method(user.stripe.id, query);\n    }\n});"]},"sourceType":"script","hash":"d964e97739f565955d78873be93dd0471c6ca944"}
