{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/social-connect.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/accounts/server/social-connect.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/social-connect.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/social-connect.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/accounts/server/social-connect.jsx"}},"code":"let check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\n/////////////////////////////\n// OAuth related functions //\n/////////////////////////////\nlet OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\nlet makePascalCased = function (word) {\n  return word[0].toUpperCase() + word.slice(1).toLowerCase();\n};\n\nlet addOauthService = function (user, options) {\n  console.log(\"addOauthService\");\n  check(options.oauth, {\n    credentialToken: String,\n    // When an error occurs while retrieving the access token, we store\n    // the error in the pending credentials table, with a secret of\n    // null. The client can call the login method with a secret of null\n    // to retrieve the error.\n    credentialSecret: Match.OneOf(null, String)\n  }); // Retrieve the pending credential object\n\n  let result = OAuth.retrieveCredential(options.oauth.credentialToken, options.oauth.credentialSecret);\n\n  if (!result) {\n    // OAuth credentialToken is not recognized, which could be either\n    // because the popup was closed by the user before completion, or\n    // some sort of error where the oauth provider didn't talk to our\n    // server correctly and closed the popup somehow.\n    throw new Meteor.Error(\"Social network not connected.\");\n  }\n\n  if (result instanceof Error) {\n    // We tried to login, but there was a fatal error. Report it back\n    // to the user.\n    throw result;\n  }\n\n  let serviceName = result.serviceName;\n  let serviceData = result.serviceData; // Service Must be valid\n\n  if (serviceName !== \"facebook\" && serviceName !== \"twitter\" && serviceName !== \"instagram\" && serviceName !== \"google\") {\n    throw new Meteor.Error(makePascalCased(serviceName) + \" is not supported\");\n  } // The user must not have used the service already\n\n\n  let dbSocialAccount = SocialAccounts.findOne({\n    \"connection.id\": serviceData.id\n  });\n\n  if (dbSocialAccount) {\n    if (dbSocialAccount.delete) {\n      SocialAccounts.update(dbSocialAccount._id, {\n        $set: {\n          delete: false\n        }\n      });\n      return dbSocialAccount._id;\n    } else {\n      throw new Meteor.Error(\"This \" + makePascalCased(serviceName) + \" account is already connected\");\n    }\n  } // The service must provide an `id` field\n\n\n  if (!_.has(serviceData, \"id\")) {\n    throw new Meteor.Error(\"Service data for service \" + makePascalCased(serviceName) + \" must include id\");\n  }\n\n  return Meteor.call(\"profile-create\", user, result);\n}; //////////////////////////////\n// `addLoginService` method //\n//////////////////////////////\n\n\nMeteor.methods({\n  addLoginService: function (options) {\n    let user = Meteor.user(); // Ensure the user is logged in\n\n    if (!user) {\n      throw new Meteor.Error(\"Login required\");\n    } // Check arguments\n\n\n    check(options, Object); // Adding an oauth service\n\n    if (options.oauth) {\n      return addOauthService(user, options);\n    }\n\n    throw new Meteor.Error(\"Bad request\");\n  }\n});","map":{"version":3,"sources":["imports/modules/accounts/server/social-connect.jsx"],"names":["check","Match","module","watch","require","v","Meteor","OAuthEncryption","Package","makePascalCased","word","toUpperCase","slice","toLowerCase","addOauthService","user","options","console","log","oauth","credentialToken","String","credentialSecret","OneOf","result","OAuth","retrieveCredential","Error","serviceName","serviceData","dbSocialAccount","SocialAccounts","findOne","id","delete","update","_id","$set","_","has","call","methods","addLoginService","Object"],"mappings":"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","sourcesContent":["import {check, Match} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\n/////////////////////////////\n// OAuth related functions //\n/////////////////////////////\n\nlet OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\n\nlet makePascalCased = function (word) {\n    return word[0].toUpperCase() + word.slice(1).toLowerCase();\n};\n\nlet addOauthService = function (user, options) {\n    console.log(\"addOauthService\");\n    check(options.oauth, {\n        credentialToken: String,\n        // When an error occurs while retrieving the access token, we store\n        // the error in the pending credentials table, with a secret of\n        // null. The client can call the login method with a secret of null\n        // to retrieve the error.\n        credentialSecret: Match.OneOf(null, String)\n    });\n    // Retrieve the pending credential object\n    let result = OAuth.retrieveCredential(options.oauth.credentialToken, options.oauth.credentialSecret);\n    if (!result) {\n        // OAuth credentialToken is not recognized, which could be either\n        // because the popup was closed by the user before completion, or\n        // some sort of error where the oauth provider didn't talk to our\n        // server correctly and closed the popup somehow.\n        throw new Meteor.Error(\"Social network not connected.\");\n    }\n    if (result instanceof Error) {\n        // We tried to login, but there was a fatal error. Report it back\n        // to the user.\n        throw result;\n    }\n\n    let serviceName = result.serviceName;\n    let serviceData = result.serviceData;\n\n    // Service Must be valid\n    if (serviceName !== \"facebook\" && serviceName !== \"twitter\" && serviceName !== \"instagram\" && serviceName !== \"google\") {\n        throw new Meteor.Error(makePascalCased(serviceName) + \" is not supported\");\n    }\n    // The user must not have used the service already\n    let dbSocialAccount = SocialAccounts.findOne({\"connection.id\": serviceData.id});\n    if (dbSocialAccount) {\n        if (dbSocialAccount.delete) {\n            SocialAccounts.update(dbSocialAccount._id, {$set: {delete: false}});\n            return dbSocialAccount._id;\n        } else {\n            throw new Meteor.Error(\"This \" + makePascalCased(serviceName) + \" account is already connected\");\n        }\n    }\n\n    // The service must provide an `id` field\n    if (!_.has(serviceData, \"id\")) {\n        throw new Meteor.Error(\"Service data for service \" + makePascalCased(serviceName) + \" must include id\");\n    }\n\n    return Meteor.call(\"profile-create\", user, result);\n};\n\n\n//////////////////////////////\n// `addLoginService` method //\n//////////////////////////////\n\nMeteor.methods({\n    addLoginService: function (options) {\n        let user = Meteor.user();\n        // Ensure the user is logged in\n        if (!user) {\n            throw new Meteor.Error(\"Login required\");\n        }\n        // Check arguments\n        check(options, Object);\n\n        // Adding an oauth service\n        if (options.oauth) {\n            return addOauthService(user, options);\n        }\n\n        throw new Meteor.Error(\"Bad request\");\n    }\n});"]},"sourceType":"script","hash":"bfffaa73690ceb11ebf2e9277ce4a2c5e69d74c7"}
