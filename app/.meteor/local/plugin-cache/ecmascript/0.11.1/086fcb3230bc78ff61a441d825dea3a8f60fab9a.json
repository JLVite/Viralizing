{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/invites.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/accounts/server/invites.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/invites.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/invites.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/accounts/server/invites.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Email;\nmodule.watch(require(\"meteor/email\"), {\n  Email(v) {\n    Email = v;\n  }\n\n}, 1);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/account-invites/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 2);\nlet Settings;\nmodule.watch(require(\"../../../settings\"), {\n  default(v) {\n    Settings = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"account-invite-create\": function (invite) {\n    const user = Meteor.user();\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    };\n\n    removeTypeNames(invite);\n    let newInvite = Object.assign({}, Schema, {\n      owner: user._id\n    }, invite);\n\n    if (!newInvite.account) {\n      throw new Meteor.Error(500, \"No Account sent on Invite\");\n    }\n\n    let newInviteID = SocialAccountsInvites.insert(newInvite);\n    newInvite._id = newInviteID;\n    Meteor.call(\"account-invite-send-email\", newInvite);\n    return newInviteID;\n  },\n  \"account-invite-delete\": function (invite, accountID) {\n    let dbInvite = SocialAccountsInvites.findOne({\n      _id: invite._id\n    });\n\n    if (dbInvite.account !== accountID) {\n      throw new Meteor.Error(403, \"Invite doesn't belong to account\");\n    }\n\n    return SocialAccountsInvites.remove({\n      _id: invite._id\n    });\n  },\n  \"account-invite-send-email\": function (invite) {\n    let account = SocialAccounts.findOne({\n      _id: invite.account\n    });\n    let user = Meteor.users.findOne({\n      _id: account.owner\n    }, {\n      fields: {\n        services: 0\n      }\n    });\n    let userName = user.profile.name;\n    let accountName = (account.information.name || \"\") + \" \" + (account.information.lastName || \"\");\n    let dbUser = Accounts.findUserByEmail(invite.email);\n\n    if (dbUser) {\n      Meteor.call(\"notifications-create\", dbUser._id, {\n        type: \"info\",\n        title: \"Nueva Invitación\",\n        description: \"Has sido invitado a administrar la cuenta de \" + accountName,\n        url: \"http://localhost:3000/accounts/invite/\" + invite._id\n      });\n    }\n\n    this.unblock();\n    let subject = \"Ha sido invitado a administrar una cuenta\";\n    let html = (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" te ha invitado a administrar la cuenta de \" + accountName + \"<br> <a href='http://localhost:3000/accounts/invite/\" + invite._id + \"'>Ver Invitación</a>\";\n\n    if (invite.type === \"share\") {\n      subject = \"Ha sido invitado a administrar una cuenta\";\n      html = (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" te ha invitado a administrar la cuenta de \" + accountName + \"<br> <a href='http://localhost:3000/accounts/invite/\" + invite._id + \"'>Ver Invitación</a>\";\n    }\n\n    Email.send({\n      from: Settings.email.noReply,\n      to: invite.email,\n      subject,\n      html\n    });\n    return SocialAccountsInvites.update({\n      _id: invite._id\n    }, {\n      $set: {\n        status: \"sent\",\n        sent: new Date()\n      }\n    });\n  },\n  \"account-invite-update-status\": function (invite, status) {\n    //console.log(\"INVITE_UPDATE\", status);\n    let user = Meteor.user();\n\n    if (status === \"reject\") {\n      return SocialAccountsInvites.update({\n        _id: invite._id\n      }, {\n        $set: {\n          status: \"rejected\"\n        }\n      });\n    }\n\n    if (status === \"accept\") {\n      let query = {};\n\n      if (invite.type === \"share\") {\n        let account = SocialAccounts.findOne({\n          _id: invite.account._id\n        });\n        let shares = account.shares;\n        shares.push(user._id);\n        query = {\n          shares\n        };\n      }\n\n      if (invite.type === \"manager\") {\n        query = {\n          manager: user._id\n        };\n      }\n\n      SocialAccounts.update({\n        _id: invite.account._id\n      }, {\n        $set: query\n      });\n      Meteor.call(\"account-invite-delete\", invite, invite.account._id);\n    }\n  }\n});","map":{"version":3,"sources":["imports/modules/accounts/server/invites.jsx"],"names":["Meteor","module","watch","require","v","Email","Schema","default","Settings","methods","invite","user","removeTypeNames","obj","Object","keys","forEach","k","newInvite","assign","owner","_id","account","Error","newInviteID","SocialAccountsInvites","insert","call","accountID","dbInvite","findOne","remove","SocialAccounts","users","fields","services","userName","profile","name","accountName","information","lastName","dbUser","Accounts","findUserByEmail","email","type","title","description","url","unblock","subject","html","emails","address","send","from","noReply","to","update","$set","status","sent","Date","query","shares","push","manager"],"mappings":"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","sourcesContent":["import {Meteor} from \"meteor/meteor\";\nimport {Email} from \"meteor/email\";\nimport Schema from \"../../../server/schemas/account-invites/schema\";\nimport Settings from \"../../../settings\";\n\nMeteor.methods({\n    \"account-invite-create\": function (invite) {\n        const user = Meteor.user();\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        removeTypeNames(invite);\n\n        let newInvite = Object.assign({}, Schema, {\n            owner: user._id\n        }, invite);\n\n        if (!newInvite.account) {\n            throw new Meteor.Error(500, \"No Account sent on Invite\");\n        }\n\n        let newInviteID = SocialAccountsInvites.insert(newInvite);\n        newInvite._id = newInviteID;\n\n        Meteor.call(\"account-invite-send-email\", newInvite);\n\n        return newInviteID;\n    },\n    \"account-invite-delete\": function (invite, accountID) {\n        let dbInvite = SocialAccountsInvites.findOne({_id: invite._id});\n\n        if (dbInvite.account !== accountID) {\n            throw new Meteor.Error(403, \"Invite doesn't belong to account\");\n        }\n\n        return SocialAccountsInvites.remove({_id: invite._id});\n    },\n    \"account-invite-send-email\": function (invite) {\n        let account = SocialAccounts.findOne({_id: invite.account});\n        let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n\n        let userName = user.profile.name;\n        let accountName = (account.information.name || \"\") + \" \" + (account.information.lastName || \"\");\n\n        let dbUser = Accounts.findUserByEmail(invite.email);\n\n        if (dbUser) {\n            Meteor.call(\"notifications-create\", dbUser._id, {\n                type: \"info\",\n                title: \"Nueva Invitación\",\n                description: \"Has sido invitado a administrar la cuenta de \" + accountName,\n                url: \"http://localhost:3000/accounts/invite/\" + invite._id\n            });\n        }\n\n        this.unblock();\n        let subject = \"Ha sido invitado a administrar una cuenta\";\n        let html = (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" te ha invitado a administrar la cuenta de \" + accountName + \"<br> <a href='http://localhost:3000/accounts/invite/\" + invite._id + \"'>Ver Invitación</a>\";\n        if (invite.type === \"share\") {\n            subject = \"Ha sido invitado a administrar una cuenta\";\n            html = (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" te ha invitado a administrar la cuenta de \" + accountName + \"<br> <a href='http://localhost:3000/accounts/invite/\" + invite._id + \"'>Ver Invitación</a>\";\n        }\n        Email.send({\n            from: Settings.email.noReply,\n            to: invite.email,\n            subject,\n            html\n        });\n\n        return SocialAccountsInvites.update({_id: invite._id}, {\n            $set: {\n                status: \"sent\",\n                sent: new Date()\n            }\n        });\n    },\n    \"account-invite-update-status\": function (invite, status) {\n        //console.log(\"INVITE_UPDATE\", status);\n        let user = Meteor.user();\n        if (status === \"reject\") {\n            return SocialAccountsInvites.update({_id: invite._id}, {\n                $set: {\n                    status: \"rejected\"\n                }\n            });\n        }\n        if (status === \"accept\") {\n            let query = {};\n            if (invite.type === \"share\") {\n                let account = SocialAccounts.findOne({_id: invite.account._id});\n                let shares = account.shares;\n                shares.push(user._id);\n                query = {shares};\n            }\n            if (invite.type === \"manager\") {\n                query = {\n                    manager: user._id\n                };\n            }\n            SocialAccounts.update({_id: invite.account._id}, {$set: query});\n            Meteor.call(\"account-invite-delete\", invite, invite.account._id);\n        }\n    }\n});"]},"sourceType":"script","hash":"086fcb3230bc78ff61a441d825dea3a8f60fab9a"}
