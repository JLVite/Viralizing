{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/payments/resolvers/payments.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/server/schemas/payments/resolvers/payments.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/payments/resolvers/payments.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/payments/resolvers/payments.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/server/schemas/payments/resolvers/payments.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet moment;\nmodule.watch(require(\"moment\"), {\n  default(v) {\n    moment = v;\n  }\n\n}, 1);\n\nfunction getMonthDateRange(year, month) {\n  console.log(\"GET_MONTH_DATE_RANGE_BEFORE\", year, month);\n  if (typeof year === \"string\") year = Number(year);\n  if (typeof month === \"string\") month = Number(month);\n  console.log(\"GET_MONTH_DATE_RANGE_After\", year, month); // month in moment is 0 based, so 9 is actually october, subtract 1 to compensate\n  // array is 'year', 'month', 'day', etc\n\n  let startDate = moment([year, month - 1]); // Clone the value before .endOf()\n\n  let endDate = moment(startDate).endOf('month'); // just for demonstration:\n\n  console.log(startDate.toDate());\n  console.log(endDate.toDate()); // make sure to call toDate() for plain JavaScript date type\n\n  return {\n    $gt: startDate.toDate(),\n    $lt: endDate.toDate()\n  };\n}\n\nmodule.exportDefault({\n  Query: {\n    paymentsOwn(root, args, context) {\n      let userID = context.userId;\n      let {\n        year,\n        month\n      } = args;\n      let usersQuery = {\n        $or: [{\n          owner: userID\n        }, {\n          manager: userID\n        }, {\n          shares: {\n            $in: [userID]\n          }\n        }],\n        delete: {\n          $ne: true\n        }\n      };\n      let userIDs = SocialAccounts.find(usersQuery, {\n        fields: {\n          _id: 1\n        }\n      }).fetch().map(u => u._id);\n      console.log(\"USER_IDS\", userIDs);\n      let query = {\n        $or: [{\n          from: userID\n        }, {\n          to: {\n            $in: userIDs\n          }\n        }]\n      };\n\n      if (year && month) {\n        query.date = getMonthDateRange(year, month);\n      }\n\n      console.log(\"PAYMENTS_OWN\", args);\n      console.log(\"PAYPEMTS_OWN_QUERY\", query);\n      let results = Payments.find(query).fetch().map(p => Object.assign({}, p, {\n        type: p.from === userID ? \"outgoing\" : \"incoming\"\n      }));\n      console.log(\"PAYMENTS_OWN\", results.length);\n      return results;\n    }\n\n  },\n  Payment: {\n    from: payment => {\n      return Meteor.users.findOne({\n        _id: payment.from\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n    },\n    to: payment => {\n      return SocialAccounts.findOne({\n        _id: payment.to\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n    },\n    campaign: payment => {\n      return Campaigns.findOne({\n        _id: payment.campaign\n      });\n    },\n    post: payment => {\n      return Posts.findOne({\n        _id: payment.post\n      }) || {};\n    }\n  }\n});","map":{"version":3,"sources":["imports/server/schemas/payments/resolvers/payments.jsx"],"names":["Meteor","module","watch","require","v","moment","default","getMonthDateRange","year","month","console","log","Number","startDate","endDate","endOf","toDate","$gt","$lt","exportDefault","Query","paymentsOwn","root","args","context","userID","userId","usersQuery","$or","owner","manager","shares","$in","delete","$ne","userIDs","SocialAccounts","find","fields","_id","fetch","map","u","query","from","to","date","results","Payments","p","Object","assign","type","length","Payment","payment","users","findOne","services","campaign","Campaigns","post","Posts"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,QAAR,CAAb,EAA+B;AAACG,UAAQF,CAAR,EAAU;AAACC,aAAOD,CAAP;AAAS;;AAArB,CAA/B,EAAsD,CAAtD;;AAGrF,SAASG,iBAAT,CAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;AACpCC,UAAQC,GAAR,CAAY,6BAAZ,EAA0CH,IAA1C,EAAgDC,KAAhD;AACA,MAAG,OAAOD,IAAP,KAAc,QAAjB,EAA4BA,OAAKI,OAAOJ,IAAP,CAAL;AAC5B,MAAG,OAAOC,KAAP,KAAe,QAAlB,EAA6BA,QAAMG,OAAOH,KAAP,CAAN;AAC7BC,UAAQC,GAAR,CAAY,4BAAZ,EAAyCH,IAAzC,EAA+CC,KAA/C,EAJoC,CAKpC;AACA;;AACA,MAAII,YAAYR,OAAO,CAACG,IAAD,EAAOC,QAAQ,CAAf,CAAP,CAAhB,CAPoC,CASpC;;AACA,MAAIK,UAAUT,OAAOQ,SAAP,EAAkBE,KAAlB,CAAwB,OAAxB,CAAd,CAVoC,CAYpC;;AACAL,UAAQC,GAAR,CAAYE,UAAUG,MAAV,EAAZ;AACAN,UAAQC,GAAR,CAAYG,QAAQE,MAAR,EAAZ,EAdoC,CAgBpC;;AACA,SAAO;AAAEC,SAAKJ,UAAUG,MAAV,EAAP;AAA2BE,SAAKJ,QAAQE,MAAR;AAAhC,GAAP;AACH;;AArBDf,OAAOkB,aAAP,CAuBe;AACXC,SAAO;AACHC,gBAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC;AAC7B,UAAIC,SAAOD,QAAQE,MAAnB;AACA,UAAI;AAAClB,YAAD;AAAOC;AAAP,UAAcc,IAAlB;AAEA,UAAII,aAAa;AACbC,aAAK,CAAC;AAACC,iBAAOJ;AAAR,SAAD,EAAkB;AAACK,mBAASL;AAAV,SAAlB,EAAqC;AAACM,kBAAQ;AAACC,iBAAK,CAACP,MAAD;AAAN;AAAT,SAArC,CADQ;AAEbQ,gBAAQ;AAACC,eAAK;AAAN;AAFK,OAAjB;AAIA,UAAIC,UAAQC,eAAeC,IAAf,CAAoBV,UAApB,EAAgC;AAACW,gBAAO;AAACC,eAAI;AAAL;AAAR,OAAhC,EAAkDC,KAAlD,GAA0DC,GAA1D,CAA8DC,KAAGA,EAAEH,GAAnE,CAAZ;AAEA7B,cAAQC,GAAR,CAAY,UAAZ,EAAwBwB,OAAxB;AAEA,UAAIQ,QAAM;AACNf,aAAK,CAAC;AAACgB,gBAAMnB;AAAP,SAAD,EAAiB;AAACoB,cAAI;AAACb,iBAAKG;AAAN;AAAL,SAAjB;AADC,OAAV;;AAIA,UAAG3B,QAAQC,KAAX,EAAiB;AACbkC,cAAMG,IAAN,GAAWvC,kBAAkBC,IAAlB,EAAwBC,KAAxB,CAAX;AACH;;AACDC,cAAQC,GAAR,CAAY,cAAZ,EAA4BY,IAA5B;AAEAb,cAAQC,GAAR,CAAY,oBAAZ,EAAkCgC,KAAlC;AAEA,UAAII,UAAQC,SAASX,IAAT,CAAcM,KAAd,EAAqBH,KAArB,GAA6BC,GAA7B,CAAiCQ,KAAGC,OAAOC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAmB;AAC/DG,cAAMH,EAAEL,IAAF,KAASnB,MAAT,GAAgB,UAAhB,GAA2B;AAD8B,OAAnB,CAApC,CAAZ;AAIAf,cAAQC,GAAR,CAAY,cAAZ,EAA4BoC,QAAQM,MAApC;AAEA,aAAON,OAAP;AACH;;AA/BE,GADI;AAkCXO,WAAS;AACLV,UAAOW,OAAD,IAAa;AACf,aAAOvD,OAAOwD,KAAP,CAAaC,OAAb,CAAqB;AAAClB,aAAKgB,QAAQX;AAAd,OAArB,EAA0C;AAACN,gBAAQ;AAACoB,oBAAU;AAAX;AAAT,OAA1C,CAAP;AACH,KAHI;AAILb,QAAKU,OAAD,IAAa;AACb,aAAOnB,eAAeqB,OAAf,CAAuB;AAAClB,aAAKgB,QAAQV;AAAd,OAAvB,EAA0C;AAACP,gBAAQ;AAACoB,oBAAU;AAAX;AAAT,OAA1C,CAAP;AACH,KANI;AAOLC,cAAWJ,OAAD,IAAa;AACnB,aAAOK,UAAUH,OAAV,CAAkB;AAAClB,aAAKgB,QAAQI;AAAd,OAAlB,CAAP;AACH,KATI;AAULE,UAAON,OAAD,IAAa;AACf,aAAOO,MAAML,OAAN,CAAc;AAAClB,aAAKgB,QAAQM;AAAd,OAAd,KAAoC,EAA3C;AACH;AAZI;AAlCE,CAvBf","sourcesContent":["import {Meteor} from 'meteor/meteor';\nimport moment from \"moment\";\n\nfunction getMonthDateRange(year, month) {\n    console.log(\"GET_MONTH_DATE_RANGE_BEFORE\",year, month);\n    if(typeof year===\"string\" ) year=Number(year);\n    if(typeof month===\"string\" ) month=Number(month);\n    console.log(\"GET_MONTH_DATE_RANGE_After\",year, month);\n    // month in moment is 0 based, so 9 is actually october, subtract 1 to compensate\n    // array is 'year', 'month', 'day', etc\n    let startDate = moment([year, month - 1]);\n\n    // Clone the value before .endOf()\n    let endDate = moment(startDate).endOf('month');\n\n    // just for demonstration:\n    console.log(startDate.toDate());\n    console.log(endDate.toDate());\n\n    // make sure to call toDate() for plain JavaScript date type\n    return { $gt: startDate.toDate(), $lt: endDate.toDate() };\n}\n\nexport default {\n    Query: {\n        paymentsOwn(root, args, context) {\n            let userID=context.userId;\n            let {year, month}=args;\n\n            let usersQuery = {\n                $or: [{owner: userID}, {manager: userID}, {shares: {$in: [userID]} }],\n                delete: {$ne: true}\n            };\n            let userIDs=SocialAccounts.find(usersQuery, {fields:{_id:1}}).fetch().map(u=>u._id);\n\n            console.log(\"USER_IDS\", userIDs);\n\n            let query={\n                $or: [{from: userID}, {to: {$in: userIDs} }]\n            };\n\n            if(year && month){\n                query.date=getMonthDateRange(year, month);\n            }\n            console.log(\"PAYMENTS_OWN\", args);\n\n            console.log(\"PAYPEMTS_OWN_QUERY\", query);\n\n            let results=Payments.find(query).fetch().map(p=>Object.assign({},p,{\n                type: p.from===userID?\"outgoing\":\"incoming\"\n            }));\n\n            console.log(\"PAYMENTS_OWN\", results.length);\n\n            return results;\n        }\n    },\n    Payment: {\n        from: (payment) => {\n            return Meteor.users.findOne({_id: payment.from}, {fields: {services: 0}});\n        },\n        to: (payment) => {\n            return SocialAccounts.findOne({_id: payment.to}, {fields: {services: 0}});\n        },\n        campaign: (payment) => {\n            return Campaigns.findOne({_id: payment.campaign});\n        },\n        post: (payment) => {\n            return Posts.findOne({_id: payment.post})||{};\n        },\n    }\n};"]},"sourceType":"script","hash":"74d600a4127d59f3a8e6cf09155092ca3587e594"}
