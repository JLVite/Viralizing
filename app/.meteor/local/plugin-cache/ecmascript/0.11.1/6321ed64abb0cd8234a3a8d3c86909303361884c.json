{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/campaigns/server/cron-jobs/actions/posts-scheduled.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/campaigns/server/cron-jobs/actions/posts-scheduled.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/campaigns/server/cron-jobs/actions/posts-scheduled.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/campaigns/server/cron-jobs/actions/posts-scheduled.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/campaigns/server/cron-jobs/actions/posts-scheduled.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"posts-scheduled-run\": function () {\n    let currentTime = moment().second(0).toDate(),\n        dateCeil = moment(currentTime).add(4, \"minutes\").toDate();\n    let query = {\n      status: \"scheduled\",\n      date: {\n        $lte: dateCeil\n      }\n    };\n    let posts = Posts.find(query).fetch();\n    let accountIDs = posts.map(p => p.account._id);\n    let accounts = SocialAccounts.find({\n      _id: {\n        $in: accountIDs\n      }\n    }, {\n      fields: {\n        network: 1,\n        _id: 1,\n        connection: 1\n      }\n    }).fetch();\n\n    if (posts.length === 0) {} //console.log(\"NO_POSTS_FOUND_TO_RUN\");\n    //console.log(\"POSTS_RUN_TIME_FROM:\", currentTime, \"_TO_\", dateCeil, \"_FOUND:\", posts.length, \"_POSTS\");\n\n\n    posts.forEach(function (post) {\n      let account = accounts.filter(a => a._id === post.account._id)[0];\n\n      if (account) {\n        let method = \"\";\n\n        switch (account.network) {\n          case \"facebook\":\n            method = \"facebook-post-create\";\n            break;\n\n          case \"twitter\":\n            method = \"twitter-post-create\";\n            break;\n\n          case \"instagram\":\n            method = \"instagram-post-create\";\n            break;\n\n          default:\n            throw new Meteor.error(500, \"Invalid Social Network\");\n        }\n\n        post.data.date = post.date;\n        Meteor.call(method, account.connection, post.data, function () {\n          //console.log(\"SOCIAL_MEDIA_POST_SUCCESFUL\");\n          Posts.update({\n            _id: post._id\n          }, {\n            $set: {\n              status: \"published\"\n            }\n          });\n        });\n      } else {//TODO: Send Email to acknowledge error in dev.\n        //console.log(\"[ERROR]: POSTING ERROR: NO ACCOUNT MARCH\", post._id);\n      }\n    });\n    return posts;\n  }\n});","map":{"version":3,"sources":["imports/modules/campaigns/server/cron-jobs/actions/posts-scheduled.jsx"],"names":["Meteor","module","watch","require","v","methods","currentTime","moment","second","toDate","dateCeil","add","query","status","date","$lte","posts","Posts","find","fetch","accountIDs","map","p","account","_id","accounts","SocialAccounts","$in","fields","network","connection","length","forEach","post","filter","a","method","error","data","call","update","$set"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAEXJ,OAAOK,OAAP,CAAe;AACX,yBAAuB,YAAY;AAC/B,QAAIC,cAAcC,SAASC,MAAT,CAAgB,CAAhB,EAAmBC,MAAnB,EAAlB;AAAA,QACIC,WAAWH,OAAOD,WAAP,EAAoBK,GAApB,CAAwB,CAAxB,EAA2B,SAA3B,EAAsCF,MAAtC,EADf;AAEA,QAAIG,QAAQ;AACRC,cAAQ,WADA;AAERC,YAAM;AAACC,cAAML;AAAP;AAFE,KAAZ;AAIA,QAAIM,QAAQC,MAAMC,IAAN,CAAWN,KAAX,EAAkBO,KAAlB,EAAZ;AACA,QAAIC,aAAaJ,MAAMK,GAAN,CAAWC,CAAD,IAAOA,EAAEC,OAAF,CAAUC,GAA3B,CAAjB;AACA,QAAIC,WAAWC,eAAeR,IAAf,CAAoB;AAC/BM,WAAK;AAACG,aAAKP;AAAN;AAD0B,KAApB,EAEZ;AACCQ,cAAQ;AACJC,iBAAS,CADL;AAEJL,aAAK,CAFD;AAGJM,oBAAY;AAHR;AADT,KAFY,EAQZX,KARY,EAAf;;AAUA,QAAIH,MAAMe,MAAN,KAAiB,CAArB,EAAwB,CAEvB,CAFD,CACI;AAEJ;;;AACAf,UAAMgB,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC1B,UAAIV,UAAUE,SAASS,MAAT,CAAiBC,CAAD,IAAOA,EAAEX,GAAF,KAAUS,KAAKV,OAAL,CAAaC,GAA9C,EAAmD,CAAnD,CAAd;;AACA,UAAID,OAAJ,EAAa;AACT,YAAIa,SAAS,EAAb;;AACA,gBAAQb,QAAQM,OAAhB;AACI,eAAK,UAAL;AACIO,qBAAS,sBAAT;AACA;;AACJ,eAAK,SAAL;AACIA,qBAAS,qBAAT;AACA;;AACJ,eAAK,WAAL;AACIA,qBAAS,uBAAT;AACA;;AACJ;AACI,kBAAM,IAAIpC,OAAOqC,KAAX,CAAiB,GAAjB,EAAsB,wBAAtB,CAAN;AAXR;;AAaAJ,aAAKK,IAAL,CAAUxB,IAAV,GAAiBmB,KAAKnB,IAAtB;AACAd,eAAOuC,IAAP,CAAYH,MAAZ,EAAoBb,QAAQO,UAA5B,EAAwCG,KAAKK,IAA7C,EAAmD,YAAY;AAC3D;AACArB,gBAAMuB,MAAN,CAAa;AAAChB,iBAAKS,KAAKT;AAAX,WAAb,EAA8B;AAACiB,kBAAM;AAAC5B,sBAAQ;AAAT;AAAP,WAA9B;AACH,SAHD;AAIH,OApBD,MAoBO,CACH;AACA;AACH;AACJ,KA1BD;AA2BA,WAAOG,KAAP;AACH;AApDU,CAAf","sourcesContent":["import {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"posts-scheduled-run\": function () {\n        let currentTime = moment().second(0).toDate(),\n            dateCeil = moment(currentTime).add(4, \"minutes\").toDate();\n        let query = {\n            status: \"scheduled\",\n            date: {$lte: dateCeil}\n        };\n        let posts = Posts.find(query).fetch();\n        let accountIDs = posts.map((p) => p.account._id);\n        let accounts = SocialAccounts.find({\n            _id: {$in: accountIDs}\n        }, {\n            fields: {\n                network: 1,\n                _id: 1,\n                connection: 1\n            }\n        }).fetch();\n\n        if (posts.length === 0) {\n            //console.log(\"NO_POSTS_FOUND_TO_RUN\");\n        }\n        //console.log(\"POSTS_RUN_TIME_FROM:\", currentTime, \"_TO_\", dateCeil, \"_FOUND:\", posts.length, \"_POSTS\");\n        posts.forEach(function (post) {\n            let account = accounts.filter((a) => a._id === post.account._id)[0];\n            if (account) {\n                let method = \"\";\n                switch (account.network) {\n                    case \"facebook\":\n                        method = \"facebook-post-create\";\n                        break;\n                    case \"twitter\":\n                        method = \"twitter-post-create\";\n                        break;\n                    case \"instagram\":\n                        method = \"instagram-post-create\";\n                        break;\n                    default:\n                        throw new Meteor.error(500, \"Invalid Social Network\");\n                }\n                post.data.date = post.date;\n                Meteor.call(method, account.connection, post.data, function () {\n                    //console.log(\"SOCIAL_MEDIA_POST_SUCCESFUL\");\n                    Posts.update({_id: post._id}, {$set: {status: \"published\"}})\n                });\n            } else {\n                //TODO: Send Email to acknowledge error in dev.\n                //console.log(\"[ERROR]: POSTING ERROR: NO ACCOUNT MARCH\", post._id);\n            }\n        });\n        return posts;\n    }\n});"]},"sourceType":"script","hash":"6321ed64abb0cd8234a3a8d3c86909303361884c"}
