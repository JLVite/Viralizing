{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/accounts/resolvers/accounts.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/server/schemas/accounts/resolvers/accounts.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/accounts/resolvers/accounts.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/accounts/resolvers/accounts.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/server/schemas/accounts/resolvers/accounts.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    account(root, args, context) {\n      // Only return the current user, for security\n      const account = SocialAccounts.findOne({\n        _id: args._id\n      });\n      let userID = context.userId;\n\n      if (userID !== account.owner && userID !== account.manager && account.shares.indexOf(userID) == -1) {\n        return null;\n      }\n\n      return account;\n    },\n\n    accountsOwnSearch(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        $or: [{\n          owner: userID\n        }, {\n          manager: userID\n        }, {\n          shares: {\n            $in: [userID]\n          }\n        }],\n        delete: {\n          $ne: true\n        }\n      };\n\n      if (args.query) {\n        const regex = new RegExp(args.query, \"i\");\n        query.$and.push({\n          $or: [{\n            \"information.name\": {\n              $regex: regex\n            }\n          }, {\n            \"information.lastName\": {\n              $regex: regex\n            }\n          }, {\n            \"network\": {\n              $regex: regex\n            }\n          }]\n        });\n      }\n\n      console.log(\"ACCOUNTS_OWN\", query);\n      return SocialAccounts.find(query, {\n        limit: 15\n      }).fetch();\n    },\n\n    accountsByTag(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      re = new RegExp(args.tag, \"i\");\n      console.log(\"ACCOUNTS_BY_TAG: \", args.tag); //db.accounts.find({groups:{$in:[/^ibol$/i]}}).count()\n\n      let query = {\n        $and: [{\n          $or: [{\n            owner: userID\n          }, {\n            manager: userID\n          }, {\n            shares: {\n              $in: [userID]\n            }\n          }]\n        }],\n        groups: {\n          $in: [re]\n        }\n      };\n      return SocialAccounts.find(query).fetch();\n    },\n\n    accounts(root, args, context) {\n      const userID = context.userId;\n      return SocialAccounts.find({\n        $or: [{\n          owner: userID\n        }, {\n          manager: userID\n        }, {\n          shares: {\n            $in: [userID]\n          }\n        }],\n        delete: {\n          $ne: true\n        }\n      }).fetch();\n    },\n\n    accountFBPages(root, args, context) {\n      const userID = context.userId;\n      let fbPages = Meteor.call(\"facebook-pages-list\", args.accountID).data;\n      let PagesIDs = fbPages.map(p => p.id);\n      console.log(\"FB_PAGES\", PagesIDs);\n      let dbPages = SocialAccounts.find({\n        type: \"page\",\n        \"connection.id\": {\n          $in: PagesIDs\n        }\n      }, {\n        fields: {\n          \"connection.id\": 1\n        }\n      }).fetch().map(p => p.connection.id);\n      console.log(\"DB_PAGES\", dbPages);\n      return fbPages.filter(p => dbPages.indexOf(p.id) === -1);\n    }\n\n  },\n  Account: {\n    manager: account => {\n      let user = Meteor.users.findOne({\n        _id: account.manager\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    owner: account => {\n      let user = Meteor.users.findOne({\n        _id: account.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    shares: account => {\n      let users = Meteor.users.find({\n        _id: {\n          $in: account.shares\n        }\n      }, {\n        fields: {\n          services: 0\n        }\n      }).fetch();\n      return users;\n    },\n    campaignsCount: account => {\n      //TODO: Add Distinct to this query\n      let count = Campaigns.find({\n        'information.brands': {\n          $in: [account._id]\n        }\n      }).count();\n      return count;\n    }\n  },\n  FBPage: {\n    picture: page => page.picture.data.url\n  }\n});","map":{"version":3,"sources":["imports/server/schemas/accounts/resolvers/accounts.jsx"],"names":["Meteor","module","watch","require","v","exportDefault","Query","account","root","args","context","SocialAccounts","findOne","_id","userID","userId","owner","manager","shares","indexOf","accountsOwnSearch","query","$or","$in","delete","$ne","regex","RegExp","$and","push","$regex","console","log","find","limit","fetch","accountsByTag","re","tag","groups","accounts","accountFBPages","fbPages","call","accountID","data","PagesIDs","map","p","id","dbPages","type","fields","connection","filter","Account","user","users","services","campaignsCount","count","Campaigns","FBPage","picture","page","url"],"mappings":"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","sourcesContent":["import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        account(root, args, context) {\n            // Only return the current user, for security\n            const account = SocialAccounts.findOne({_id: args._id});\n            let userID=context.userId;\n            if ((userID !== account.owner) && (userID !== account.manager) && (account.shares.indexOf(userID)==-1)) {\n                return null\n            }\n            return account;\n\n        },\n        accountsOwnSearch(root, args, context){\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            let query = {\n                $or: [{owner: userID}, {manager: userID}, {shares: {$in: [userID]} }],\n                delete: {$ne: true}\n            };\n\n            if (args.query) {\n                const regex = new RegExp(args.query, \"i\");\n                query.$and.push({\n                    $or: [\n                        {\"information.name\": {$regex: regex}},\n                        {\"information.lastName\": {$regex: regex}},\n                        {\"network\": {$regex: regex}}\n                    ]\n                });\n            }\n\n            console.log(\"ACCOUNTS_OWN\",query);\n\n            return SocialAccounts.find(query, {limit: 15}).fetch();\n        },\n        accountsByTag(root, args, context){\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            re = new RegExp(args.tag, \"i\");\n            console.log(\"ACCOUNTS_BY_TAG: \", args.tag);\n            //db.accounts.find({groups:{$in:[/^ibol$/i]}}).count()\n            let query = {\n                $and: [\n                    {$or: [{owner: userID}, {manager: userID}, {shares: {$in: [userID]} }]}\n                ],\n                groups: {\n                    $in: [re]\n                }\n            };\n            return SocialAccounts.find(query).fetch();\n        },\n        accounts(root, args, context) {\n            const userID = context.userId;\n            return SocialAccounts.find({\n                $or: [{owner: userID}, {manager: userID}, {\n                    shares: {$in: [userID]}\n                }],\n                delete: {$ne: true}\n            }).fetch();\n        },\n        accountFBPages(root, args, context){\n            const userID = context.userId;\n            let fbPages=Meteor.call(\"facebook-pages-list\",args.accountID).data;\n            let PagesIDs=fbPages.map(p=>p.id);\n            console.log(\"FB_PAGES\",PagesIDs);\n            let dbPages=SocialAccounts.find({\n                type: \"page\",\n                \"connection.id\":{$in:PagesIDs}\n            }, {fields:{\"connection.id\":1}}).fetch().map(p=>p.connection.id);\n\n            console.log(\"DB_PAGES\",dbPages);\n            return fbPages.filter(p=>dbPages.indexOf(p.id)===-1);\n        }\n    },\n    Account: {\n        manager: (account) => {\n            let user = Meteor.users.findOne({_id: account.manager}, {fields: {services: 0}});\n            return user\n        },\n        owner: (account) => {\n            let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n            return user\n        },\n        shares: (account) => {\n            let users = Meteor.users.find({_id: {$in: account.shares} }, {fields: {services: 0}}).fetch();\n            return users\n        },\n        campaignsCount: (account)=>{\n            //TODO: Add Distinct to this query\n            let count=Campaigns.find({'information.brands': {$in : [account._id]}}).count();\n            return count;\n        }\n    },\n    FBPage: {\n        picture: (page)=>page.picture.data.url\n    }\n};"]},"sourceType":"script","hash":"c591136d1ca6120e79f2c320141b295b78d55943"}
