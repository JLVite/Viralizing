{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/methods.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/accounts/server/methods.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/methods.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/accounts/server/methods.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/accounts/server/methods.jsx"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Email;\nmodule.watch(require(\"meteor/email\"), {\n  Email(v) {\n    Email = v;\n  }\n\n}, 1);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/accounts/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 2);\nlet Settings;\nmodule.watch(require(\"../../../settings\"), {\n  default(v) {\n    Settings = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"profile-create\": function (user, connection) {\n    //console.log(\"PROFILE_CREATE_USER\", user);\n    //console.log(\"PROFILE_CREAATE_CONNECTION\",connection);\n\n    /*\n     let passPhrase = Meteor.settings.private.aes.passPhrase;\n      let encriptValues = function (serviceData) {\n     console.log(\"ENCRIPTION_PROCESS\",Object.keys(serviceData));\n     Object.keys(serviceData).forEach(function(key){\n     let value = serviceData[key];\n     console.log(\"PREVIOUS_VALUE [\" + key + \"]: \", value);\n     value = CryptoJS.AES.encrypt(value.toString(), passPhrase).toString();\n     console.log(\"ENCRYPTED_VALUE [\" + key + \"]: \", value);\n     serviceData[key] = value;\n     });\n     };\n      encriptValues(connection.serviceData);\n     */\n    let newProfile = Object.assign({}, Schema, {\n      owner: user._id,\n      manager: user._id,\n      connection: connection.serviceData,\n      network: connection.serviceName\n    });\n    console.log(newProfile.network);\n\n    switch (newProfile.network) {\n      case \"facebook\":\n        newProfile.information.name = newProfile.connection.first_name;\n        newProfile.information.lastName = newProfile.connection.last_name;\n        newProfile.information.avatar = \"https://graph.facebook.com/\" + newProfile.connection.id + \"/picture?type=large\";\n        newProfile.information.gender = newProfile.connection.gender; //newProfile.information.languages = [newProfile.connection.locale.split(\"_\")[0]];\n\n        break;\n\n      case \"twitter\":\n        newProfile.information.name = newProfile.connection.screenName;\n        newProfile.information.avatar = newProfile.connection.profile_image_url_https;\n        newProfile.information.languages = [newProfile.connection.lang];\n        break;\n\n      case \"instagram\":\n        newProfile.information.name = newProfile.connection.full_name;\n        newProfile.information.avatar = newProfile.connection.profile_picture;\n        break;\n\n      case \"google\":\n        newProfile.information.name = newProfile.connection.given_name;\n        newProfile.information.lastName = newProfile.connection.family_name;\n        newProfile.information.avatar = newProfile.connection.picture;\n        break;\n\n      default:\n        throw new Meteor.Error(500, \"Wrong Network\");\n    }\n\n    let profileID = SocialAccounts.insert(newProfile);\n    newProfile._id = profileID;\n\n    if (newProfile.network === 'facebook') {\n      Meteor.call(\"autocreate-pages-related\", profileID);\n    }\n\n    Meteor.call(\"profile-get-stats\", newProfile);\n    return profileID;\n  },\n  \"profiles-save\": function (profile) {\n    const user = Meteor.user();\n    let dbProfile = SocialAccounts.findOne({\n      _id: profile._id\n    });\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    }; //TODO: Change this...\n\n\n    profile.owner = profile.owner._id;\n    profile.manager = profile.manager._id;\n    profile.shares = profile.shares.map(a => a._id);\n    removeTypeNames(profile);\n    return SocialAccounts.update(profile._id, {\n      $set: Object.assign({}, dbProfile, profile)\n    });\n  },\n  \"profiles-mark-delete\": function (profile) {\n    const user = Meteor.user();\n    profile = SocialAccounts.findOne({\n      _id: profile._id\n    });\n\n    if (profile.owner !== user._id) {\n      throw new Meteor.Error(403, \"Only the owner can delete an account\");\n    }\n\n    let accountName = (profile.information.name || \"\") + \" \" + (profile.information.lastName || \"\");\n    let userName = user.profile.name;\n    SocialAccounts.update(profile._id, {\n      $set: {\n        delete: true,\n        active: false\n      }\n    });\n    this.unblock();\n    Email.send({\n      from: \"no-reply@viralizing.me\",\n      to: Settings.support.email,\n      subject: \"Eliminación de Cuenta [\" + (accountName === \" \" ? \"\" : accountName + \" - \") + profile.network + \"]\",\n      html: (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" desea borrar la cuenta \" + accountName + \" (\" + profile._id + \")\"\n    });\n  },\n  \"profiles-restore-delete\": function (profile) {\n    SocialAccounts.update(profile._id, {\n      $set: {\n        delete: true,\n        active: false\n      }\n    });\n  },\n  \"profile-get-stats\": function (profile) {\n    let screenName;\n    let method;\n\n    if (!profile.connection) {\n      profile = SocialAccounts.findOne({\n        _id: profile._id\n      });\n    }\n\n    console.log(\"CALL STATISTICS\");\n\n    switch (profile.network) {\n      case \"facebook\":\n        method = \"facebook-account-stats\";\n        screenName = profile.connection.id;\n        break;\n\n      case \"twitter\":\n        method = \"twitter-account-stats\";\n        screenName = profile.connection.screenName;\n        break;\n\n      case \"instagram\":\n        method = \"instagram-account-stats\";\n        screenName = profile.connection.username;\n        break;\n\n      case \"google\":\n        return;\n\n      default:\n        throw new Meteor.Error(500, \"Unknown Network\");\n    }\n\n    let statistics = Meteor.call(method, screenName, profile);\n    statistics.updated = new Date();\n    console.log(\"NEW STATISTICS\", statistics);\n    return SocialAccounts.update(profile._id, {\n      $set: {\n        statistics\n      }\n    });\n  },\n  \"connect-facebook-pages\": function (accountID, pages) {\n    let user = Meteor.user();\n    let pageData = Meteor.call(\"facebook-pages-list\", accountID);\n    let data = pageData.data.filter(page => pages.indexOf(page.id) !== -1);\n    let pageIDs = [];\n    data.forEach(page => {\n      page.parent = accountID;\n      page.accessToken = page.access_token;\n      let newProfile = Object.assign({}, Schema, {\n        owner: user._id,\n        manager: user._id,\n        connection: page,\n        network: \"facebook\"\n      });\n      newProfile.information.name = page.name;\n      newProfile.information.avatar = \"https://graph.facebook.com/\" + newProfile.connection.id + \"/picture?type=large\";\n      newProfile.type = \"page\"; //pageIDs.push(newProfile);\n      //return;\n\n      let matchPage = SocialAccounts.findOne({\n        \"connection.id\": page.id\n      });\n\n      if (matchPage) {\n        //Page Added return Error\n        console.log(\"Page Already Exists\", page.id);\n        pageIDs.push({\n          status: 'Error',\n          fbId: page.id,\n          name: page.name\n        });\n      } else {\n        let profileID = SocialAccounts.insert(newProfile);\n        newProfile._id = profileID;\n        Meteor.call(\"profile-get-stats\", newProfile);\n        pageIDs.push({\n          status: 'Success',\n          id: profileID,\n          fbId: page.id,\n          name: page.name\n        });\n      }\n    });\n    return pageIDs;\n  },\n  \"account-category-invite-proposal\": function (accountID, data) {\n    //console.log(\"account-category-invite-proposal\", accountID, data);\n    let user = Meteor.user();\n    let userName = user.profile.name;\n    let action = \"Categoria\";\n    let proposal = data.category;\n\n    if (data.type === \"specialty\") {\n      action = \"Especialidad\";\n      proposal = (data.category ? data.category : \"Sin Categoria\") + \" -> \" + data.specialty;\n    }\n\n    this.unblock();\n    let subject = \"Se ha sugerido una nueva \" + action;\n    let html = (userName ? userName : \"El usuario\") + \" (\" + user.emails[0].address + \" - \" + user._id + \")\" + \" ha sugerido una nueva \" + action + \" (\" + proposal + \")\";\n    Email.send({\n      from: Settings.email.noReply,\n      to: \"hello@viralizing.me\",\n      subject,\n      html\n    });\n  },\n  \"account-target-objective-proposal\": function (accountID, data) {\n    //console.log(\"account-target-objective-proposal\", accountID, data);\n    let user = Meteor.user();\n    let userName = user.profile.name;\n    let action = \"Meta\";\n    let proposal = data.objective;\n    this.unblock();\n    let subject = \"Se ha sugerido una nueva \" + action;\n    let html = (userName ? userName : \"El usuario\") + \" (\" + user.emails[0].address + \" - \" + user._id + \")\" + \" ha sugerido una nueva \" + action + \" (\" + proposal + \")\";\n    Email.send({\n      from: Settings.email.noReply,\n      to: \"hello@viralizing.me\",\n      subject,\n      html\n    });\n  },\n  \"autocreate-pages-related\": function (profileID) {\n    let fbPages = Meteor.call(\"facebook-pages-list\", profileID).data;\n    let pageIDs = fbPages.map(page => page.id);\n    Meteor.call(\"connect-facebook-pages\", profileID, pageIDs);\n  }\n});","map":{"version":3,"sources":["imports/modules/accounts/server/methods.jsx"],"names":["Meteor","module","watch","require","v","Email","Schema","default","Settings","methods","user","connection","newProfile","Object","assign","owner","_id","manager","serviceData","network","serviceName","console","log","information","name","first_name","lastName","last_name","avatar","id","gender","screenName","profile_image_url_https","languages","lang","full_name","profile_picture","given_name","family_name","picture","Error","profileID","SocialAccounts","insert","call","profile","dbProfile","findOne","removeTypeNames","obj","keys","forEach","k","shares","map","a","update","$set","accountName","userName","delete","active","unblock","send","from","to","support","email","subject","html","emails","address","method","username","statistics","updated","Date","accountID","pages","pageData","data","filter","page","indexOf","pageIDs","parent","accessToken","access_token","type","matchPage","push","status","fbId","action","proposal","category","specialty","noReply","objective","fbPages"],"mappings":"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","sourcesContent":["import {Meteor} from 'meteor/meteor';\nimport {Email} from 'meteor/email';\nimport Schema from \"../../../server/schemas/accounts/schema\";\nimport Settings from \"../../../settings\";\n\nMeteor.methods({\n    \"profile-create\": function (user, connection) {\n        //console.log(\"PROFILE_CREATE_USER\", user);\n        //console.log(\"PROFILE_CREAATE_CONNECTION\",connection);\n        /*\n         let passPhrase = Meteor.settings.private.aes.passPhrase;\n\n         let encriptValues = function (serviceData) {\n         console.log(\"ENCRIPTION_PROCESS\",Object.keys(serviceData));\n         Object.keys(serviceData).forEach(function(key){\n         let value = serviceData[key];\n         console.log(\"PREVIOUS_VALUE [\" + key + \"]: \", value);\n         value = CryptoJS.AES.encrypt(value.toString(), passPhrase).toString();\n         console.log(\"ENCRYPTED_VALUE [\" + key + \"]: \", value);\n         serviceData[key] = value;\n         });\n         };\n\n         encriptValues(connection.serviceData);\n         */\n        let newProfile = Object.assign({}, Schema, {\n            owner: user._id,\n            manager: user._id,\n            connection: connection.serviceData,\n            network: connection.serviceName\n        });\n\n        console.log(newProfile.network);\n\n        switch (newProfile.network) {\n            case \"facebook\":\n                newProfile.information.name = newProfile.connection.first_name;\n                newProfile.information.lastName = newProfile.connection.last_name;\n                newProfile.information.avatar = \"https://graph.facebook.com/\" + newProfile.connection.id + \"/picture?type=large\";\n                newProfile.information.gender = newProfile.connection.gender;\n                //newProfile.information.languages = [newProfile.connection.locale.split(\"_\")[0]];\n                break;\n            case \"twitter\":\n                newProfile.information.name = newProfile.connection.screenName;\n                newProfile.information.avatar = newProfile.connection.profile_image_url_https;\n                newProfile.information.languages = [newProfile.connection.lang];\n                break;\n            case \"instagram\":\n                newProfile.information.name = newProfile.connection.full_name;\n                newProfile.information.avatar = newProfile.connection.profile_picture;\n                break;\n            case \"google\":\n                newProfile.information.name = newProfile.connection.given_name;\n                newProfile.information.lastName = newProfile.connection.family_name;\n                newProfile.information.avatar = newProfile.connection.picture;\n\n                break;\n            default:\n                throw new Meteor.Error(500, \"Wrong Network\");\n        }\n\n        let profileID = SocialAccounts.insert(newProfile);\n        newProfile._id = profileID;\n\n        if (newProfile.network === 'facebook') {\n            Meteor.call(\"autocreate-pages-related\", profileID);\n        }\n\n        Meteor.call(\"profile-get-stats\", newProfile);\n\n        return profileID;\n    },\n    \"profiles-save\": function (profile) {\n        const user = Meteor.user();\n        let dbProfile = SocialAccounts.findOne({_id: profile._id});\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        //TODO: Change this...\n        profile.owner = profile.owner._id;\n\n        profile.manager = profile.manager._id;\n\n        profile.shares = profile.shares.map((a) => a._id);\n\n        removeTypeNames(profile);\n        return SocialAccounts.update(profile._id, {$set: Object.assign({}, dbProfile, profile)});\n    },\n    \"profiles-mark-delete\": function (profile) {\n        const user = Meteor.user();\n        profile = SocialAccounts.findOne({_id: profile._id});\n        if (profile.owner !== user._id) {\n            throw new Meteor.Error(403, \"Only the owner can delete an account\");\n        }\n        let accountName = (profile.information.name || \"\") + \" \" + (profile.information.lastName || \"\");\n        let userName = user.profile.name;\n\n        SocialAccounts.update(profile._id, {$set: {delete: true, active: false}});\n\n        this.unblock();\n        Email.send({\n            from: \"no-reply@viralizing.me\",\n            to: Settings.support.email,\n            subject: \"Eliminación de Cuenta [\" + (accountName === \" \" ? \"\" : accountName + \" - \") + profile.network + \"]\",\n            html: (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" desea borrar la cuenta \" + accountName + \" (\" + profile._id + \")\"\n        });\n    },\n    \"profiles-restore-delete\": function (profile) {\n        SocialAccounts.update(profile._id, {$set: {delete: true, active: false}});\n    },\n    \"profile-get-stats\": function (profile) {\n        let screenName;\n        let method;\n        if (!profile.connection) {\n            profile = SocialAccounts.findOne({_id: profile._id});\n        }\n        console.log(\"CALL STATISTICS\");\n        switch (profile.network) {\n            case \"facebook\":\n                method = \"facebook-account-stats\";\n                screenName = profile.connection.id;\n                break;\n            case \"twitter\":\n                method = \"twitter-account-stats\";\n                screenName = profile.connection.screenName;\n                break;\n            case \"instagram\":\n                method = \"instagram-account-stats\";\n                screenName = profile.connection.username;\n                break;\n            case \"google\":\n                return;\n            default:\n                throw new Meteor.Error(500, \"Unknown Network\");\n        }\n        let statistics = Meteor.call(method, screenName, profile);\n        statistics.updated = new Date();\n        console.log(\"NEW STATISTICS\",statistics);\n\n        return SocialAccounts.update(profile._id, {$set: {statistics}});\n    },\n    \"connect-facebook-pages\": function(accountID, pages){\n        let user=Meteor.user();\n        let pageData=Meteor.call(\"facebook-pages-list\", accountID);\n        let data=pageData.data.filter((page)=>pages.indexOf(page.id)!==-1);\n        let pageIDs=[];\n        data.forEach((page)=>{\n            page.parent=accountID;\n            page.accessToken=page.access_token;\n            let newProfile = Object.assign({}, Schema, {\n                owner: user._id,\n                manager: user._id,\n                connection: page,\n                network: \"facebook\"\n            });\n            newProfile.information.name = page.name;\n            newProfile.information.avatar = \"https://graph.facebook.com/\" + newProfile.connection.id + \"/picture?type=large\";\n            newProfile.type=\"page\";\n            //pageIDs.push(newProfile);\n            //return;\n            let matchPage = SocialAccounts.findOne({\"connection.id\":page.id});\n            if(matchPage){\n                //Page Added return Error\n                console.log(\"Page Already Exists\", page.id);\n                pageIDs.push({\n                    status: 'Error',\n                    fbId: page.id,\n                    name: page.name\n                });\n            }else{\n                let profileID = SocialAccounts.insert(newProfile);\n                newProfile._id = profileID;\n\n                Meteor.call(\"profile-get-stats\", newProfile);\n                pageIDs.push({\n                    status: 'Success',\n                    id: profileID,\n                    fbId: page.id,\n                    name: page.name\n                });\n            }\n        });\n\n        return pageIDs;\n    },\n    \"account-category-invite-proposal\": function(accountID, data){\n        //console.log(\"account-category-invite-proposal\", accountID, data);\n\n        let user=Meteor.user();\n        let userName = user.profile.name;\n\n        let action=\"Categoria\";\n        let proposal = data.category;\n        if(data.type===\"specialty\") {\n            action=\"Especialidad\";\n            proposal=(data.category?data.category:\"Sin Categoria\")+\" -> \"+data.specialty;\n        }\n\n        this.unblock();\n        let subject = \"Se ha sugerido una nueva \"+action;\n        let html = ((userName?userName:\"El usuario\")+\" (\" + user.emails[0].address + \" - \"+user._id+\")\") + \" ha sugerido una nueva \"+action+\" (\"+proposal+\")\";\n\n        Email.send({\n            from: Settings.email.noReply,\n            to: \"hello@viralizing.me\",\n            subject,\n            html\n        });\n\n    },\n    \"account-target-objective-proposal\":  function(accountID, data){\n        //console.log(\"account-target-objective-proposal\", accountID, data);\n\n        let user=Meteor.user();\n        let userName = user.profile.name;\n\n        let action=\"Meta\";\n        let proposal = data.objective;\n\n        this.unblock();\n        let subject = \"Se ha sugerido una nueva \"+action;\n        let html = ((userName?userName:\"El usuario\")+\" (\" + user.emails[0].address + \" - \"+user._id+\")\") + \" ha sugerido una nueva \"+action+\" (\"+proposal+\")\";\n\n        Email.send({\n            from: Settings.email.noReply,\n            to: \"hello@viralizing.me\",\n            subject,\n            html\n        });\n\n    },\n    \"autocreate-pages-related\": function(profileID){\n        let fbPages=Meteor.call(\"facebook-pages-list\",profileID).data;\n        let pageIDs = fbPages.map(page => page.id);\n        Meteor.call(\"connect-facebook-pages\", profileID, pageIDs);\n    },\n});\n\n"]},"sourceType":"script","hash":"cf7c514771d23fad89714d34a3c1464cc883f070"}
