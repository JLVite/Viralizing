{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/users/resolvers/users.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/server/schemas/users/resolvers/users.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/users/resolvers/users.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/server/schemas/users/resolvers/users.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/server/schemas/users/resolvers/users.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet HTTP;\nmodule.watch(require(\"meteor/http\"), {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  Query: {\n    user(root, args, context) {\n      const userID = context.userId || \"dzibKvJgaFFLskBZW\";\n      return Meteor.users.findOne(userID);\n    }\n\n  },\n  User: {\n    stripe: user => {\n      let data = Meteor.call(\"stripe_customers_get\", user);\n      data.balance = data.account_balance;\n      return data;\n    },\n    support: user => {\n      return (0, _objectSpread2.default)({}, user);\n    },\n    events: user => {\n      let data = Meteor.call(\"mixpanel_events_user\", user);\n      return data.map(e => ({\n        id: e.distinct_id,\n        name: e.name,\n        created: new Date(e.time),\n        properties: {\n          browser: e.properties.$browser,\n          url: e.properties.$current_url,\n          referrer: e.properties.$initial_referrer\n        }\n      }));\n    }\n  },\n  StripeUser: {\n    created: user => {\n      return new Date(user.created * 1000);\n    },\n    defaultCard: user => {\n      return user.sources.data.filter(s => s.id === user.default_source)[0];\n    },\n    cards: user => {\n      return user.sources.data.filter(s => s.object === \"card\");\n    },\n    banks: user => {\n      return user.sources.data.filter(s => s.object === \"bank_account\").map(s => ({\n        name: s.account_holder_name,\n        type: s.account_holder_type,\n        bank: s.bank_name,\n        country: s.country,\n        currency: s.currency,\n        id: s.id,\n        last4: s.last4\n      }));\n    },\n    subscriptions: user => {\n      return user.subscriptions.data.map(s => ({\n        created: new Date(s.created * 1000),\n        periodEnd: new Date(s.current_period_end * 1000),\n        periodStart: new Date(s.current_period_start * 1000),\n        id: s.id,\n        quantity: s.quantity,\n        startDate: new Date(s.start * 1000),\n        trialStart: s.trial_end ? new Date(s.trial_end) : null,\n        trialEnd: s.trial_start ? new Date(s.trial_start) : null,\n        plans: s.items.data.map(i => ({\n          created: new Date(i.created * 1000),\n          quantity: i.quantity,\n          amount: i.plan.amount,\n          currency: i.plan.currency,\n          name: i.plan.name,\n          interval: i.plan.interval,\n          intervalCount: i.plan.interval_count\n        }))\n      }));\n    },\n    charges: user => {\n      let charges = Meteor.call(\"stripe_charges_list\", {\n        customer: user.id,\n        limit: 100\n      });\n      return charges.data.map(c => ({\n        id: c.id,\n        amount: c.amount,\n        refunded: c.refunded,\n        refundedAmount: c.amount_refunded,\n        captured: c.captured,\n        date: new Date(c.created * 1000),\n        currency: c.currency,\n        description: c.description,\n        dispute: c.dispute,\n        failureCode: c.failureCode,\n        failureMessage: c.failure_message,\n        paid: c.paid,\n        status: c.status,\n        invoice: c.invoice\n      }));\n    },\n    invoices: user => {\n      let invoices = Meteor.call(\"stripe_invoices_list\", {\n        customer: user.id,\n        limit: 100\n      });\n      return invoices.data.map(i => ({\n        id: i.id,\n        amountDue: i.amount_due,\n        attempts: i.attempt_count,\n        nextAttempt: new Date(i.next_payment_attempt * 1000),\n        charge: i.charge,\n        closed: i.closed,\n        currency: i.currency,\n        date: new Date(i.date * 1000),\n        description: i.description,\n        discount: i.discount,\n        startingBalance: i.starting_balance,\n        endingBalance: i.ending_balance,\n        forgive: i.forgiven,\n        paid: i.paid,\n        periodEnd: new Date(i.period_end * 1000),\n        periodStart: new Date(i.period_start * 1000),\n        subtotal: i.subtotal,\n        tax: i.tax,\n        taxPercent: i.tax_percent,\n        total: i.total\n      }));\n    }\n  },\n  UserCoupon: {\n    start: coupon => {\n      return new Date(coupon.start * 1000);\n    },\n    end: coupon => {\n      return new Date(coupon.end * 1000);\n    }\n  },\n  UserSupport: {\n    tickets: user => {\n      let tickets = Meteor.call(\"zendesk_tickets_get_by_user\", user);\n      return tickets.map(t => ({\n        id: t.id,\n        assignee: t.assignee_id,\n        collaborators: t.collaborator_ids,\n        created: new Date(t.created_at),\n        updated: new Date(t.updated_at),\n        priority: t.priority,\n        requester: t.requester_id,\n        satisfaction: t.satisfaction_rating,\n        status: t.status,\n        subject: t.subject,\n        description: t.description,\n        tags: t.tags,\n        comments: []\n      }));\n    }\n  },\n  ZendeskTicket: {\n    assignee: ticket => {\n      let user = Meteor.call(\"zendesk_user_get\", ticket.assignee);\n\n      if (!user) {\n        return null;\n      }\n\n      let u = user;\n      return {\n        id: u.id,\n        email: u.email,\n        name: u.name,\n        role: u.role,\n        created: new Date(u.created_at),\n        updated: new Date(u.updated_at),\n        tags: u.tags\n      };\n    },\n    requester: ticket => {\n      let user = Meteor.call(\"zendesk_user_get\", ticket.requester);\n\n      if (!user) {\n        return null;\n      }\n\n      let u = user;\n      return {\n        id: u.id,\n        email: u.email,\n        name: u.name,\n        role: u.role,\n        created: new Date(u.created_at),\n        updated: new Date(u.updated_at),\n        tags: u.tags\n      };\n    },\n    comments: ticket => {\n      let comments = Meteor.call(\"zendesk_tickets_get_comments\", ticket.id);\n      return comments.comments.map(c => ({\n        id: c.id,\n        author: c.author_id,\n        body: c.body,\n        channel: c.via.channel,\n        created: new Date(c.created_at)\n      }));\n    }\n  },\n  ZendeskComment: {\n    author: comment => {\n      let user = Meteor.call(\"zendesk_user_get\", comment.author);\n\n      if (!user) {\n        return null;\n      }\n\n      let u = user;\n      return {\n        id: u.id,\n        email: u.email,\n        name: u.name,\n        role: u.role,\n        created: new Date(u.created_at),\n        updated: new Date(u.updated_at),\n        tags: u.tags\n      };\n    }\n  },\n  StripeCharge: {\n    invoice: charge => {\n      if (!charge.invoice) {\n        return null;\n      }\n\n      let i = Meteor.call(\"stripe_invoices_get\", charge.invoice);\n      return {\n        id: i.id,\n        amountDue: i.amount_due,\n        attempts: i.attempt_count,\n        nextAttempt: new Date(i.next_payment_attempt * 1000),\n        charge: i.charge,\n        closed: i.closed,\n        currency: i.currency,\n        date: new Date(i.date * 1000),\n        description: i.description,\n        discount: i.discount,\n        startingBalance: i.starting_balance,\n        endingBalance: i.ending_balance,\n        forgive: i.forgiven,\n        paid: i.paid,\n        periodEnd: new Date(i.period_end * 1000),\n        periodStart: new Date(i.period_start * 1000),\n        subtotal: i.subtotal,\n        tax: i.tax,\n        taxPercent: i.tax_percent,\n        total: i.total\n      };\n    }\n  },\n  StripeInvoice: {\n    charge: invoice => {\n      if (!invoice.charge) {\n        return null;\n      }\n\n      let c = Meteor.call(\"stripe_charges_get\", invoice.charge);\n      return {\n        id: c.id,\n        amount: c.amount,\n        refunded: c.refunded,\n        refundedAmount: c.amount_refunded,\n        captured: c.captured,\n        date: new Date(c.created * 1000),\n        currency: c.currency,\n        description: c.description,\n        dispute: c.dispute,\n        failureCode: c.failureCode,\n        failureMessage: c.failure_message,\n        paid: c.paid,\n        status: c.status,\n        invoice: c.invoice\n      };\n    }\n  }\n});","map":{"version":3,"sources":["imports/server/schemas/users/resolvers/users.jsx"],"names":["Meteor","module","watch","require","v","HTTP","exportDefault","Query","user","root","args","context","userID","userId","users","findOne","User","stripe","data","call","balance","account_balance","support","events","map","e","id","distinct_id","name","created","Date","time","properties","browser","$browser","url","$current_url","referrer","$initial_referrer","StripeUser","defaultCard","sources","filter","s","default_source","cards","object","banks","account_holder_name","type","account_holder_type","bank","bank_name","country","currency","last4","subscriptions","periodEnd","current_period_end","periodStart","current_period_start","quantity","startDate","start","trialStart","trial_end","trialEnd","trial_start","plans","items","i","amount","plan","interval","intervalCount","interval_count","charges","customer","limit","c","refunded","refundedAmount","amount_refunded","captured","date","description","dispute","failureCode","failureMessage","failure_message","paid","status","invoice","invoices","amountDue","amount_due","attempts","attempt_count","nextAttempt","next_payment_attempt","charge","closed","discount","startingBalance","starting_balance","endingBalance","ending_balance","forgive","forgiven","period_end","period_start","subtotal","tax","taxPercent","tax_percent","total","UserCoupon","coupon","end","UserSupport","tickets","t","assignee","assignee_id","collaborators","collaborator_ids","created_at","updated","updated_at","priority","requester","requester_id","satisfaction","satisfaction_rating","subject","tags","comments","ZendeskTicket","ticket","u","email","role","author","author_id","body","channel","via","ZendeskComment","comment","StripeCharge","StripeInvoice"],"mappings":"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","sourcesContent":["import {Meteor} from 'meteor/meteor';\nimport { HTTP } from 'meteor/http'\n\nexport default {\n    Query: {\n        user(root, args, context) {\n            const userID = context.userId || \"dzibKvJgaFFLskBZW\";\n\n            return Meteor.users.findOne(userID);\n        }\n    },\n    User: {\n        stripe: (user) => {\n            let data = Meteor.call(\"stripe_customers_get\", user);\n            data.balance = data.account_balance;\n            return data\n        },\n        support: (user) => {\n            return {...user}\n        },\n        events: (user) => {\n            let data = Meteor.call(\"mixpanel_events_user\", user);\n            return data.map((e)=>({\n                id:e.distinct_id,\n                name: e.name,\n                created: new Date(e.time),\n                properties: {\n                    browser: e.properties.$browser,\n                    url: e.properties.$current_url,\n                    referrer: e.properties.$initial_referrer\n                }\n            }));\n        },\n    },\n    StripeUser: {\n        created: (user) => {\n            return new Date(user.created * 1000)\n        },\n        defaultCard: (user) => {\n            return user.sources.data.filter((s) => s.id === user.default_source)[0];\n        },\n        cards: (user) => {\n            return user.sources.data.filter((s) => s.object === \"card\");\n        },\n        banks: (user) => {\n            return user.sources.data.filter((s) => s.object === \"bank_account\").map((s) => ({\n                name: s.account_holder_name,\n                type: s.account_holder_type,\n                bank: s.bank_name,\n                country: s.country,\n                currency: s.currency,\n                id: s.id,\n                last4: s.last4\n            }));\n        },\n        subscriptions: (user) => {\n            return user.subscriptions.data.map((s) => ({\n                created: new Date(s.created * 1000),\n                periodEnd: new Date(s.current_period_end * 1000),\n                periodStart: new Date(s.current_period_start * 1000),\n                id: s.id,\n                quantity: s.quantity,\n                startDate: new Date(s.start * 1000),\n                trialStart: s.trial_end ? new Date(s.trial_end) : null,\n                trialEnd: s.trial_start ? new Date(s.trial_start) : null,\n                plans: s.items.data.map((i) => ({\n                    created: new Date(i.created * 1000),\n                    quantity: i.quantity,\n                    amount: i.plan.amount,\n                    currency: i.plan.currency,\n                    name: i.plan.name,\n                    interval: i.plan.interval,\n                    intervalCount: i.plan.interval_count\n                }))\n            }));\n        },\n        charges: (user) => {\n            let charges = Meteor.call(\"stripe_charges_list\", {customer: user.id, limit: 100});\n            return charges.data.map((c) => ({\n                id: c.id,\n                amount: c.amount,\n                refunded: c.refunded,\n                refundedAmount: c.amount_refunded,\n                captured: c.captured,\n                date: new Date(c.created * 1000),\n                currency: c.currency,\n                description: c.description,\n                dispute: c.dispute,\n                failureCode: c.failureCode,\n                failureMessage: c.failure_message,\n                paid: c.paid,\n                status: c.status,\n                invoice: c.invoice\n            }))\n        },\n        invoices: (user) => {\n            let invoices = Meteor.call(\"stripe_invoices_list\", {customer: user.id, limit: 100});\n            return invoices.data.map((i) => ({\n                id: i.id,\n                amountDue: i.amount_due,\n                attempts: i.attempt_count,\n                nextAttempt: new Date(i.next_payment_attempt * 1000),\n                charge: i.charge,\n                closed: i.closed,\n                currency: i.currency,\n                date: new Date(i.date * 1000),\n                description: i.description,\n                discount: i.discount,\n                startingBalance: i.starting_balance,\n                endingBalance: i.ending_balance,\n                forgive: i.forgiven,\n                paid: i.paid,\n                periodEnd: new Date(i.period_end * 1000),\n                periodStart: new Date(i.period_start * 1000),\n                subtotal: i.subtotal,\n                tax: i.tax,\n                taxPercent: i.tax_percent,\n                total: i.total\n            }))\n        },\n    },\n    UserCoupon: {\n        start: (coupon) => {\n            return new Date(coupon.start * 1000)\n        },\n        end: (coupon) => {\n            return new Date(coupon.end * 1000)\n        },\n    },\n    UserSupport: {\n        tickets: (user) => {\n            let tickets=Meteor.call(\"zendesk_tickets_get_by_user\",user);\n            return tickets.map((t)=>({\n                id:t.id,\n                assignee:t.assignee_id,\n                collaborators: t.collaborator_ids,\n                created: new Date(t.created_at),\n                updated: new Date(t.updated_at),\n                priority: t.priority,\n                requester: t.requester_id,\n                satisfaction: t.satisfaction_rating,\n                status: t.status,\n                subject: t.subject,\n                description: t.description,\n                tags: t.tags,\n                comments: []\n            }));\n        }\n    },\n    ZendeskTicket: {\n        assignee: (ticket) => {\n            let user=Meteor.call(\"zendesk_user_get\",ticket.assignee);\n            if(!user){\n                return null;\n            }\n            let u=user;\n            return {\n                id: u.id,\n                email: u.email,\n                name: u.name,\n                role: u.role,\n                created: new Date(u.created_at),\n                updated: new Date(u.updated_at),\n                tags: u.tags\n            }\n        },\n        requester: (ticket) => {\n            let user=Meteor.call(\"zendesk_user_get\",ticket.requester);\n            if(!user){\n                return null;\n            }\n            let u=user;\n            return {\n                id: u.id,\n                email: u.email,\n                name: u.name,\n                role: u.role,\n                created: new Date(u.created_at),\n                updated: new Date(u.updated_at),\n                tags: u.tags\n            }\n        },\n        comments: (ticket) => {\n            let comments=Meteor.call(\"zendesk_tickets_get_comments\",ticket.id);\n            return comments.comments.map((c)=>({\n                id: c.id,\n                author: c.author_id,\n                body: c.body,\n                channel: c.via.channel,\n                created: new Date(c.created_at)\n            }));\n        }\n    },\n    ZendeskComment: {\n        author: (comment) => {\n            let user=Meteor.call(\"zendesk_user_get\",comment.author);\n            if(!user){\n                return null;\n            }\n            let u=user;\n            return {\n                id: u.id,\n                email: u.email,\n                name: u.name,\n                role: u.role,\n                created: new Date(u.created_at),\n                updated: new Date(u.updated_at),\n                tags: u.tags\n            }\n        }\n    },\n    StripeCharge: {\n        invoice: (charge) => {\n            if(!charge.invoice){\n                return null\n            }\n            let i = Meteor.call(\"stripe_invoices_get\", charge.invoice);\n\n            return {\n                id: i.id,\n                amountDue: i.amount_due,\n                attempts: i.attempt_count,\n                nextAttempt: new Date(i.next_payment_attempt * 1000),\n                charge: i.charge,\n                closed: i.closed,\n                currency: i.currency,\n                date: new Date(i.date * 1000),\n                description: i.description,\n                discount: i.discount,\n                startingBalance: i.starting_balance,\n                endingBalance: i.ending_balance,\n                forgive: i.forgiven,\n                paid: i.paid,\n                periodEnd: new Date(i.period_end * 1000),\n                periodStart: new Date(i.period_start * 1000),\n                subtotal: i.subtotal,\n                tax: i.tax,\n                taxPercent: i.tax_percent,\n                total: i.total\n            }\n        },\n    },\n    StripeInvoice: {\n        charge: (invoice) => {\n            if(!invoice.charge){\n                return null\n            }\n            let c = Meteor.call(\"stripe_charges_get\", invoice.charge);\n            return {\n                id: c.id,\n                amount: c.amount,\n                refunded: c.refunded,\n                refundedAmount: c.amount_refunded,\n                captured: c.captured,\n                date: new Date(c.created * 1000),\n                currency: c.currency,\n                description: c.description,\n                dispute: c.dispute,\n                failureCode: c.failureCode,\n                failureMessage: c.failure_message,\n                paid: c.paid,\n                status: c.status,\n                invoice: c.invoice\n            }\n        },\n    }\n};"]},"sourceType":"script","hash":"e7f51d7e71dee9c255be5bbd2de62b38d0dd3210"}
