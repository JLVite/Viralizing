{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/packages/apollo/src/main-server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/apollo/src/main-server.js","filename":"/home/blackstoneteam/repos/viralizing-web/app/packages/apollo/src/main-server.js","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/packages/apollo/src/main-server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/apollo/src/main-server.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  createApolloServer: function () {\n    return createApolloServer;\n  },\n  getUserForContext: function () {\n    return getUserForContext;\n  },\n  addCurrentUserToContext: function () {\n    return addCurrentUserToContext;\n  }\n});\nvar graphqlExpress, graphiqlExpress;\nmodule.watch(require(\"graphql-server-express\"), {\n  graphqlExpress: function (v) {\n    graphqlExpress = v;\n  },\n  graphiqlExpress: function (v) {\n    graphiqlExpress = v;\n  }\n}, 0);\nvar bodyParser;\nmodule.watch(require(\"body-parser\"), {\n  \"default\": function (v) {\n    bodyParser = v;\n  }\n}, 1);\nvar express;\nmodule.watch(require(\"express\"), {\n  \"default\": function (v) {\n    express = v;\n  }\n}, 2);\nvar Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar WebApp;\nmodule.watch(require(\"meteor/webapp\"), {\n  WebApp: function (v) {\n    WebApp = v;\n  }\n}, 4);\nvar Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 5);\nvar check;\nmodule.watch(require(\"meteor/check\"), {\n  check: function (v) {\n    check = v;\n  }\n}, 6);\nmodule.watch(require(\"./main-client\"), {\n  createMeteorNetworkInterface: function (v) {\n    exports.createMeteorNetworkInterface = v;\n  },\n  meteorClientConfig: function (v) {\n    exports.meteorClientConfig = v;\n  }\n}, 7);\n// default server configuration object\nvar defaultServerConfig = {\n  // graphql endpoint\n  path: '/graphql',\n  // additional Express server configuration (enable CORS there for instance)\n  configServer: function (graphQLServer) {},\n  // enable GraphiQL only in development mode\n  graphiql: Meteor.isDevelopment,\n  // GraphiQL endpoint\n  graphiqlPath: '/graphiql',\n  // GraphiQL options (default: log the current user in your request)\n  graphiqlOptions: {\n    passHeader: \"'meteor-login-token': localStorage['Meteor.loginToken']\"\n  }\n}; // default graphql options to enhance the graphQLExpress server\n\nvar defaultGraphQLOptions = {\n  // ensure that a context object is defined for the resolvers\n  context: {},\n  // error formatting\n  formatError: function (e) {\n    return {\n      message: e.message,\n      locations: e.locations,\n      path: e.path\n    };\n  },\n  // additional debug logging if execution errors occur in dev mode\n  debug: Meteor.isDevelopment\n};\n\nvar createApolloServer = function () {\n  var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var customConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // create a new server config object based on the default server config\n  // defined above and the custom server config passed to this function\n  var config = (0, _objectSpread2.default)({}, defaultServerConfig, customConfig);\n\n  if (customConfig.graphiqlOptions) {\n    config.graphiqlOptions = (0, _objectSpread2.default)({}, defaultServerConfig.graphiqlOptions, customConfig.graphiqlOptions);\n  } // the Meteor GraphQL server is an Express server\n\n\n  var graphQLServer = express(); // enhance the GraphQL server with possible express middlewares\n\n  config.configServer(graphQLServer); // GraphQL endpoint, enhanced with JSON body parser\n\n  graphQLServer.use(config.path, bodyParser.json(), graphqlExpress(function () {\n    function _callee(req) {\n      var customOptionsObject, options, loginToken, userContext, context;\n      return _regenerator.default.async(function () {\n        function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                // graphqlExpress can accept a function returning the option object\n                customOptionsObject = typeof customOptions === 'function' ? customOptions(req) : customOptions; // create a new apollo options object based on the default apollo options\n                // defined above and the custom apollo options passed to this function\n\n                options = (0, _objectSpread2.default)({}, defaultGraphQLOptions, customOptionsObject); // get the login token from the headers request, given by the Meteor's\n                // network interface middleware if enabled\n\n                loginToken = req.headers['meteor-login-token']; // get the current user & the user id for the context\n\n                _context.next = 6;\n                return _regenerator.default.awrap(getUserForContext(loginToken));\n\n              case 6:\n                userContext = _context.sent;\n                // context can accept a function returning the context object\n                context = typeof options.context === 'function' ? options.context(userContext) : (0, _objectSpread2.default)({}, options.context, userContext); // return the configured options to be used by the graphql server\n\n                return _context.abrupt(\"return\", (0, _objectSpread2.default)({}, options, {\n                  context: context\n                }));\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](0);\n                // something went bad when configuring the graphql server, we do not\n                // swallow the error and display it in the server-side logs\n                console.error('[Meteor Apollo Integration] Something bad happened when handling a request on the GraphQL server. Your GraphQL server is not working as expected:', _context.t0); // return the default graphql options anyway\n\n                return _context.abrupt(\"return\", defaultGraphQLOptions);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }\n\n        return _callee$;\n      }(), null, this, [[0, 11]]);\n    }\n\n    return _callee;\n  }())); // Start GraphiQL if enabled\n\n  if (config.graphiql) {\n    // GraphiQL endpoint\n    graphQLServer.use(config.graphiqlPath, graphiqlExpress((0, _objectSpread2.default)({}, config.graphiqlOptions, {\n      // endpoint of the graphql server where to send requests\n      endpointURL: config.path\n    })));\n  } // this binds the specified paths to the Express server running Apollo + GraphiQL\n\n\n  WebApp.connectHandlers.use(graphQLServer);\n};\n\nvar getUserForContext = function () {\n  function _callee2(loginToken) {\n    var hashedToken, currentUser, tokenInformation, expiresAt, isExpired;\n    return _regenerator.default.async(function () {\n      function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!loginToken) {\n                _context2.next = 12;\n                break;\n              }\n\n              // throw an error if the token is not a string\n              check(loginToken, String); // the hashed token is the key to find the possible current user in the db\n\n              hashedToken = Accounts._hashLoginToken(loginToken); // get the possible current user from the database\n              // note: no need of a fiber aware findOne + a fiber aware call break tests\n              // runned with practicalmeteor:mocha if eslint is enabled\n\n              _context2.next = 5;\n              return _regenerator.default.awrap(Meteor.users.rawCollection().findOne({\n                'services.resume.loginTokens.hashedToken': hashedToken\n              }));\n\n            case 5:\n              currentUser = _context2.sent;\n\n              if (!currentUser) {\n                _context2.next = 12;\n                break;\n              }\n\n              // find the right login token corresponding, the current user may have\n              // several sessions logged on different browsers / computers\n              tokenInformation = currentUser.services.resume.loginTokens.find(function (tokenInfo) {\n                return tokenInfo.hashedToken === hashedToken;\n              }); // get an exploitable token expiration date\n\n              expiresAt = Accounts._tokenExpiration(tokenInformation.when); // true if the token is expired\n\n              isExpired = expiresAt < new Date(); // if the token is still valid, give access to the current user\n              // information in the resolvers context\n\n              if (isExpired) {\n                _context2.next = 12;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                user: currentUser,\n                userId: currentUser._id\n              });\n\n            case 12:\n              return _context2.abrupt(\"return\", {});\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }\n\n      return _callee2$;\n    }(), null, this);\n  }\n\n  return _callee2;\n}();\n\nvar addCurrentUserToContext = function () {\n  function _callee3(context, loginToken) {\n    var userContext;\n    return _regenerator.default.async(function () {\n      function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(getUserForContext(loginToken));\n\n            case 2:\n              userContext = _context3.sent;\n              return _context3.abrupt(\"return\", (0, _objectSpread2.default)({}, context, userContext));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }\n\n      return _callee3$;\n    }(), null, this);\n  }\n\n  return _callee3;\n}();","map":{"version":3,"sources":["packages/apollo/src/main-server.js"],"names":["module","export","createApolloServer","getUserForContext","addCurrentUserToContext","graphqlExpress","graphiqlExpress","watch","require","v","bodyParser","express","Meteor","WebApp","Accounts","check","createMeteorNetworkInterface","exports","meteorClientConfig","defaultServerConfig","path","configServer","graphiql","isDevelopment","graphiqlPath","graphiqlOptions","passHeader","defaultGraphQLOptions","context","formatError","message","e","locations","debug","customOptions","customConfig","config","graphQLServer","use","json","req","customOptionsObject","options","loginToken","headers","userContext","console","error","endpointURL","connectHandlers","String","hashedToken","_hashLoginToken","users","rawCollection","findOne","currentUser","tokenInformation","services","resume","loginTokens","find","tokenInfo","expiresAt","_tokenExpiration","when","isExpired","Date","user","userId","_id"],"mappings":"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","sourcesContent":["import { graphqlExpress, graphiqlExpress } from 'graphql-server-express';\nimport bodyParser from 'body-parser';\nimport express from 'express';\n\nimport { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\n\n// import the configuration functions from the client so they can be used\n// during server-side rendering for instance\nexport { createMeteorNetworkInterface, meteorClientConfig } from './main-client';\n\n// default server configuration object\nconst defaultServerConfig = {\n  // graphql endpoint\n  path: '/graphql',\n  // additional Express server configuration (enable CORS there for instance)\n  configServer: graphQLServer => {},\n  // enable GraphiQL only in development mode\n  graphiql: Meteor.isDevelopment,\n  // GraphiQL endpoint\n  graphiqlPath: '/graphiql',\n  // GraphiQL options (default: log the current user in your request)\n  graphiqlOptions: {\n    passHeader: \"'meteor-login-token': localStorage['Meteor.loginToken']\",\n  },\n};\n\n// default graphql options to enhance the graphQLExpress server\nconst defaultGraphQLOptions = {\n  // ensure that a context object is defined for the resolvers\n  context: {},\n  // error formatting\n  formatError: e => ({\n    message: e.message,\n    locations: e.locations,\n    path: e.path,\n  }),\n  // additional debug logging if execution errors occur in dev mode\n  debug: Meteor.isDevelopment,\n};\n\nexport const createApolloServer = (customOptions = {}, customConfig = {}) => {\n  // create a new server config object based on the default server config\n  // defined above and the custom server config passed to this function\n  const config = {\n    ...defaultServerConfig,\n    ...customConfig,\n  };\n\n  if (customConfig.graphiqlOptions) {\n    config.graphiqlOptions = {\n      ...defaultServerConfig.graphiqlOptions,\n      ...customConfig.graphiqlOptions,\n    };\n  }\n\n  // the Meteor GraphQL server is an Express server\n  const graphQLServer = express();\n\n  // enhance the GraphQL server with possible express middlewares\n  config.configServer(graphQLServer);\n\n  // GraphQL endpoint, enhanced with JSON body parser\n  graphQLServer.use(\n    config.path,\n    bodyParser.json(),\n    graphqlExpress(async req => {\n      try {\n        // graphqlExpress can accept a function returning the option object\n        const customOptionsObject = typeof customOptions === 'function'\n          ? customOptions(req)\n          : customOptions;\n\n        // create a new apollo options object based on the default apollo options\n        // defined above and the custom apollo options passed to this function\n        const options = {\n          ...defaultGraphQLOptions,\n          ...customOptionsObject,\n        };\n\n        // get the login token from the headers request, given by the Meteor's\n        // network interface middleware if enabled\n        const loginToken = req.headers['meteor-login-token'];\n\n        // get the current user & the user id for the context\n        const userContext = await getUserForContext(loginToken);\n\n        // context can accept a function returning the context object\n        const context = typeof options.context === 'function'\n          ? options.context(userContext)\n          : { ...options.context, ...userContext };\n\n        // return the configured options to be used by the graphql server\n        return {\n          ...options,\n          context,\n        };\n      } catch (error) {\n        // something went bad when configuring the graphql server, we do not\n        // swallow the error and display it in the server-side logs\n        console.error(\n          '[Meteor Apollo Integration] Something bad happened when handling a request on the GraphQL server. Your GraphQL server is not working as expected:',\n          error\n        );\n\n        // return the default graphql options anyway\n        return defaultGraphQLOptions;\n      }\n    })\n  );\n\n  // Start GraphiQL if enabled\n  if (config.graphiql) {\n    // GraphiQL endpoint\n    graphQLServer.use(\n      config.graphiqlPath,\n      graphiqlExpress({\n        // GraphiQL options\n        ...config.graphiqlOptions,\n        // endpoint of the graphql server where to send requests\n        endpointURL: config.path,\n      })\n    );\n  }\n  // this binds the specified paths to the Express server running Apollo + GraphiQL\n  WebApp.connectHandlers.use(graphQLServer);\n};\n\nexport const getUserForContext = async loginToken => {\n  // there is a possible current user connected!\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String);\n\n    // the hashed token is the key to find the possible current user in the db\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n    const currentUser = await Meteor.users.rawCollection().findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken,\n    });\n\n    // the current user exists\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(\n        tokenInfo => tokenInfo.hashedToken === hashedToken\n      );\n\n      // get an exploitable token expiration date\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when);\n\n      // true if the token is expired\n      const isExpired = expiresAt < new Date();\n\n      // if the token is still valid, give access to the current user\n      // information in the resolvers context\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id,\n        };\n      }\n    }\n  }\n\n  return {};\n};\n\n// take the existing context and return a new extended context with the current\n// user if relevant (i.e. valid login token)\nexport const addCurrentUserToContext = async (context, loginToken) => {\n  const userContext = await getUserForContext(loginToken);\n  return {\n    ...context,\n    ...userContext,\n  };\n};\n"]},"sourceType":"script","hash":"45e3b49ab214b7f6cca5d3f390e9be565539b501"}
