{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/packages/apollo/src/main-server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/apollo/src/main-server.js","filename":"/home/blackstoneteam/repos/viralizing-web/app/packages/apollo/src/main-server.js","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/packages/apollo/src/main-server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/apollo/src/main-server.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  createApolloServer: () => createApolloServer,\n  getUserForContext: () => getUserForContext,\n  addCurrentUserToContext: () => addCurrentUserToContext\n});\nlet graphqlExpress, graphiqlExpress;\nmodule.watch(require(\"graphql-server-express\"), {\n  graphqlExpress(v) {\n    graphqlExpress = v;\n  },\n\n  graphiqlExpress(v) {\n    graphiqlExpress = v;\n  }\n\n}, 0);\nlet bodyParser;\nmodule.watch(require(\"body-parser\"), {\n  default(v) {\n    bodyParser = v;\n  }\n\n}, 1);\nlet express;\nmodule.watch(require(\"express\"), {\n  default(v) {\n    express = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet WebApp;\nmodule.watch(require(\"meteor/webapp\"), {\n  WebApp(v) {\n    WebApp = v;\n  }\n\n}, 4);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 5);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 6);\nmodule.watch(require(\"./main-client\"), {\n  createMeteorNetworkInterface(v) {\n    exports.createMeteorNetworkInterface = v;\n  },\n\n  meteorClientConfig(v) {\n    exports.meteorClientConfig = v;\n  }\n\n}, 7);\n// default server configuration object\nconst defaultServerConfig = {\n  // graphql endpoint\n  path: '/graphql',\n  // additional Express server configuration (enable CORS there for instance)\n  configServer: graphQLServer => {},\n  // enable GraphiQL only in development mode\n  graphiql: Meteor.isDevelopment,\n  // GraphiQL endpoint\n  graphiqlPath: '/graphiql',\n  // GraphiQL options (default: log the current user in your request)\n  graphiqlOptions: {\n    passHeader: \"'meteor-login-token': localStorage['Meteor.loginToken']\"\n  }\n}; // default graphql options to enhance the graphQLExpress server\n\nconst defaultGraphQLOptions = {\n  // ensure that a context object is defined for the resolvers\n  context: {},\n  // error formatting\n  formatError: e => ({\n    message: e.message,\n    locations: e.locations,\n    path: e.path\n  }),\n  // additional debug logging if execution errors occur in dev mode\n  debug: Meteor.isDevelopment\n};\n\nconst createApolloServer = (customOptions = {}, customConfig = {}) => {\n  // create a new server config object based on the default server config\n  // defined above and the custom server config passed to this function\n  const config = (0, _objectSpread2.default)({}, defaultServerConfig, customConfig);\n\n  if (customConfig.graphiqlOptions) {\n    config.graphiqlOptions = (0, _objectSpread2.default)({}, defaultServerConfig.graphiqlOptions, customConfig.graphiqlOptions);\n  } // the Meteor GraphQL server is an Express server\n\n\n  const graphQLServer = express(); // enhance the GraphQL server with possible express middlewares\n\n  config.configServer(graphQLServer); // GraphQL endpoint, enhanced with JSON body parser\n\n  graphQLServer.use(config.path, bodyParser.json(), graphqlExpress(req => Promise.asyncApply(() => {\n    try {\n      // graphqlExpress can accept a function returning the option object\n      const customOptionsObject = typeof customOptions === 'function' ? customOptions(req) : customOptions; // create a new apollo options object based on the default apollo options\n      // defined above and the custom apollo options passed to this function\n\n      const options = (0, _objectSpread2.default)({}, defaultGraphQLOptions, customOptionsObject); // get the login token from the headers request, given by the Meteor's\n      // network interface middleware if enabled\n\n      const loginToken = req.headers['meteor-login-token']; // get the current user & the user id for the context\n\n      const userContext = Promise.await(getUserForContext(loginToken)); // context can accept a function returning the context object\n\n      const context = typeof options.context === 'function' ? options.context(userContext) : (0, _objectSpread2.default)({}, options.context, userContext); // return the configured options to be used by the graphql server\n\n      return (0, _objectSpread2.default)({}, options, {\n        context\n      });\n    } catch (error) {\n      // something went bad when configuring the graphql server, we do not\n      // swallow the error and display it in the server-side logs\n      console.error('[Meteor Apollo Integration] Something bad happened when handling a request on the GraphQL server. Your GraphQL server is not working as expected:', error); // return the default graphql options anyway\n\n      return defaultGraphQLOptions;\n    }\n  }))); // Start GraphiQL if enabled\n\n  if (config.graphiql) {\n    // GraphiQL endpoint\n    graphQLServer.use(config.graphiqlPath, graphiqlExpress((0, _objectSpread2.default)({}, config.graphiqlOptions, {\n      // endpoint of the graphql server where to send requests\n      endpointURL: config.path\n    })));\n  } // this binds the specified paths to the Express server running Apollo + GraphiQL\n\n\n  WebApp.connectHandlers.use(graphQLServer);\n};\n\nconst getUserForContext = loginToken => Promise.asyncApply(() => {\n  // there is a possible current user connected!\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String); // the hashed token is the key to find the possible current user in the db\n\n    const hashedToken = Accounts._hashLoginToken(loginToken); // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n\n\n    const currentUser = Promise.await(Meteor.users.rawCollection().findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken\n    })); // the current user exists\n\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(tokenInfo => tokenInfo.hashedToken === hashedToken); // get an exploitable token expiration date\n\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when); // true if the token is expired\n\n\n      const isExpired = expiresAt < new Date(); // if the token is still valid, give access to the current user\n      // information in the resolvers context\n\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id\n        };\n      }\n    }\n  }\n\n  return {};\n});\n\nconst addCurrentUserToContext = (context, loginToken) => Promise.asyncApply(() => {\n  const userContext = Promise.await(getUserForContext(loginToken));\n  return (0, _objectSpread2.default)({}, context, userContext);\n});","map":{"version":3,"sources":["packages/apollo/src/main-server.js"],"names":["module","export","createApolloServer","getUserForContext","addCurrentUserToContext","graphqlExpress","graphiqlExpress","watch","require","v","bodyParser","default","express","Meteor","WebApp","Accounts","check","createMeteorNetworkInterface","exports","meteorClientConfig","defaultServerConfig","path","configServer","graphQLServer","graphiql","isDevelopment","graphiqlPath","graphiqlOptions","passHeader","defaultGraphQLOptions","context","formatError","e","message","locations","debug","customOptions","customConfig","config","use","json","req","customOptionsObject","options","loginToken","headers","userContext","error","console","endpointURL","connectHandlers","String","hashedToken","_hashLoginToken","currentUser","users","rawCollection","findOne","tokenInformation","services","resume","loginTokens","find","tokenInfo","expiresAt","_tokenExpiration","when","isExpired","Date","user","userId","_id"],"mappings":"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","sourcesContent":["import { graphqlExpress, graphiqlExpress } from 'graphql-server-express';\nimport bodyParser from 'body-parser';\nimport express from 'express';\n\nimport { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\n\n// import the configuration functions from the client so they can be used\n// during server-side rendering for instance\nexport { createMeteorNetworkInterface, meteorClientConfig } from './main-client';\n\n// default server configuration object\nconst defaultServerConfig = {\n  // graphql endpoint\n  path: '/graphql',\n  // additional Express server configuration (enable CORS there for instance)\n  configServer: graphQLServer => {},\n  // enable GraphiQL only in development mode\n  graphiql: Meteor.isDevelopment,\n  // GraphiQL endpoint\n  graphiqlPath: '/graphiql',\n  // GraphiQL options (default: log the current user in your request)\n  graphiqlOptions: {\n    passHeader: \"'meteor-login-token': localStorage['Meteor.loginToken']\",\n  },\n};\n\n// default graphql options to enhance the graphQLExpress server\nconst defaultGraphQLOptions = {\n  // ensure that a context object is defined for the resolvers\n  context: {},\n  // error formatting\n  formatError: e => ({\n    message: e.message,\n    locations: e.locations,\n    path: e.path,\n  }),\n  // additional debug logging if execution errors occur in dev mode\n  debug: Meteor.isDevelopment,\n};\n\nexport const createApolloServer = (customOptions = {}, customConfig = {}) => {\n  // create a new server config object based on the default server config\n  // defined above and the custom server config passed to this function\n  const config = {\n    ...defaultServerConfig,\n    ...customConfig,\n  };\n\n  if (customConfig.graphiqlOptions) {\n    config.graphiqlOptions = {\n      ...defaultServerConfig.graphiqlOptions,\n      ...customConfig.graphiqlOptions,\n    };\n  }\n\n  // the Meteor GraphQL server is an Express server\n  const graphQLServer = express();\n\n  // enhance the GraphQL server with possible express middlewares\n  config.configServer(graphQLServer);\n\n  // GraphQL endpoint, enhanced with JSON body parser\n  graphQLServer.use(\n    config.path,\n    bodyParser.json(),\n    graphqlExpress(async req => {\n      try {\n        // graphqlExpress can accept a function returning the option object\n        const customOptionsObject = typeof customOptions === 'function'\n          ? customOptions(req)\n          : customOptions;\n\n        // create a new apollo options object based on the default apollo options\n        // defined above and the custom apollo options passed to this function\n        const options = {\n          ...defaultGraphQLOptions,\n          ...customOptionsObject,\n        };\n\n        // get the login token from the headers request, given by the Meteor's\n        // network interface middleware if enabled\n        const loginToken = req.headers['meteor-login-token'];\n\n        // get the current user & the user id for the context\n        const userContext = await getUserForContext(loginToken);\n\n        // context can accept a function returning the context object\n        const context = typeof options.context === 'function'\n          ? options.context(userContext)\n          : { ...options.context, ...userContext };\n\n        // return the configured options to be used by the graphql server\n        return {\n          ...options,\n          context,\n        };\n      } catch (error) {\n        // something went bad when configuring the graphql server, we do not\n        // swallow the error and display it in the server-side logs\n        console.error(\n          '[Meteor Apollo Integration] Something bad happened when handling a request on the GraphQL server. Your GraphQL server is not working as expected:',\n          error\n        );\n\n        // return the default graphql options anyway\n        return defaultGraphQLOptions;\n      }\n    })\n  );\n\n  // Start GraphiQL if enabled\n  if (config.graphiql) {\n    // GraphiQL endpoint\n    graphQLServer.use(\n      config.graphiqlPath,\n      graphiqlExpress({\n        // GraphiQL options\n        ...config.graphiqlOptions,\n        // endpoint of the graphql server where to send requests\n        endpointURL: config.path,\n      })\n    );\n  }\n  // this binds the specified paths to the Express server running Apollo + GraphiQL\n  WebApp.connectHandlers.use(graphQLServer);\n};\n\nexport const getUserForContext = async loginToken => {\n  // there is a possible current user connected!\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String);\n\n    // the hashed token is the key to find the possible current user in the db\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n    const currentUser = await Meteor.users.rawCollection().findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken,\n    });\n\n    // the current user exists\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(\n        tokenInfo => tokenInfo.hashedToken === hashedToken\n      );\n\n      // get an exploitable token expiration date\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when);\n\n      // true if the token is expired\n      const isExpired = expiresAt < new Date();\n\n      // if the token is still valid, give access to the current user\n      // information in the resolvers context\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id,\n        };\n      }\n    }\n  }\n\n  return {};\n};\n\n// take the existing context and return a new extended context with the current\n// user if relevant (i.e. valid login token)\nexport const addCurrentUserToContext = async (context, loginToken) => {\n  const userContext = await getUserForContext(loginToken);\n  return {\n    ...context,\n    ...userContext,\n  };\n};\n"]},"sourceType":"script","hash":"65cf03fd5e1a914bae03c5ed0e4355ffd94bcb7a"}
