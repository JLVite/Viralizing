{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/google-plus/server/post-create.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/modules/google-plus/server/post-create.jsx","filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/google-plus/server/post-create.jsx","passPerPreset":false,"envName":"development","cwd":"/home/blackstoneteam/repos/viralizing-web/app","root":"/home/blackstoneteam/repos/viralizing-web/app","presets":[],"generatorOpts":{"filename":"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/google-plus/server/post-create.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/modules/google-plus/server/post-create.jsx"}},"code":"let GoogleConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    GoogleConnection = v;\n  }\n\n}, 0);\nlet HTTP;\nmodule.watch(require(\"meteor/http\"), {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 1);\n\nlet request = require('request').defaults({\n  encoding: null\n});\n\nMeteor.methods({\n  \"google-post-create\": function (profileID, message, callback) {\n    let profile = Profiles.findOne({\n      \"network\": \"google\"\n    });\n\n    if (!profile) {\n      throw new Meteor.Error(\"There's no matching profile\");\n    }\n\n    let connection = profile.connection,\n        client = GoogleConnection(connection.accessToken);\n\n    if (client) {\n      let postMessage = function (post) {\n        return client.post('statuses/update', post, function (error, tweet, response) {\n          if (error) {\n            console.log(\"TWITTER_ERROR\");\n            throw new Meteor.Error(\"Twitter: Failed to Post\");\n          }\n\n          console.log(\"TWEET_SUCCESSFUL\", tweet); // Tweet body.\n\n          if (callback) {\n            callback();\n          }\n        });\n      },\n          postImage = function (post) {\n        return request.get(post.media, function (error, response, body) {\n          if (!error && response.statusCode == 200) {\n            client.post('media/upload', {\n              media: body\n            }, function (error, media, response) {\n              if (error) {\n                throw new Meteor.Error(\"Twitter: Failed to Upload Media\");\n              }\n\n              if (!error) {\n                post.media_ids = media.media_id_string;\n                delete post.media;\n                return postMessage(post);\n              }\n            });\n          }\n        });\n      };\n\n      message = {\n        status: \"I Love Pagani!!!! \" + moment().format(\"HH:MM:SS A\"),\n        lat: \"37.7821120598956\",\n        long: \"-122.400612831116\",\n        display_coordinates: true,\n        media: \"https://c1.staticflickr.com/8/7340/9722529830_cd8851126e_b.jpg\"\n      };\n      var body = 'My first post using facebook-node-sdk';\n      console.log(Object.keys(client.library.activities));\n      client.library.people.get({\n        userId: 'me'\n      }, function (err, response) {\n        console.log(\"ERROR\", err);\n        console.log(\"RESPONSE\", response);\n      });\n      HTTP.call(\"POST\", \"https://www.googleapis.com/plusDomains/v1/people/{userId}/activities\", {\n        data: {\n          \"object\": {\n            \"originalContent\": \"Happy Monday! #caseofthemondays\"\n          },\n          \"access\": {\n            \"items\": [{\n              \"type\": \"domain\"\n            }],\n            \"domainRestricted\": true\n          }\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"OAuth$\" + connection.accessToken\n        }\n      });\n      /*\n       let query;\n        if (message.media) {\n       query = postImage(message);\n       } else {\n       query = postMessage(message);\n       }\n        return query;*/\n    }\n  }\n});","map":{"version":3,"sources":["imports/modules/google-plus/server/post-create.jsx"],"names":["GoogleConnection","module","watch","require","default","v","HTTP","request","defaults","encoding","Meteor","methods","profileID","message","callback","profile","Profiles","findOne","Error","connection","client","accessToken","postMessage","post","error","tweet","response","console","log","postImage","get","media","body","statusCode","media_ids","media_id_string","status","moment","format","lat","long","display_coordinates","Object","keys","library","activities","people","userId","err","call","data","headers"],"mappings":"AAAA,IAAIA,gBAAJ;AAAqBC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACC,UAAQC,CAAR,EAAU;AAACL,uBAAiBK,CAAjB;AAAmB;;AAA/B,CAArC,EAAsE,CAAtE;AAAyE,IAAIC,IAAJ;AAASL,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACG,OAAKD,CAAL,EAAO;AAACC,WAAKD,CAAL;AAAO;;AAAhB,CAApC,EAAsD,CAAtD;;AAGvG,IAAIE,UAAUJ,QAAQ,SAAR,EAAmBK,QAAnB,CAA4B;AAACC,YAAU;AAAX,CAA5B,CAAd;;AAEAC,OAAOC,OAAP,CAAe;AACX,wBAAsB,UAAUC,SAAV,EAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AAC1D,QAAIC,UAAUC,SAASC,OAAT,CAAiB;AAAC,iBAAW;AAAZ,KAAjB,CAAd;;AAEA,QAAI,CAACF,OAAL,EAAc;AACV,YAAM,IAAIL,OAAOQ,KAAX,CAAiB,6BAAjB,CAAN;AACH;;AAED,QAAIC,aAAaJ,QAAQI,UAAzB;AAAA,QACIC,SAASpB,iBAAiBmB,WAAWE,WAA5B,CADb;;AAGA,QAAID,MAAJ,EAAY;AACR,UAAIE,cAAc,UAAUC,IAAV,EAAgB;AAC1B,eAAOH,OAAOG,IAAP,CAAY,iBAAZ,EAA+BA,IAA/B,EAAqC,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,QAAxB,EAAkC;AAC1E,cAAIF,KAAJ,EAAW;AACPG,oBAAQC,GAAR,CAAY,eAAZ;AACA,kBAAM,IAAIlB,OAAOQ,KAAX,CAAiB,yBAAjB,CAAN;AACH;;AACDS,kBAAQC,GAAR,CAAY,kBAAZ,EAAgCH,KAAhC,EAL0E,CAKjC;;AACzC,cAAIX,QAAJ,EAAc;AACVA;AACH;AACJ,SATM,CAAP;AAUH,OAXL;AAAA,UAYIe,YAAY,UAAUN,IAAV,EAAgB;AACxB,eAAOhB,QAAQuB,GAAR,CAAYP,KAAKQ,KAAjB,EAAwB,UAAUP,KAAV,EAAiBE,QAAjB,EAA2BM,IAA3B,EAAiC;AAC5D,cAAI,CAACR,KAAD,IAAUE,SAASO,UAAT,IAAuB,GAArC,EAA0C;AAEtCb,mBAAOG,IAAP,CAAY,cAAZ,EAA4B;AAACQ,qBAAOC;AAAR,aAA5B,EAA2C,UAAUR,KAAV,EAAiBO,KAAjB,EAAwBL,QAAxB,EAAkC;AAEzE,kBAAIF,KAAJ,EAAW;AACP,sBAAM,IAAId,OAAOQ,KAAX,CAAiB,iCAAjB,CAAN;AACH;;AACD,kBAAI,CAACM,KAAL,EAAY;AACRD,qBAAKW,SAAL,GAAiBH,MAAMI,eAAvB;AACA,uBAAOZ,KAAKQ,KAAZ;AAEA,uBAAOT,YAAYC,IAAZ,CAAP;AACH;AACJ,aAXD;AAYH;AACJ,SAhBM,CAAP;AAiBH,OA9BL;;AAgCAV,gBAAU;AACNuB,gBAAQ,uBAAuBC,SAASC,MAAT,CAAgB,YAAhB,CADzB;AAENC,aAAK,kBAFC;AAGNC,cAAM,mBAHA;AAINC,6BAAqB,IAJf;AAKNV,eAAO;AALD,OAAV;AAOA,UAAIC,OAAO,uCAAX;AACAL,cAAQC,GAAR,CAAYc,OAAOC,IAAP,CAAYvB,OAAOwB,OAAP,CAAeC,UAA3B,CAAZ;AACAzB,aAAOwB,OAAP,CAAeE,MAAf,CAAsBhB,GAAtB,CAA0B;AACtBiB,gBAAQ;AADc,OAA1B,EAEG,UAAUC,GAAV,EAAetB,QAAf,EAAyB;AACxBC,gBAAQC,GAAR,CAAY,OAAZ,EAAoBoB,GAApB;AACArB,gBAAQC,GAAR,CAAY,UAAZ,EAAuBF,QAAvB;AACH,OALD;AAOApB,WAAK2C,IAAL,CAAU,MAAV,EAAiB,sEAAjB,EAAwF;AACpFC,cAAM;AACF,oBAAU;AACN,+BAAmB;AADb,WADR;AAIF,oBAAU;AACN,qBAAS,CAAC;AACN,sBAAQ;AADF,aAAD,CADH;AAIN,gCAAoB;AAJd;AAJR,SAD8E;AAYpFC,iBAAS;AACL,0BAAgB,kBADX;AAEL,2BAAiB,WAAShC,WAAWE;AAFhC;AAZ2E,OAAxF;AAkBA;;;;;;;;AAUH;AACJ;AAzFU,CAAf","sourcesContent":["import GoogleConnection from \"./connection\";\nimport { HTTP } from 'meteor/http'\n\nlet request = require('request').defaults({encoding: null});\n\nMeteor.methods({\n    \"google-post-create\": function (profileID, message, callback) {\n        let profile = Profiles.findOne({\"network\": \"google\"});\n\n        if (!profile) {\n            throw new Meteor.Error(\"There's no matching profile\");\n        }\n\n        let connection = profile.connection,\n            client = GoogleConnection(connection.accessToken);\n\n        if (client) {\n            let postMessage = function (post) {\n                    return client.post('statuses/update', post, function (error, tweet, response) {\n                        if (error) {\n                            console.log(\"TWITTER_ERROR\");\n                            throw new Meteor.Error(\"Twitter: Failed to Post\");\n                        }\n                        console.log(\"TWEET_SUCCESSFUL\", tweet);  // Tweet body.\n                        if (callback) {\n                            callback();\n                        }\n                    });\n                },\n                postImage = function (post) {\n                    return request.get(post.media, function (error, response, body) {\n                        if (!error && response.statusCode == 200) {\n\n                            client.post('media/upload', {media: body}, function (error, media, response) {\n\n                                if (error) {\n                                    throw new Meteor.Error(\"Twitter: Failed to Upload Media\");\n                                }\n                                if (!error) {\n                                    post.media_ids = media.media_id_string;\n                                    delete post.media;\n\n                                    return postMessage(post);\n                                }\n                            });\n                        }\n                    });\n                };\n\n            message = {\n                status: \"I Love Pagani!!!! \" + moment().format(\"HH:MM:SS A\"),\n                lat: \"37.7821120598956\",\n                long: \"-122.400612831116\",\n                display_coordinates: true,\n                media: \"https://c1.staticflickr.com/8/7340/9722529830_cd8851126e_b.jpg\"\n            };\n            var body = 'My first post using facebook-node-sdk';\n            console.log(Object.keys(client.library.activities));\n            client.library.people.get({\n                userId: 'me'\n            }, function (err, response) {\n                console.log(\"ERROR\",err);\n                console.log(\"RESPONSE\",response);\n            });\n\n            HTTP.call(\"POST\",\"https://www.googleapis.com/plusDomains/v1/people/{userId}/activities\",{\n                data: {\n                    \"object\": {\n                        \"originalContent\": \"Happy Monday! #caseofthemondays\",\n                    },\n                    \"access\": {\n                        \"items\": [{\n                            \"type\": \"domain\"\n                        }],\n                        \"domainRestricted\": true\n                    }\n                },\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"OAuth$\"+connection.accessToken\n                }\n            })\n\n            /*\n             let query;\n\n             if (message.media) {\n             query = postImage(message);\n             } else {\n             query = postMessage(message);\n             }\n\n             return query;*/\n        }\n    }\n});"]},"sourceType":"script","hash":"a0777d69622baef1960c5c5c40f9cafe68fdbd9f"}
