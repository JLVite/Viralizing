[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nCollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nmoment = Package['momentjs:moment'].moment;\nlodash = Package['stevezhu:lodash'].lodash;\n_ = Package.underscore._;\nHerald = Package['kestanous:herald'].Herald;\nSyncedCron = Package['percolate:synced-cron'].SyncedCron;\nAccountsLockout = Package['eluck:accounts-lockout'].AccountsLockout;\nInstagram = Package['bozhao:accounts-instagram'].Instagram;\nServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nOAuth = Package.oauth.OAuth;\nOauth = Package.oauth.Oauth;\nOAuthEncryption = Package['oauth-encryption'].OAuthEncryption;\nSlingshot = Package['edgee:slingshot'].Slingshot;\nUserStatus = Package['mizzao:user-status'].UserStatus;\nRoles = Package['alanning:roles'].Roles;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nGoogle = Package['google-oauth'].Google;\nFacebook = Package['facebook-oauth'].Facebook;\nTwitter = Package['twitter-oauth'].Twitter;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"modules\":{\"campaigns\":{\"server\":{\"cron-jobs\":{\"actions\":{\"invites-scheduled.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/campaigns/server/cron-jobs/actions/invites-scheduled.jsx                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n//console.log(\"Invites-Scheduled\");\nMeteor.methods({\n  \"invites-scheduled-run\": function () {\n    let invites = Invites.find({\n      status: \"scheduled\"\n    });\n    let schedules = [];\n    invites.forEach(function (invite) {\n      let accounts = SocialAccounts.find({\n        _id: {\n          $in: invite.members\n        }\n      }, {\n        fields: {\n          \"_id\": 1,\n          \"information.name\": 1,\n          \"information.lastName\": 1,\n          \"information.avatar\": 1,\n          \"network\": 1\n        }\n      }).fetch();\n      let data = {\n        message: invite.message.message,\n        accounts,\n        status: \"pending\",\n        campaign: invite.campaign,\n        invite: invite._id,\n        isPaid: true,\n        date: invite.date,\n        deadline: invite.deadline,\n        media: invite.message.media,\n        hashtags: invite.message.hashtags\n      };\n      schedules.push(data);\n      Meteor.call(\"posts-scheduler\", data, invite.owner);\n      Invites.update(invite._id, {\n        $set: {\n          status: \"sent\"\n        }\n      });\n    });\n    return {\n      data: schedules\n    };\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"posts-scheduled.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/campaigns/server/cron-jobs/actions/posts-scheduled.jsx                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"posts-scheduled-run\": function () {\n    let currentTime = moment().second(0).toDate(),\n        dateCeil = moment(currentTime).add(4, \"minutes\").toDate();\n    let query = {\n      status: \"scheduled\",\n      date: {\n        $lte: dateCeil\n      }\n    };\n    let posts = Posts.find(query).fetch();\n    let accountIDs = posts.map(p => p.account._id);\n    let accounts = SocialAccounts.find({\n      _id: {\n        $in: accountIDs\n      }\n    }, {\n      fields: {\n        network: 1,\n        _id: 1,\n        connection: 1\n      }\n    }).fetch();\n\n    if (posts.length === 0) {} //console.log(\"NO_POSTS_FOUND_TO_RUN\");\n    //console.log(\"POSTS_RUN_TIME_FROM:\", currentTime, \"_TO_\", dateCeil, \"_FOUND:\", posts.length, \"_POSTS\");\n\n\n    posts.forEach(function (post) {\n      let account = accounts.filter(a => a._id === post.account._id)[0];\n\n      if (account) {\n        let method = \"\";\n\n        switch (account.network) {\n          case \"facebook\":\n            method = \"facebook-post-create\";\n            break;\n\n          case \"twitter\":\n            method = \"twitter-post-create\";\n            break;\n\n          case \"instagram\":\n            method = \"instagram-post-create\";\n            break;\n\n          default:\n            throw new Meteor.error(500, \"Invalid Social Network\");\n        }\n\n        post.data.date = post.date;\n        Meteor.call(method, account.connection, post.data, function () {\n          //console.log(\"SOCIAL_MEDIA_POST_SUCCESFUL\");\n          Posts.update({\n            _id: post._id\n          }, {\n            $set: {\n              status: \"published\"\n            }\n          });\n        });\n      } else {//TODO: Send Email to acknowledge error in dev.\n        //console.log(\"[ERROR]: POSTING ERROR: NO ACCOUNT MARCH\", post._id);\n      }\n    });\n    return posts;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"invites.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/campaigns/server/cron-jobs/invites.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nSyncedCron.add({\n  name: \"Run Invites Actions\",\n  schedule: function (parser) {\n    return parser.text(\"every 1 minutes\");\n  },\n  job: function () {\n    //Meteor.call(\"invites-scheduled-run\");\n    return true;\n  }\n}); //Add CronJob every day for\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"posts.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/campaigns/server/cron-jobs/posts.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//console.log(\"EVENT_CRON\");\nSyncedCron.add({\n  name: \"Run Post Actions\",\n  schedule: function (parser) {\n    return parser.text(\"every 5 minutes\");\n  },\n  job: function () {\n    Meteor.call(\"posts-scheduled-run\");\n    return true;\n  }\n}); //Add CronJob every day for\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/campaigns/server/bundle.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./methods\"));\nmodule.watch(require(\"./cron-jobs/posts\"));\nmodule.watch(require(\"./cron-jobs/invites\"));\nmodule.watch(require(\"./cron-jobs/actions/posts-scheduled\"));\nmodule.watch(require(\"./cron-jobs/actions/invites-scheduled\"));\nmodule.watch(require(\"./image-upload\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"image-upload.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/campaigns/server/image-upload.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet uuid;\nmodule.watch(require(\"uuid\"), {\n  default(v) {\n    uuid = v;\n  }\n\n}, 0);\nSlingshot.createDirective(\"campaign-image-upload\", Slingshot.S3Storage, {\n  bucket: \"ibol-campaigns-media\",\n  acl: \"public-read\",\n  authorize: function () {\n    //Deny uploads if user is not logged in.\n    if (!this.userId) {\n      var message = \"Please login before posting files\";\n      throw new Meteor.Error(\"Login Required\", message);\n    }\n\n    return true;\n  },\n  maxSize: 10 * 1024 * 1024,\n  // 10 MB (use null for unlimited).\n  allowedFileTypes: [\"image/png\", \"image/jpeg\", \"image/gif\"],\n  key: function (file) {\n    let re = /(?:\\.([^.]+))?$/;\n    let fileExt = re.exec(file.name)[1];\n    return Meteor.userId() + \"/\" + uuid.v4() + \".\" + fileExt;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/campaigns/server/methods.jsx                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Email;\nmodule.watch(require(\"meteor/email\"), {\n  Email(v) {\n    Email = v;\n  }\n\n}, 1);\nlet Settings;\nmodule.watch(require(\"../../../settings\"), {\n  default(v) {\n    Settings = v;\n  }\n\n}, 2);\nlet CampaignsSchema;\nmodule.watch(require(\"../../../server/schemas/campaign/schema\"), {\n  default(v) {\n    CampaignsSchema = v;\n  }\n\n}, 3);\nlet InviteSchema;\nmodule.watch(require(\"../../../server/schemas/invites/schema\"), {\n  default(v) {\n    InviteSchema = v;\n  }\n\n}, 4);\nMeteor.methods({\n  \"campaigns-crate\": function (data) {\n    // console.log(\"CAMPAIGNS_CREATE_BEFORE\", data);\n    let user = Meteor.user();\n    let newCampaign = Object.assign({}, CampaignsSchema, {\n      owner: user._id,\n      manager: user._id\n    });\n    let {\n      name,\n      dateStart,\n      dateEnd,\n      brands\n    } = data;\n    newCampaign.information = Object.assign({}, newCampaign.information, {\n      name,\n      dateStart,\n      dateEnd,\n      brands: brands.map(b => b._id)\n    }); //console.log(\"CAMPAIGNS_CREATE_INSERT\", newCampaign, data);\n\n    return Campaigns.insert(newCampaign);\n  },\n  \"campaigns-save\": function (campaign) {\n    const user = Meteor.user();\n    let dbCampaign = Campaigns.findOne({\n      _id: campaign._id\n    });\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    };\n\n    campaign.owner = campaign.owner._id;\n    campaign.manager = campaign.manager._id;\n\n    if (campaign.information.brands) {\n      campaign.information.brands = campaign.information.brands.map(b => b._id);\n    }\n\n    removeTypeNames(campaign);\n    return Campaigns.update(campaign._id, {\n      $set: Object.assign({}, dbCampaign, campaign)\n    });\n  },\n  \"invite-create\": function (invite) {\n    //console.log(\"INVITE_CREATE\");\n    let user = Meteor.user();\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    };\n\n    let newInvite = Object.assign({}, InviteSchema, invite, {\n      owner: user._id\n    });\n    newInvite.campaign = newInvite.campaign._id;\n    newInvite.influencers = newInvite.influencers.map(a => a._id);\n    removeTypeNames(newInvite);\n    return Invites.insert(newInvite);\n  },\n  \"invite-update\": function (invite) {\n    const user = Meteor.user();\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    };\n\n    invite.influencers = invite.influencers.map(a => a._id);\n    invite.teamAttacks = invite.teamAttacks.map(a => a._id);\n    removeTypeNames(invite);\n    return Invites.update(invite._id, {\n      $set: invite\n    });\n  },\n  \"invite-save-multiple\": function (invites, campaignID) {\n    let writes = [];\n    invites.forEach(invite => {\n      invite.campaign = campaignID;\n      writes.push(Meteor.call(\"invite-update\", invite));\n    });\n    return writes;\n  },\n  \"campaign-objective-proposal\": function (campaignID, data) {\n    //console.log(\"campaign-objective-proposal\", campaignID, data);\n    let user = Meteor.user();\n    let userName = user.profile.name;\n    let action = \"Objetivo de Campaña\";\n    let proposal = data.objective;\n    this.unblock();\n    let subject = \"Se ha sugerido un nuevo \" + action;\n    let html = (userName ? userName : \"El usuario\") + \" (\" + user.emails[0].address + \" - \" + user._id + \")\" + \" ha sugerido un nuevo \" + action + \": \" + proposal + \".\";\n    Email.send({\n      from: Settings.email.noReply,\n      to: \"hello@viralizing.me\",\n      subject,\n      html\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"facebook\":{\"server\":{\"marketing\":{\"ad\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad/bundle.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\nmodule.watch(require(\"./delete\"));\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\nmodule.watch(require(\"./from-adset\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad/create.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-ads-create\": function (accountID, adAccount, adSetID, creativeID, Ad) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    /*\n    let Ad={\n        name: \"Test AdCreative \"+moment().format(\"DD/MM/YYYY h:m\"),\n        adset_id:adSetID,\n        creative: {creative_id:creativeID},\n        status: \"ACTIVE\" //ACTIVE, PAUSED, DELETED, ARCHIVED\n    };*/\n\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n\n    try {\n      return client(`${adAccount}/ads`, \"post\", Ad);\n    } catch (e) {\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delete.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad/delete.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-ads-delete\": function (accountID, adID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adID}/`, \"delete\");\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"from-adset.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad/from-adset.jsx                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-ads-from-adset\": function (accountID, adSetID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adSetID}/ads`, {\n      fields: [\"account_id\", \"title\", \"actor_id\", \"body\", \"branded_content_sponsor_page_id\", \"call_to_action_type\", \"id\", \"image_crops\", \"image_hash\", \"image_url\", \"link_url\", \"name\", \"adlabels\", \"applink_treatment\", \"object_id\", \"object_story_id\", \"object_type\", \"configured_status\", \"effective_status\", \"status\"]\n    });\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad/list.jsx                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-ads-list\": function (accountID, adAccount) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adAccount}/ads`, {\n      fields: [\"account_id\", \"actor_id\", \"adlabels\", \"body\", \"title\", \"call_to_action_type\", \"id\", \"image_crops\", \"image_hash\", \"image_url\", \"link_og_id\", \"link_url\"]\n    });\n    return res.data;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad/read.jsx                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-ads-read\": function (accountID, adID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adID}/`, {\n      fields: [\"account_id\", \"campaign\", \"campaign_id\", \"ad_review_feedback\", \"adlabels\", \"adset\", \"adset_id\", \"bid_amount\", \"bid_info\", \"bid_type\", \"configured_status\", \"conversion_specs\", \"created_time\", \"creative\", \"effective_status\", \"id\", \"adcreatives\", \"name\", \"recommendations\", \"source_ad\", \"source_ad_id\", \"status\", \"tracking_specs\", \"updated_time\", \"insights\", \"leads\"]\n    });\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ad-accounts\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-accounts/bundle.jsx                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-accounts/list.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adAccounts-list\": function (accountID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(\"me/adaccounts\", {\n      fields: [\"name\", \"account_status\", \"business\", \"account_id\", \"id\", \"partner\", \"balance\", \"currency\", \"end_advertiser\", \"end_advertiser_name\", \"created_time\", \"amount_spent\"]\n    });\n    return res.data;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-accounts/read.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adAccounts-read\": function (accountID, adAccountID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n\n    if (adAccountID.split(\"_\").length === 1) {\n      adAccountID = \"act_\" + adAccountID;\n    }\n\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adAccountID}/`, {\n      fields: [\"business_name\", \"account_id\", \"account_status\", \"business\", \"balance\", \"business_city\", \"business_country_code\", \"business_state\", \"business_street\", \"business_street2\", \"business_zip\", \"can_create_brand_lift_study\", \"capabilities\", \"created_time\", \"currency\", \"disable_reason\", \"end_advertiser\", \"end_advertiser_name\", \"failed_delivery_checks\", \"funding_source\", \"funding_source_details\", \"has_migrated_permissions\", \"id\", \"age\", \"amount_spent\"]\n    });\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ad-creative\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-creative/bundle.jsx                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\nmodule.watch(require(\"./delete\"));\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\nmodule.watch(require(\"./from-ad\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-creative/create.jsx                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adCreative-create\": function (accountID, adAccount, AdCreative) {\n    console.log(\"fb-marketing-adCreative-create\", accountID, adAccount);\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    /*let AdCreative = {\n        title: \"Test AdCreative \" + moment().format(\"DD/MM/YYYY h:m\"),\n        account_id: adAccount,\n        body: \"Another! This is a test creative body\",\n        image_url: \"https://ibol-website.s3.amazonaws.com/wp-content//uploads/2017/02/z0nvqfroqwa-denys-nevozhai.jpg\",\n        link_url: \"https://www.facebook.com/ibolviralizing/\",\n        //object_id: \"369756380077148\",\n        object_story_spec: {\n            \"link_data\": {\n                \"call_to_action\": {\n                    \"type\": \"SIGN_UP\",\n                    \"value\": {\"link\": \"https://www.facebook.com/ibolviralizing/\"}\n                },\n                \"link\": \"https://www.facebook.com/ibolviralizing/\",\n                \"message\": \"try it out\"\n            },\n            \"page_id\": \"369756380077148\",\n            \"instagram_actor_id\": \"\"\n        }\n    };*/\n\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n\n    try {\n      return res = client(`${adAccount}/adcreatives`, \"post\", AdCreative);\n    } catch (e) {\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delete.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-creative/delete.jsx                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adCreative-delete\": function (accountID, adCreativeID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adCreativeID}/`, \"delete\");\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"from-ad.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-creative/from-ad.jsx                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adCreative-from-ad\": function (accountID, adID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adID}/adcreatives`, {\n      fields: [\"title\", \"account_id\", \"actor_id\", \"body\", \"branded_content_sponsor_page_id\", \"call_to_action_type\", \"id\", \"image_crops\", \"image_hash\", \"image_url\", \"link_url\", \"name\", \"adlabels\", \"applink_treatment\", \"object_id\", \"object_story_id\", \"object_type\"]\n    });\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-creative/list.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adCreative-list\": function (accountID, adAccount) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adAccount}/adcreatives`, {\n      fields: [\"account_id\", \"actor_id\", \"adlabels\", \"body\", \"title\", \"call_to_action_type\", \"id\", \"image_crops\", \"image_hash\", \"image_url\", \"link_og_id\", \"link_url\"]\n    });\n    return res.data;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-creative/read.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adCreative-read\": function (accountID, adCreativeID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adCreativeID}/`, {\n      fields: [\"account_id\", \"actor_id\", \"body\", \"branded_content_sponsor_page_id\", \"call_to_action_type\", \"id\", \"image_crops\", \"image_hash\", \"image_url\", \"link_url\", \"name\", \"adlabels\", \"applink_treatment\", \"object_id\", \"object_story_id\", \"object_type\"]\n    });\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ad-sets\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-sets/bundle.jsx                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\nmodule.watch(require(\"./delete\"));\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\nmodule.watch(require(\"./from-campaign\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-sets/create.jsx                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adsets-create\": function (accountID, adAccount, options) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let AdSetexample = {\n      \"name\": \"My New Ad Set\",\n      \"optimization_goal\": \"REACH\",\n      \"adLabels\": [\"sad\", \"das\"],\n      \"daily_budget\": 2000,\n      \"bid_amount\": 2,\n      \"start_time\": \"2018-09-12 23:59:56-07:00\",\n      \"end_time\": \"2018-09-15 23:59:56-07:00\",\n      \"billing_event\": \"IMPRESSIONS\",\n      \"campaign_id\": \"23842849843970485\",\n      \"status\": \"PAUSED\",\n      \"targeting\": {\n        \"user_device\": [\"Galaxy S6\", \"One m9\"],\n        \"user_os\": [\"android\"],\n        \"geo_locations\": {\n          \"countries\": [\"US\"]\n        },\n        \"publisher_platforms\": [\"facebook\"]\n      }\n    };\n    const validObj = {\n      \"name\": \"My date tesdasfttt \" + String(new Date()),\n      \"adLabels\": [\"sad\", \"das\"],\n      \"daily_budget\": 2000,\n      \"bid_amount\": 2,\n      \"start_time\": \"22-06-2018 12:00\",\n      \"end_time\": \"26-06-2018 12:00\",\n      \"billing_event\": \"IMPRESSIONS\",\n      \"campaign_id\": \"23842849843970485\",\n      \"status\": \"PAUSED\",\n      \"targeting\": {\n        \"user_device\": [\"Galaxy S6\", \"One m9\"],\n        \"user_os\": [\"android\"],\n        \"geo_locations\": {\n          \"countries\": [\"US\"]\n        },\n        \"publisher_platforms\": [\"facebook\"]\n      }\n    };\n    /* these fields are the problem when requesting with the API */\n\n    options.targeting.user_device = validObj.targeting.user_device;\n    options.campaign_id = validObj.campaign_id;\n    /*options = {...options, ...validObj}*/\n    //options.targeting = validObj.targeting;\n\n    console.log(accountID, adAccount);\n    console.log('ADSETS CREATE', options);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n\n    try {\n      let res = client(`${adAccount}/adsets`, \"post\", options);\n      return res;\n    } catch (e) {\n      console.log(e);\n      return {\n        status: 'error',\n        error: e\n      };\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delete.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-sets/delete.jsx                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adsets-delete\": function (accountID, adSetID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adSetID}/`, \"delete\");\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"from-campaign.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-sets/from-campaign.jsx                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adsets-from-campaign\": function (accountID, campaignID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${campaignID}/adsets`, {\n      fields: [\"name\", \"account_id\", \"adlabels\", \"adset_schedule\", \"attribution_spec\", \"bid_amount\", \"bid_info\", \"billing_event\", \"budget_remaining\", \"campaign\", \"campaign_id\", \"configured_status\", \"created_time\", \"creative_sequence\", \"daily_budget\", \"effective_status\", \"end_time\", \"frequency_control_specs\", \"id\", \"is_autobid\", \"is_average_price_pacing\", \"lifetime_budget\", \"lifetime_imps\", \"optimization_goal\", \"pacing_type\", \"promoted_object\", \"recommendations\", \"recurring_budget_semantics\", \"rf_prediction_id\", \"rtb_flag\", \"source_adset\", \"source_adset_id\", \"start_time\", \"status\", \"targeting\", \"time_based_ad_rotation_id_blocks\", \"time_based_ad_rotation_intervals\", \"updated_time\"]\n    });\n    return res.data;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-sets/list.jsx                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adsets-list\": function (accountID, adAccount) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adAccount}/adsets`, {\n      fields: [\"name\", \"account_id\", \"adlabels\", \"adset_schedule\", \"attribution_spec\", \"bid_amount\", \"bid_info\", \"billing_event\", \"budget_remaining\", \"campaign\", \"campaign_id\", \"configured_status\", \"created_time\", \"creative_sequence\", \"daily_budget\", \"effective_status\", \"end_time\", \"frequency_cap\", \"frequency_cap_reset_period\", \"frequency_control_specs\", \"id\", \"is_autobid\", \"is_average_price_pacing\", \"lifetime_budget\", \"lifetime_frequency_cap\", \"lifetime_imps\", \"optimization_goal\", \"pacing_type\", \"promoted_object\", \"recommendations\", \"recurring_budget_semantics\", \"rf_prediction_id\", \"rtb_flag\", \"source_adset\", \"source_adset_id\", \"start_time\", \"status\", \"targeting\", \"time_based_ad_rotation_id_blocks\", \"time_based_ad_rotation_intervals\", \"updated_time\"]\n    });\n    return res.data;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/ad-sets/read.jsx                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-adsets-read\": function (accountID, adSetID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adSetID}/`, {\n      fields: [\"adlabels\", \"adset_schedule\", \"attribution_spec\", \"bid_amount\", \"bid_info\", \"billing_event\", \"budget_remaining\", \"campaign\", \"campaign_id\", \"configured_status\", \"created_time\", \"creative_sequence\", \"daily_budget\", \"effective_status\", \"end_time\", \"frequency_cap\", \"frequency_cap_reset_period\", \"frequency_control_specs\", \"id\", \"is_autobid\", \"lifetime_budget\", \"is_average_price_pacing\", \"lifetime_frequency_cap\", \"lifetime_imps\", \"name\", \"optimization_goal\", \"pacing_type\", \"promoted_object\", \"recommendations\", \"recurring_budget_semantics\", \"rf_prediction_id\", \"rtb_flag\", \"source_adset\", \"source_adset_id\", \"start_time\", \"status\", \"targeting\", \"time_based_ad_rotation_id_blocks\", \"time_based_ad_rotation_intervals\", \"updated_time\", \"use_new_app_click\", \"account_id\"]\n    });\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"campaign\":{\"audience_size.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/campaign/audience_size.jsx                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-campaigns-audience\": function (accountID, AdAccount, data) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    console.log('fb-marketing-campaigns-audience', accountID, AdAccount, data);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${AdAccount}/reachestimate`, data);\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/campaign/bundle.jsx                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\nmodule.watch(require(\"./delete\"));\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\nmodule.watch(require(\"./audience_size\"));\nmodule.watch(require(\"./delivery_estimate\"));\nmodule.watch(require(\"./targeting-fields\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/campaign/create.jsx                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-campaign-create\": function (accountID, adAccount, data) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let campaign = {\n      name: data.name,\n      adlabels: [],\n      budget_rebalance_flag: true,\n      buying_type: data.buyingType,\n      //AUCTION OR RESERVED, FIXED_CPM\n      promoted_object: null,\n      //OBJECT ID\n      spend_cap: Number(data.spendCap) * 100,\n      status: \"PAUSED\",\n      //PAUSED OR ACTIVE\n      objective: data.objective //APP_INSTALLS, BRAND_AWARENESS, CONVERSIONS, EVENT_RESPONSES, LEAD_GENERATION, LINK_CLICKS, LOCAL_AWARENESS, OFFER_CLAIMS, PAGE_LIKES, POST_ENGAGEMENT, PRODUCT_CATALOG_SALES, REACH, VIDEO_VIEWS\n\n    };\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n\n    try {\n      return client(`${adAccount}/campaigns`, \"post\", campaign);\n    } catch (e) {\n      console.log(\"ERROR\", e);\n      return {\n        error: JSON.parse(e.message).error.error_user_msg\n      };\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delete.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/campaign/delete.jsx                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-campaign-delete\": function (accountID, campaignID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${campaignID}/`, \"delete\");\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delivery_estimate.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/campaign/delivery_estimate.jsx                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-campaigns-delivery-estimate\": function (accountID, AdAccount, data) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    data.targeting_spec.user_device = data.targeting_spec.user_device.filter(e => e);\n    data.targeting_spec.user_os = data.targeting_spec.user_os.filter(e => e);\n    console.log('fb-marketing-campaigns-delivery_estimate', accountID, AdAccount, data);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${AdAccount}/delivery_estimate`, data);\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/campaign/list.jsx                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-campaigns-list\": function (accountID, adAccount) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adAccount}/campaigns`, {\n      fields: [\"configured_status\", \"effective_status\", \"status\", \"start_time\", \"stop_time\", \"updated_time\", \"created_time\", \"spend_cap\", \"objective\", \"buying_type\", \"name\"]\n    });\n    return res.data;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/campaign/read.jsx                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-campaigns-read\": function (accountID, campaignID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    console.log(\"fb-marketing-campaigns-read\", accountID, campaignID);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    Facebook.napi(`${campaignID}/`, {\n      fields: [\"account_id\", \"created_time\", \"configured_status\", \"can_use_spend_cap\", \"can_create_brand_lift_study\", \"buying_type\", \"budget_rebalance_flag\", \"boosted_object_id\", \"effective_status\", \"name\", \"source_campaign\", \"status\", \"updated_time\", \"start_time\", \"stop_time\", \"ad_studies\", \"ads\", \"spend_cap\", \"objective\", \"adsets\"]\n    }, function (err, res) {\n      console.log(\"FACEBOOO\", err, res);\n    });\n    let res = client(`${campaignID}/`, {\n      fields: [\"account_id\", \"created_time\", \"configured_status\", \"can_use_spend_cap\", \"can_create_brand_lift_study\", \"buying_type\", \"budget_rebalance_flag\", \"boosted_object_id\", \"effective_status\", \"name\", \"source_campaign\", \"status\", \"updated_time\", \"start_time\", \"stop_time\", \"ad_studies\", \"ads\", \"spend_cap\", \"objective\", \"adsets\"]\n    });\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"targeting-fields.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/campaign/targeting-fields.jsx                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-targeting-fields\": function (accountID, data) {\n    console.log('ACCOUNT_ID', accountID);\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    console.log(\"fb-marketing-targeting-fields\", accountID, data);\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`/search`, data);\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"images\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/images/bundle.jsx                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/images/create.jsx                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"../../connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"fb-marketing-images-create\": function (accountID, adAccountID, imageData) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n    let Image = {\n      bytes: imageData\n    };\n    let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n    let res = client(`${adAccountID}/adimages`, \"post\", Image);\n    return res;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/marketing/bundle.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./ad-accounts/bundle\"));\nmodule.watch(require(\"./campaign/bundle\"));\nmodule.watch(require(\"./ad-sets/bundle\"));\nmodule.watch(require(\"./ad-creative/bundle\"));\nmodule.watch(require(\"./ad/bundle\"));\nmodule.watch(require(\"./images/bundle\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"analytics\":{\"insights.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/analytics/insights.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nthrow new Error(\"/home/blackstoneteam/repos/viralizing-web/app/imports/modules/facebook/server/analytics/insights.jsx: Unexpected token (12:50)\\n\\n  10 |         let arr = [\\\"page_positive_feedback_by_type\\\",\\\"page_impressions\\\",\\\"page_impressions_viral\\\"]\\n  11 |         if(client){\\n> 12 |             client.api(`${fbID}/insights?metric=${...arr}&date_preset=this_week`,function(res){ \\n     |                                                   ^\\n  13 |                 console.log(\\\"METRIC\\\",res.data[0].values)\\n  14 |                 return res\\n  15 |             })\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"account-stats.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/account-stats.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"facebook-account-stats\": function (userID, profile) {\n    if (!profile) {\n      profile = SocialAccounts.findOne({\n        \"network\": \"facebook\"\n      });\n    }\n\n    if (!profile) {\n      throw new Meteor.Error(\"There's no matching profile\");\n    }\n\n    let connection = profile.connection;\n    let client = FacebookConnection(connection.accessToken);\n\n    if (profile) {\n      let posts = [];\n      let fields = [];\n      let likesPerPage = null;\n\n      if (profile.type === \"fanPage\") {\n        fields = [\"fan_count\"];\n      }\n\n      let syncFB = Meteor.wrapAsync(client.napi, client);\n      let user = syncFB(userID, {\n        fields\n      });\n      let lastPost = null;\n\n      let getPosts = function (until) {\n        let query = userID + \"/feed\";\n        let params = {\n          limit: 100,\n          fields: [\"id\", \"message\", \"picture\", \"link\", \"shares\", \"created_time\", \"comments.limit(1).summary(true)\", \"likes.limit(1).summary(true)\"]\n        };\n\n        if (until) {\n          params.until = until;\n        }\n\n        let result = syncFB(query, params);\n\n        if (lastPost) {\n          if (lastPost.id === result.data[result.data.length - 1].id) {\n            return;\n          }\n        }\n\n        posts = [...posts, ...result.data];\n        lastPost = result.data[result.data.length - 1];\n        let lastPostCreation = new Date(result.data[result.data.length - 1].created_time);\n\n        if (result.data.length > 1 && result.paging.next) {\n          getPosts(Number(lastPostCreation) / 1000);\n        }\n      };\n\n      let getPageLikes = function (until) {\n        let day = new Date();\n        var nextDay = new Date(day);\n        nextDay.setDate(day.getDate() + 1);\n        let query = userID + \"/insights\";\n        let params = {\n          pretty: 0,\n          since: day.toJSON().slice(0, 10),\n          until: nextDay.toJSON().slice(0, 10),\n          metric: \"page_fans\"\n        };\n        let result = syncFB(query, params);\n        console.log(result);\n\n        if (result.data && result.data[0]) {\n          return result.data.values[0].value;\n        } else {\n          return null;\n        }\n      };\n\n      getPosts();\n      const first = posts[0];\n      const last = posts[posts.length - 1];\n      let comments = 0;\n      let likes = 0;\n      let shares = 0;\n\n      for (const x of posts) {\n        if (x.comments) {\n          comments += x.comments.summary.total_count;\n        }\n\n        if (x.likes) {\n          likes += x.likes.summary.total_count;\n        }\n\n        if (x.shares) {\n          shares += x.shares.count;\n        }\n      }\n\n      let result = {\n        comments,\n        commentsPerPost: comments / posts.length,\n        likes,\n        likesPerPost: likes / posts.length,\n        shares,\n        sharesPerPost: shares / posts.length,\n        engagement: (comments + likes + shares) / posts.length / user.fan_count,\n        profileLikes: getPageLikes(),\n        posts: posts.length,\n        postsPerDay: posts.length / Math.abs(moment(first.created_time).diff(moment(new Date(last.created_time)), \"days\"))\n      };\n\n      if (user.fan_count) {\n        result.profileLikes = user.fan_count;\n      }\n\n      Object.keys(result).forEach(key => {\n        if (Number.isNaN(result[key])) {\n          result[key] = 0;\n        }\n      });\n\n      if (result.postsPerDay === Infinity) {\n        result.postsPerDay = 0;\n      }\n\n      return result;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/bundle.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./post-create\"));\nmodule.watch(require(\"./account-stats\"));\nmodule.watch(require(\"./cover-profile-photo\"));\nmodule.watch(require(\"./pages-list\"));\nmodule.watch(require(\"./marketing/bundle\"));\nmodule.watch(require(\"./share-post\"));\nmodule.watch(require(\"./analytics/insights\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/connection.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Facebook, FacebookApiException;\nmodule.watch(require(\"fb\"), {\n  Facebook(v) {\n    Facebook = v;\n  },\n\n  FacebookApiException(v) {\n    FacebookApiException = v;\n  }\n\n}, 0);\n\nlet FacebookConnection = function (token) {\n  return new Facebook({\n    appId: Meteor.settings.private.networks.facebook.appId,\n    appSecret: Meteor.settings.private.networks.facebook.secret,\n    accessToken: token,\n    version: 'v3.0'\n  });\n};\n\nmodule.exportDefault(FacebookConnection);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cover-profile-photo.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/cover-profile-photo.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\n\nlet request = require('request').defaults({\n  encoding: null\n});\n\nMeteor.methods({\n  /*coverURL = idPhoto already uploaded*/\n\n  /* Meteor.call('facebook-update-cover-photo','pageID',IDphoto,(err,res)=>{console.log(err,res)}); */\n  \"facebook-update-cover-photo\": function (pageID, coverURL, callback) {\n    let account = SocialAccounts.findOne({\n      _id: pageID\n    });\n    let connection = account.connection;\n    console.log('Connetition Data', connection);\n    let client = FacebookConnection(connection.accessToken);\n    const fbID = connection.id;\n\n    if (client) {\n      client.api(`${fbID}/albums`, {\n        fields: ['name', 'id']\n      }, function (res) {\n        console.log('album', res);\n        const albumID = res.data.filter(album => album.name === 'Cover Photos')[0].id;\n        console.log('Cover Photos ID', albumID);\n        client.api(`${albumID}/photos`, 'post', {\n          url: coverURL\n        }, function (res) {\n          console.log('Cover Response', res);\n        });\n      });\n      return client.api('/' + fbID, \"post\", {\n        cover: coverURL\n      }, function (res) {\n        if (!res || res.error) {\n          console.log(!res ? 'error occurred' : res.error);\n          return;\n        }\n\n        console.log('success: ' + res.success);\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  },\n\n  /*coverURL = page URL*/\n\n  /* Meteor.call('facebook-update-profile-photo','pageID','coverURL',(err,res)=>{console.log(err,res)}); */\n  \"facebook-update-profile-photo\": function (pageID, coverURL, callback) {\n    let account = SocialAccounts.findOne({\n      _id: pageID\n    });\n    let connection = account.connection;\n    console.log('Connetition Data', connection);\n    let client = FacebookConnection(connection.accessToken);\n    const fbID = connection.id;\n\n    if (client) {\n      client.api(`${fbID}/albums`, {\n        fields: ['name', 'id']\n      }, function (res) {\n        console.log('album', res);\n        const albumID = res.data.filter(album => album.name === 'Profile Pictures')[0].id;\n        console.log('Cover Photos ID', albumID);\n        client.api(`${albumID}/photos`, 'post', {\n          url: coverURL\n        }, function (res) {\n          console.log('Cover Response', res);\n        });\n      });\n      return client.api('/' + fbID + '/picture', \"post\", {\n        picture: coverURL\n      }, function (res) {\n        if (!res || res.error) {\n          console.log(!res ? 'error occurred' : res.error);\n          return;\n        }\n\n        console.log('success: ' + res.success);\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"pages-list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/pages-list.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nMeteor.methods({\n  \"facebook-pages-list\": function (accountID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Facebook = FacebookConnection(connection.accessToken);\n\n    if (Facebook) {\n      let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n      let res = client(\"me/accounts\", {\n        fields: [\"id\", \"name\", \"category\", \"picture\", \"access_token\", \"link\", \"verification_status\", \"cover\"]\n      });\n      console.log(\"FACEBOOK-PAGES\", res);\n      return res;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"post-create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/post-create.jsx                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\n\nlet request = require('request').defaults({\n  encoding: null\n});\n\nMeteor.methods({\n  \"facebook-post-create\": function (connection, postData, callback) {\n    let client = FacebookConnection(connection.accessToken);\n\n    if (client) {\n      let postMessage = function (post) {\n        return client.api(\"me/feed\", \"post\", {\n          message: post.status\n        }, function (res) {\n          if (!res || res.error) {\n            console.log(!res ? \"error occurred\" : res.error);\n            return;\n          }\n\n          console.log('Post Id: ' + res.id);\n\n          if (callback) {\n            callback();\n          }\n        });\n      },\n          postImage = function (post) {\n        return request.get(post.media, function (error, response, body) {\n          if (!error && response.statusCode == 200) {\n            return client.api(\"me/photos\", \"post\", {\n              url: post.media,\n              caption: post.status\n            }, function (res) {\n              if (!res || res.error) {\n                console.log(!res ? 'error occurred' : res.error);\n                return;\n              }\n\n              console.log('Post Id: ' + res.post_id);\n\n              if (callback) {\n                callback();\n              }\n            });\n          }\n        });\n      };\n      /*console.log(\"FACEBOOK_POST_DATE:\", post.date, \"_CURRENT_TIME:\", new Date());*/\n\n\n      let message = {\n        status: postData.message //+ \"Scheduled at: \" + moment(post.date).format(\"h:m A\") + \" Posted at: \" + moment(new Date()).format(\"h:m A\")\n\n      };\n\n      if (postData.location) {\n        message.lat = postData.location[0];\n        message.long = postData.location[1];\n        message.display_coordinates = true;\n      }\n\n      if (postData.media) {\n        message.media = postData.media;\n      }\n\n      let query;\n\n      if (message.media) {\n        query = postImage(message);\n      } else {\n        query = postMessage(message);\n      }\n\n      return query;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"share-post.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/facebook/server/share-post.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FacebookConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    FacebookConnection = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nMeteor.methods({\n  \"facebook-share-post\": function (pageID, link, callback) {\n    check(pageID, String);\n    throw new Meteor.Errro(500, 'Page ID not available');\n    let account = SocialAccounts.findOne({\n      _id: pageID\n    });\n    let connection = account.connection;\n    let client = FacebookConnection(connection.accessToken);\n    const fbID = connection.id;\n\n    if (client) {\n      return client.api(`${fbID}/feed`, 'post', {\n        link: link\n      }, function (res) {\n        if (!res || res.error) {\n          console.log(!res ? 'error occurred' : res.error);\n          return;\n        }\n\n        if (callback) {\n          callback();\n        }\n\n        console.log('response: ', link);\n      });\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"google\":{\"server\":{\"adwords\":{\"ad-groups\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/ad-groups/bundle.jsx                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\nmodule.watch(require(\"./delete\"));\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/ad-groups/create.jsx                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet AdWordsConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    AdWordsConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet XML2JS;\nmodule.watch(require(\"xml2js\"), {\n  default(v) {\n    XML2JS = v;\n  }\n\n}, 2);\nMeteor.methods({\n  \"google-adwords-adGroup-create\": function (accountID, data) {\n    //console.log(\"google-adwords-adGroup-create\", accountID);\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n    let adGroupService = AdWords.getService('AdGroupService', 'v201708');\n    let adGroup = {\n      operator: \"ADD\",\n      operand: {\n        name: \"Test AdGroup \" + moment(new Date()).format(\"DD/MM/YYYY hh:mm:ss A\"),\n        biddingStrategyConfiguration: {\n          biddingStrategyType: \"ENHANCED_CPC\",\n          biddingStrategySource: \"CAMPAIGN\"\n        },\n        contentBidCriterionTypeGroup: \"KEYWORD\",\n        campaignId: 934093898,\n\n        /*campaign: {\n            campaignId: \"934093898\"\n        },\n        status: \"PAUSED\",*/\n        urlCustomParameters: {\n          parameters: [],\n          doReplace: false\n          /*,\n          settings: {\n             \"xsi:type\": \"TargetingSetting\",\n             details: [\n                 {\n                     criterionTypeGroup: \"KEYWORD\",\n                     targetAll: true\n                 }\n             ]\n          }*/\n\n        }\n      }\n    };\n    /*campaignService.get({serviceSelector}, (error, result) => {\n        console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n    });*/\n    //let res= await campaignService.get({serviceSelector});\n\n    let adGroupServiceClient = Meteor.wrapAsync(adGroupService.mutate, adGroupService);\n\n    try {\n      let adGroupRes = adGroupServiceClient({\n        operations: adGroup\n      }); //console.log(\"SYNC_RES\", adGroupRes);\n\n      return adGroupRes;\n    } catch (e) {\n      //console.log(\"ERROR\", typeof e.body, e);\n      let parser = Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n      return parser(e.body)[\"soap:Envelope\"][\"soap:Body\"][0][\"soap:Fault\"][0].faultstring[0];\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delete.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/ad-groups/delete.jsx                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"google-adwords-adGroup-delete\": function (accountID, adAccount, campaignID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n    let campaign = {};\n    let client = Meteor.wrapAsync(Twitter.delete, Facebook);\n\n    try {\n      return client(`${adAccount}/campaigns`, campaign);\n    } catch (e) {\n      //console.log(\"ERROR\", e);\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/ad-groups/list.jsx                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet AdWordsConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    AdWordsConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Adwords;\nmodule.watch(require(\"node-adwords\"), {\n  default(v) {\n    Adwords = v;\n  }\n\n}, 2);\nlet XML2JS;\nmodule.watch(require(\"xml2js\"), {\n  default(v) {\n    XML2JS = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"google-adwords-adGroup-list\": function (accountID) {\n    console.log(\"google-adwords-adGroup-list\", accountID);\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n    let adGroupService = AdWords.getService('AdGroupService', 'v201708');\n    let serviceSelector = {\n      fields: ['Id', 'Name', 'Status', 'AdGroupType', 'CampaignId', 'CampaignName'],\n      ordering: [{\n        field: 'Name',\n        sortOrder: 'ASCENDING'\n      }],\n      paging: {\n        startIndex: 0,\n        numberResults: 50\n      }\n    };\n    /*campaignService.get({serviceSelector}, (error, result) => {\n        console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n    });*/\n    //let res= await campaignService.get({serviceSelector});\n\n    console.log(\"adGroupService\", adGroupService);\n    let client = Meteor.wrapAsync(adGroupService.get, adGroupService);\n\n    try {\n      let res = client({\n        serviceSelector\n      });\n      console.log(\"SYNC_RES\", res);\n      return res;\n    } catch (e) {\n      console.log(\"ERROR\", typeof e.body, e);\n      let parser = Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n      return parser(e.body);\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/ad-groups/read.jsx                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet AdWordsConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    AdWordsConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Adwords;\nmodule.watch(require(\"node-adwords\"), {\n  default(v) {\n    Adwords = v;\n  }\n\n}, 2);\nlet XML2JS;\nmodule.watch(require(\"xml2js\"), {\n  default(v) {\n    XML2JS = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"google-adwords-adGroup-get\": function (accountID) {\n    //console.log(\"google-adwords-campaign-list\", accountID);\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n    let campaignService = AdWords.getService('CampaignService', 'v201708');\n    let serviceSelector = {\n      fields: ['Id', 'Name', 'Status', 'StartDate', 'EndDate'],\n      ordering: [{\n        field: 'Name',\n        sortOrder: 'ASCENDING'\n      }],\n      paging: {\n        startIndex: 0,\n        numberResults: 50\n      }\n    };\n    /*campaignService.get({serviceSelector}, (error, result) => {\n        console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n    });*/\n    //let res= await campaignService.get({serviceSelector});\n\n    let client = Meteor.wrapAsync(campaignService.get, campaignService);\n\n    try {\n      let res = client({\n        serviceSelector\n      }); //console.log(\"SYNC_RES\", res );\n\n      return res;\n    } catch (e) {\n      //console.log(\"ERROR\", typeof e.body, e);\n      let parser = Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n      return parser(e.body);\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"campaign\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/campaign/bundle.jsx                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\nmodule.watch(require(\"./delete\"));\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/campaign/create.jsx                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet AdWordsConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    AdWordsConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Adwords;\nmodule.watch(require(\"node-adwords\"), {\n  default(v) {\n    Adwords = v;\n  }\n\n}, 2);\nlet XML2JS;\nmodule.watch(require(\"xml2js\"), {\n  default(v) {\n    XML2JS = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"google-adwords-campaign-create\": function (accountID, data) {\n    console.log(\"google-adwords-campaign-create\", accountID);\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n    let campaignService = AdWords.getService('CampaignService', 'v201708');\n    let budgetService = AdWords.getService('BudgetService', 'v201708');\n    let budget = {\n      operator: \"ADD\",\n      operand: {\n        name: \"Test Budget \" + moment(new Date()).format(\"DD/MM/YYYY hh:mm:ss A\"),\n        amount: {\n          microAmount: \"50000000\"\n        }\n      }\n    };\n    let campaign = {\n      operator: \"ADD\",\n      operand: {\n        name: \"Test Campaign \" + moment(new Date()).format(\"DD/MM/YYYY hh:mm:ss A\"),\n        status: \"PAUSED\",\n        startDate: \"20170921\",\n        endDate: \"20371230\",\n        budget: {\n          budgetId: \"\"\n        },\n        settings: {\n          \"xsi:type\": \"GeoTargetTypeSetting\",\n          positiveGeoTargetType: \"DONT_CARE\"\n        },\n        advertisingChannelType: \"SEARCH\",\n        networkSetting: {\n          targetGoogleSearch: true,\n          targetSearchNetwork: true,\n          targetContentNetwork: false\n        },\n        biddingStrategyConfiguration: {\n          biddingScheme: {\n            \"xsi:type\": \"ManualCpcBiddingScheme\",\n            enhancedCpcEnabled: false\n          }\n        }\n      }\n    };\n    /*campaignService.get({serviceSelector}, (error, result) => {\n        console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n    });*/\n    //let res= await campaignService.get({serviceSelector});\n\n    let budgetClient = Meteor.wrapAsync(budgetService.mutate, budgetService);\n    let campaigClient = Meteor.wrapAsync(campaignService.mutate, campaignService);\n\n    try {\n      let budgetRes = budgetClient({\n        operations: budget\n      });\n      campaign.operand.budget.budgetId = budgetRes.value[0].budgetId;\n      let campaignRes = campaigClient({\n        operations: campaign\n      });\n      console.log(\"SYNC_RES\", campaignRes);\n      return campaignRes;\n    } catch (e) {\n      console.log(\"ERROR\", typeof e.body, e);\n      let parser = Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n      return parser(e.body)[\"soap:Envelope\"][\"soap:Body\"][0][\"soap:Fault\"][0].faultstring[0];\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delete.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/campaign/delete.jsx                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"google-adwords-campaign-delete\": function (accountID, adAccount, campaignID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n    let campaign = {};\n    let client = Meteor.wrapAsync(Twitter.delete, Facebook);\n\n    try {\n      return client(`${adAccount}/campaigns`, campaign);\n    } catch (e) {\n      console.log(\"ERROR\", e);\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/campaign/list.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet AdWordsConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    AdWordsConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Adwords;\nmodule.watch(require(\"node-adwords\"), {\n  default(v) {\n    Adwords = v;\n  }\n\n}, 2);\nlet XML2JS;\nmodule.watch(require(\"xml2js\"), {\n  default(v) {\n    XML2JS = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"google-adwords-campaign-list\": function (accountID) {\n    //console.log(\"google-adwords-campaign-list\", accountID);\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n    let campaignService = AdWords.getService('CampaignService', 'v201708');\n    let serviceSelector = {\n      fields: ['Id', 'Name', 'Status', 'StartDate', 'EndDate'],\n      ordering: [{\n        field: 'Name',\n        sortOrder: 'ASCENDING'\n      }],\n      paging: {\n        startIndex: 0,\n        numberResults: 50\n      }\n    };\n    /*campaignService.get({serviceSelector}, (error, result) => {\n        console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n    });*/\n    //let res= await campaignService.get({serviceSelector});\n\n    let client = Meteor.wrapAsync(campaignService.get, campaignService);\n\n    try {\n      let res = client({\n        serviceSelector\n      });\n      console.log(\"SYNC_RES\", res);\n      return res;\n    } catch (e) {\n      console.log(\"ERROR\", typeof e.body, e);\n      let parser = Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n      return parser(e.body);\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/campaign/read.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet AdWordsConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    AdWordsConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Adwords;\nmodule.watch(require(\"node-adwords\"), {\n  default(v) {\n    Adwords = v;\n  }\n\n}, 2);\nlet XML2JS;\nmodule.watch(require(\"xml2js\"), {\n  default(v) {\n    XML2JS = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"google-adwords-campaign-get\": function (accountID) {\n    console.log(\"google-adwords-campaign-list\", accountID);\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n    let campaignService = AdWords.getService('CampaignService', 'v201708');\n    let serviceSelector = {\n      fields: ['Id', 'Name', 'Status', 'StartDate', 'EndDate'],\n      ordering: [{\n        field: 'Name',\n        sortOrder: 'ASCENDING'\n      }],\n      paging: {\n        startIndex: 0,\n        numberResults: 50\n      }\n    };\n    /*campaignService.get({serviceSelector}, (error, result) => {\n        console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n    });*/\n    //let res= await campaignService.get({serviceSelector});\n\n    let client = Meteor.wrapAsync(campaignService.get, campaignService);\n\n    try {\n      let res = client({\n        serviceSelector\n      }); //console.log(\"SYNC_RES\", res );\n\n      return res;\n    } catch (e) {\n      //console.log(\"ERROR\", typeof e.body, e);\n      let parser = Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n      return parser(e.body);\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/bundle.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./campaign/bundle\"));\nmodule.watch(require(\"./ad-groups/bundle\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/adwords/connection.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Adwords;\nmodule.watch(require(\"node-adwords\"), {\n  default(v) {\n    Adwords = v;\n  }\n\n}, 0);\n\nlet AdWordsConnection = function (key, secret) {\n  let connection = {\n    developerToken: Meteor.settings.private.networks.google.AdWordsToken,\n    //your adwords developerToken\n    userAgent: 'IBOL',\n    //any company name\n    clientCustomerId: '856-177-2452',\n    //'530-908-7582', //the Adwords Account id (e.g. 123-123-123)\n    client_id: \"666001639290-4ockfbrs6nruqfds6jkugk1g8mctffe2.apps.googleusercontent.com\",\n    //this is the api console client_id\n    client_secret: \"xmMAWuSkSv99ENIjVCHNTUf9\",\n    access_token: secret,\n    refresh_token: secret\n  }; //console.log(\"ADWORDS_CONNECTION\", connection);\n\n  return new Adwords.AdwordsUser(connection);\n};\n\nmodule.exportDefault(AdWordsConnection);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/bundle.jsx                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./connection\"));\nmodule.watch(require(\"./search\"));\nmodule.watch(require(\"./adwords/bundle\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/connection.jsx                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet GoogleSearch;\nmodule.watch(require(\"google-search\"), {\n  default(v) {\n    GoogleSearch = v;\n  }\n\n}, 0);\n\nlet GoogleSearchConnection = function () {\n  return new GoogleSearch({\n    key: Meteor.settings.private.networks.google.searchApiKey,\n    cx: \"001142422321320148592:ikfvsltk4bw\"\n  });\n};\n\nmodule.exportDefault(GoogleSearchConnection);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"search.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google/server/search.jsx                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet GoogleSearchConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    GoogleSearchConnection = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"google-search\": function (query) {\n    let client = GoogleSearchConnection();\n    let syncClient = Meteor.wrapAsync(client.build, client);\n    return syncClient({\n      q: query,\n      start: 5,\n      num: 10 // Number of search results to return between 1 and 10, inclusive\n\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"twitter\":{\"server\":{\"ads\":{\"accounts\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/accounts/bundle.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./list\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/accounts/list.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"twt-ads-accounts-list\": function (accountID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n    Twitter.get(`accounts`, {}, function (err, res) {\n      console.log(\"ACOCUNTS\", err, res);\n    });\n    let client = Meteor.wrapAsync(Twitter.get, Facebook);\n\n    try {\n      return client(`accounts`);\n    } catch (e) {\n      //console.log(\"ERROR\", e);\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"campaign\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/campaign/bundle.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\nmodule.watch(require(\"./delete\"));\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/campaign/create.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"twt-ads-campaign-create\": function (accountID, adAccount, data) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n    let campaign = {};\n    let client = Meteor.wrapAsync(Twitter.post, Facebook);\n\n    try {\n      return client(`${adAccount}/campaigns`, campaign);\n    } catch (e) {\n      //console.log(\"ERROR\", e);\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delete.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/campaign/delete.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"twt-ads-campaign-delete\": function (accountID, adAccount, campaignID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n    let campaign = {};\n    let client = Meteor.wrapAsync(Twitter.delete, Facebook);\n\n    try {\n      return client(`${adAccount}/campaigns`, campaign);\n    } catch (e) {\n      //console.log(\"ERROR\", e);\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/campaign/list.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"twt-ads-campaign-list\": function (accountID, adAccount, campaignID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n    let campaign = {};\n    let client = Meteor.wrapAsync(Twitter.get, Facebook);\n\n    try {\n      return client(`${adAccount}/campaigns`, campaign);\n    } catch (e) {\n      //console.log(\"ERROR\", e);\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/campaign/read.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"twt-ads-campaign-get\": function (accountID, adAccount, campaignID) {\n    let account = SocialAccounts.findOne({\n      _id: accountID\n    });\n    let connection = account.connection;\n    let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n    let campaign = {};\n    let client = Meteor.wrapAsync(Twitter.get, Facebook);\n\n    try {\n      return client(`${adAccount}/campaigns`, campaign);\n    } catch (e) {\n      //console.log(\"ERROR\", e);\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"line-item\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/line-item/bundle.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./create\"));\nmodule.watch(require(\"./delete\"));\nmodule.watch(require(\"./list\"));\nmodule.watch(require(\"./read\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/line-item/create.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"delete.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/line-item/delete.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"list.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/line-item/list.jsx                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"read.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/line-item/read.jsx                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/bundle.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./campaign/bundle\"));\nmodule.watch(require(\"./line-item/bundle\"));\nmodule.watch(require(\"./accounts/bundle\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/ads/connection.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterAdsAPI;\nmodule.watch(require(\"twitter-ads\"), {\n  default(v) {\n    TwitterAdsAPI = v;\n  }\n\n}, 0);\n\nlet TwitterConnection = function (key, secret) {\n  //console.log(\"TWITTER_ADS_Connection\", key, secret);\n  return new TwitterAdsAPI({\n    consumer_key: Meteor.settings.private.networks.twitter.consumerKey,\n    consumer_secret: Meteor.settings.private.networks.twitter.secret,\n    access_token: key,\n    access_token_secret: secret,\n    sandbox: true,\n    // defaults to true\n    api_version: '2'\n  });\n};\n\nmodule.exportDefault(TwitterConnection);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"account-stats.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/account-stats.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"twitter-account-stats\": function (screenName, profile) {\n    if (!profile) {\n      profile = SocialAccounts.findOne({\n        \"network\": \"twitter\"\n      });\n    }\n\n    if (!profile) {\n      throw new Meteor.Error(\"There's no matching profile\");\n      return;\n    }\n\n    let connection = profile.connection,\n        client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (profile) {\n      let posts = [];\n\n      let syncClient = Meteor.wrapAsync(client.get, client),\n          getTweets = function (max_id) {\n        let query = {\n          screen_name: screenName,\n          count: 200,\n          include_rts: 0,\n          exclude_replies: 1\n        };\n\n        if (max_id) {\n          query.max_id = max_id;\n        }\n\n        let result = syncClient(\"statuses/user_timeline\", query),\n            lastTweet = result[result.length - 1];\n        posts = [...posts, ...result];\n\n        if (lastTweet) {\n          if (max_id) {\n            if (max_id !== lastTweet.id) {\n              getTweets(lastTweet.id);\n            }\n          } else {\n            getTweets(lastTweet.id);\n          }\n        }\n      };\n\n      getTweets();\n      const first = posts[0];\n      const last = posts[posts.length - 1];\n      let retweets = 0;\n      let favorites = 0;\n\n      for (const x of posts) {\n        retweets += x.retweet_count;\n        favorites += x.favorite_count;\n      }\n\n      let user = posts[0].user;\n      let result = {\n        retweets,\n        retweetsPerPost: retweets / posts.length,\n        favorites,\n        favoritesPerPost: favorites / posts.length,\n        engagement: (retweets + favorites) / posts.length / user.followers_count,\n        followers: user.followers_count,\n        following: user.friends_count,\n        posts: user.statuses_count,\n        postsPerDay: posts.length / Math.abs(moment(new Date(first.created_at)).diff(moment(new Date(last.created_at)), \"days\"))\n      };\n      Object.keys(result).forEach(key => {\n        if (Number.isNaN(result[key])) {\n          result[key] = 0;\n        }\n      });\n\n      if (result.postsPerDay === Infinity) {\n        result.postsPerDay = 0;\n      }\n\n      return result;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/bundle.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./post-create\"));\nmodule.watch(require(\"./account-stats\"));\nmodule.watch(require(\"./search\"));\nmodule.watch(require(\"./trending\"));\nmodule.watch(require(\"./ads/bundle\"));\nmodule.watch(require(\"./cover-profile-photo\"));\nmodule.watch(require(\"./interactions\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/connection.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Twitter;\nmodule.watch(require(\"twitter\"), {\n  default(v) {\n    Twitter = v;\n  }\n\n}, 0);\n\nlet TwitterConnection = function (key, secret) {\n  return new Twitter({\n    consumer_key: Meteor.settings.private.networks.twitter.consumerKey,\n    consumer_secret: Meteor.settings.private.networks.twitter.secret,\n    access_token_key: key,\n    access_token_secret: secret\n  });\n};\n\nmodule.exportDefault(TwitterConnection);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cover-profile-photo.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/cover-profile-photo.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet encode, decode;\nmodule.watch(require(\"node-base64-image\"), {\n  encode(v) {\n    encode = v;\n  },\n\n  decode(v) {\n    decode = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"twitter-update-profile-photo\": function (connection, coverURL, callback) {\n    if (typeof connection === 'string') {\n      let account = SocialAccounts.findOne({\n        _id: connection\n      });\n      connection = account.connection;\n    }\n\n    console.log(connection);\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      return encode(coverURL, {\n        string: true\n      }, function (err, image) {\n        if (err) {\n          console.log('Error: ' + err);\n        } //console.log('image: ',res)\n\n\n        return client.post('account/update_profile_image', {\n          image\n        }, function (error, tweet, response) {\n          if (error) {\n            console.log('Error: ', error);\n          }\n\n          console.log(tweet);\n\n          if (callback) {\n            callback();\n          }\n        });\n      });\n    }\n  },\n  \"twitter-update-cover-photo\": function (connection, coverURL, callback) {\n    if (typeof connection === 'string') {\n      let account = SocialAccounts.findOne({\n        _id: connection\n      });\n      connection = account.connection;\n    }\n\n    console.log(connection);\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      return encode(coverURL, {\n        string: true\n      }, function (err, banner) {\n        if (err) {\n          console.log('Error: ' + err);\n        } //console.log('image: ',res)\n\n\n        return client.post('account/update_profile_banner', {\n          banner\n        }, function (error, tweet, response) {\n          if (error) {\n            console.log('Error: ', error);\n          }\n\n          if (callback) {\n            callback();\n          }\n        });\n      });\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"interactions.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/interactions.jsx                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nlet encode, decode;\nmodule.watch(require(\"node-base64-image\"), {\n  encode(v) {\n    encode = v;\n  },\n\n  decode(v) {\n    decode = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"twitter-follow-profile\": function (connection, screen_name, callback) {\n    if (typeof connection === 'string') {\n      let account = SocialAccounts.findOne({\n        _id: connection\n      });\n      connection = account.connection;\n    }\n\n    console.log(connection);\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      return client.post('friendships/create', {\n        screen_name\n      }, function (error, tweet, response) {\n        if (error) {\n          console.log('Error: ', error);\n        }\n\n        console.log(tweet);\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  },\n  \"twitter-unfollow-profile\": function (connection, screen_name, callback) {\n    if (typeof connection === 'string') {\n      let account = SocialAccounts.findOne({\n        _id: connection\n      });\n      connection = account.connection;\n    }\n\n    console.log(connection);\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      return client.post('friendships/destroy', {\n        screen_name\n      }, function (error, tweet, response) {\n        if (error) {\n          console.log('Error: ', error);\n        }\n\n        console.log(tweet);\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  },\n  \"twitter-retweet\": function (connection, id, callback) {\n    if (typeof connection === 'string') {\n      let account = SocialAccounts.findOne({\n        _id: connection\n      });\n      connection = account.connection;\n    }\n\n    console.log(connection);\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      return client.post('statuses/retweet', {\n        id\n      }, function (error, tweet, response) {\n        if (error) {\n          console.log('Error: ', error);\n        }\n\n        console.log(tweet);\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  },\n  \"twitter-like\": function (connection, id, callback) {\n    if (typeof connection === 'string') {\n      let account = SocialAccounts.findOne({\n        _id: connection\n      });\n      connection = account.connection;\n    }\n\n    console.log(connection);\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      return client.post('favorites/create', {\n        id\n      }, function (error, tweet, response) {\n        if (error) {\n          console.log('Error: ', error);\n        }\n\n        console.log(tweet);\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"post-create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/post-create.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\n\nlet request = require('request').defaults({\n  encoding: null\n});\n\nMeteor.methods({\n  \"twitter-post-create\": function (connection, post, callback) {\n    if (typeof connection === 'string') {\n      let account = SocialAccounts.findOne({\n        _id: connection\n      });\n      connection = account.connection;\n    }\n\n    const tweetID = connection.id;\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      /*console.log(\"TWITTER_CLIENT\",client.post);*/\n      let postMessage = function (post) {\n        return client.post('statuses/update', post, function (error, tweet, response) {\n          if (error) {\n            throw new Meteor.Error(\"Twitter: Failed to Post\", error);\n          }\n\n          if (callback) {\n            callback();\n          }\n        });\n      },\n          postImage = function (post) {\n        request.get(post.media, function (error, response, body) {\n          if (!error && response.statusCode == 200) {\n            client.post('media/upload', {\n              media: body\n            }, function (error, media, response) {\n              if (error) {\n                console.log(error);\n                return new Meteor.Error(\"Twitter: Failed to Upload Media\");\n              }\n\n              if (!error) {\n                post.media_ids = media.media_id_string;\n                delete post.media;\n                return postMessage(post);\n              }\n            });\n          }\n        });\n      };\n\n      console.log(\"TWITTER_POST_DATE:\", post.date, \"_CURRENT_TIME:\", new Date());\n      let message = {\n        status: post.message // + \"Scheduled at: \" + moment(post.date).format(\"h:m A\") + \" Posted at: \" + moment(new Date()).format(\"h:m A\")\n\n      };\n\n      if (post.location) {\n        message.lat = post.location[0];\n        message.long = post.location[1];\n        message.display_coordinates = true;\n      }\n\n      if (post.media) {\n        message.media = post.media;\n      }\n\n      let query;\n\n      if (message.media) {\n        query = postImage(message);\n      } else {\n        query = postMessage(message);\n      }\n\n      return query;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"search.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/search.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet TwitterConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"twitter-search\": function (query) {\n    let account = SocialAccounts.findOne({\n      network: \"twitter\",\n      connection: {\n        $exists: true\n      }\n    });\n    let connection = account.connection;\n    /*connection={\n        accessToken:\"825526971505446912-BKiaP4KjYkYFfMCmYDc2AkLZjpcLkV0\",\n        accessTokenSecret:\"UZXTVYOiaIgh50kaDxNFRSx9wbAzWF67ndT9UFvcWurto\"\n    }*/\n\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n    let syncClient = Meteor.wrapAsync(client.get, client);\n    return syncClient(\"search/tweets\", {\n      q: query,\n      count: 100\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"trending.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/twitter/server/trending.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet TwitterConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    TwitterConnection = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"twitter-trends-available\": function () {\n    let account = SocialAccounts.findOne({\n      network: \"twitter\",\n      connection: {\n        $exists: true\n      }\n    });\n    let connection = account.connection;\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      let syncClient = Meteor.wrapAsync(client.get, client);\n      return syncClient('trends/available');\n    }\n  },\n  \"twitter-trends-place\": function (woeid) {\n    let account = SocialAccounts.findOne({\n      network: \"twitter\",\n      connection: {\n        $exists: true\n      }\n    });\n    let connection = account.connection;\n    let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n    if (client) {\n      let syncClient = Meteor.wrapAsync(client.get, client);\n\n      try {\n        return syncClient('trends/place', {\n          id: woeid\n        });\n      } catch (e) {\n        return [{\n          trends: []\n        }];\n      }\n    }\n  },\n  \"twitter-find-promoted-trending\": function () {\n    let places = Meteor.call(\"twitter-trends-available\");\n    let promoted = [];\n    places.forEach((place, index) => {\n      if (index > 70) return;\n      let trendings = Meteor.call(\"twitter-trends-place\", place.woeid);\n      trendings.forEach(trend => {\n        if (trend.promoted_content) {\n          promoted.push(trend);\n        }\n      });\n    });\n    return promoted;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"core\":{\"server\":{\"users\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/users/bundle.jsx                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./methods\"));\nmodule.watch(require(\"./onLogin\"));\nmodule.watch(require(\"./on-creation\"));\nmodule.watch(require(\"./native-auth\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/users/methods.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet md5;\nmodule.watch(require(\"md5\"), {\n  default(v) {\n    md5 = v;\n  }\n\n}, 2);\nlet Schema;\nmodule.watch(require(\"./schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 3);\nMeteor.methods({\n  users_create_account: function (email, password, plan, source) {\n    let defaultUser = Schema;\n\n    if (source && source.type) {\n      defaultUser.source = source;\n    }\n\n    let accountData = Accounts.createUser({\n      email: email,\n      password: password,\n      profile: defaultUser.profile\n    });\n    /*\n     if(typeof(accountData)===\"string\"){\n     console.log(\"Create Stripe ID\");\n     Meteor.call('payments_customer_create',accountData,plan);\n     }*/\n\n    return accountData;\n  },\n  users_update_profile: function (profile) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n    return {\n      stauts: \"success\"\n    };\n  },\n  users_change_password: function (userID, password) {\n    return false;\n    let change = Accounts.setPassword(userID, password);\n    return {\n      stauts: \"success\"\n    };\n  },\n  users_check_password: function (digest) {\n    check(digest, String);\n\n    if (this.userId) {\n      let user = Meteor.user();\n      let password = {\n        digest: digest,\n        algorithm: 'sha-256'\n      };\n\n      let result = Accounts._checkPassword(user, password);\n\n      return result.error == null;\n    } else {\n      return false;\n    }\n  },\n  \"users-get-flags\": function () {\n    let user = Meteor.user();\n    let userData = Meteor.users.findOne({\n      _id: user._id\n    }, {\n      fields: {\n        flags: 1\n      }\n    });\n    return userData.flags;\n  },\n  \"users-update-flag\": function (flag, value) {\n    check(flag, String);\n    check(value, Boolean);\n    let user = Meteor.user();\n\n    if (!user) {\n      throw new Meteor.Error(500, \"Use Doesn't Exist\");\n    }\n\n    let flags = Object.assign({}, user.flags);\n    flags[flag] = value;\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        flags\n      }\n    });\n  },\n  \"users-update-modal-profile\": function (data) {\n    let user = Meteor.user();\n\n    if (!user) {\n      throw new Meteor.Error(500, \"Use Doesn't Exist\");\n    }\n\n    let profile = Object.assign({}, user.profile, data);\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        profile\n      }\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"native-auth.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/users/native-auth.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nMeteor.methods({\n  'native-authentication': (service, data) => {\n    // Check service is a string\n    check(service, String); // Check data is an object\n\n    check(data, Object);\n    console.log('SERVICE', service);\n    console.log('DATA', data); // Initialize query object\n\n    const query = {}; // Set query for service\n\n    query[`services[${service}].id`] = data.id; // Find matching account\n\n    const user = Meteor.users.findOne(query); // If match found\n\n    if (user) {\n      // Return Token for login\n      return Accounts.impSvc.set(user._id);\n    } // Create Identity Object\n\n\n    const identity = {};\n    const newUser = {\n      services: {},\n      profile: {\n        name: identity.name\n      },\n      emails: [{\n        address: identity.email,\n        verified: true\n      }]\n    }; // Set Oauth service data\n\n    newUser.services[service] = data; // Insert new user data\n\n    userId = Meteor.users.insert(newUser); // Return Token for login\n\n    return Accounts.impSvc.set(userId);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"on-creation.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/users/on-creation.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAccounts.onCreateUser(function (options, user) {\n  //console.log(\"USER_CREATE\", user);\n  let isSocial = false;\n  let socialProfile = {\n    name: null,\n    lname: null,\n    email: null,\n    avatar: null\n  },\n      serviceData,\n      serviceName;\n\n  if (user.services) {\n    if (user.services.facebook) {\n      serviceName = \"facebook\";\n      isSocial = true;\n      serviceData = user.services.facebook;\n      socialProfile.name = serviceData.first_name;\n      socialProfile.lname = serviceData.last_name;\n      socialProfile.email = serviceData.email;\n      socialProfile.avatar = \"http://graph.facebook.com/\" + serviceData.id + \"/picture/?type=large\";\n    }\n\n    if (user.services.google) {\n      serviceName = \"google\";\n      isSocial = true;\n      serviceData = user.services.google;\n      socialProfile.name = serviceData.given_name;\n      socialProfile.lname = serviceData.family_name;\n      socialProfile.email = serviceData.email;\n      socialProfile.avatar = serviceData.picture;\n    }\n\n    if (user.services.twitter) {\n      serviceName = \"twitter\";\n      isSocial = true;\n      serviceData = user.services.twitter;\n      socialProfile.name = serviceData.screenName;\n      socialProfile.avatar = serviceData.profile_image_url_https;\n    }\n\n    if (user.services.instagram) {\n      serviceName = \"instagram\";\n      isSocial = true;\n      serviceData = user.services.instagram;\n      socialProfile.name = serviceData.full_name;\n      socialProfile.avatar = serviceData.profile_picture;\n    }\n  }\n\n  if (!user.profile) {\n    user.profile = {};\n  }\n\n  if (isSocial) {\n    user.profile.name = socialProfile.name;\n    user.profile.lastName = socialProfile.lname;\n    user.profile.avatar = socialProfile.avatar; //Insert Email\n\n    if (socialProfile.email) {\n      let email = {\n        address: socialProfile.email,\n        verified: true\n      };\n      user.emails = [email];\n    } //TODO: REVIEW THIS\n\n    /*Meteor.call(\"profile-create\", user, {\n        serviceName,\n        serviceData\n    })*/\n\n  }\n\n  return user;\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"onLogin.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/users/onLogin.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet Schema;\nmodule.watch(require(\"./schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 2);\nlet md5;\nmodule.watch(require(\"md5\"), {\n  default(v) {\n    md5 = v;\n  }\n\n}, 3);\nAccounts.onLogin(function (loginObj) {\n  let currentUser = loginObj.user;\n  let dbUser = Meteor.users.findOne({\n    _id: currentUser._id\n  });\n  let currentProfile = currentUser.profile;\n  let profile = Object.assign({}, Schema.profile, currentProfile);\n  profile.lastSeen = new Date();\n\n  if (!profile.avatar) {\n    profile.avatar = \"https://www.gravatar.com/avatar/\" + md5(currentUser.emails[0].address);\n  }\n\n  if (loginObj.type === \"resume\") {\n    if (profile.loginCount) {\n      profile.loginCount++;\n    } else {\n      profile.loginCount = 1;\n    }\n  }\n\n  let user = Object.assign({}, Schema, dbUser, {\n    profile\n  });\n  Meteor.users.update(user._id, user);\n  return true;\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/users/schema.jsx                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  isSuspended: false,\n  profile: {\n    avatar: null,\n    name: null,\n    lastName: null,\n    phone: null,\n    profile: null,\n    settings: {\n      notifications: {\n        browser: true,\n        email: false\n      }\n    },\n    address: {\n      address1: null,\n      address2: null,\n      city: null,\n      state: null,\n      zipCode: null,\n      country: null\n    },\n    loginCount: 0,\n    score: 0\n  },\n  stripe: {\n    id: null\n  },\n  zendesk: {\n    id: null\n  },\n  mixpanel: {\n    id: null\n  },\n  subscription: {\n    mainPlan: null\n  },\n  source: {\n    type: null,\n    id: null\n  },\n  flags: {\n    hasShared: false,\n    askedForCard: false,\n    hasUpgraded: false,\n    askedProfileData: false,\n    prizes: {\n      login: {\n        _100: false,\n        _1000: false,\n        _10000: false\n      }\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/bundle.jsx                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./notifications\"));\nmodule.watch(require(\"./rss-feed\"));\nmodule.watch(require(\"./users/bundle\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notifications.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/notifications.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"notifications-create\": function (userID, data) {\n    //console.log(\"NOTIFICATIONS_CRATE\");\n    let params = {\n      courier: 'appNotifications',\n      //required\n      data: {\n        //optional and whatever you need\n        type: \"info\",\n        title: data.title,\n        description: data.description\n      }\n    };\n\n    if (data.url) {\n      params.url = data.url;\n    }\n\n    return Herald.createNotification(userID, params);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"rss-feed.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/core/server/rss-feed.jsx                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Feed;\nmodule.watch(require(\"feed-read-parser\"), {\n  default(v) {\n    Feed = v;\n  }\n\n}, 1);\nlet jsdom;\nmodule.watch(require(\"jsdom\"), {\n  default(v) {\n    jsdom = v;\n  }\n\n}, 2);\nMeteor.methods({\n  \"rss-feed\": function (url) {\n    let syncFeed = Meteor.wrapAsync(Feed);\n    let syncDom = Meteor.wrapAsync(jsdom.env, jsdom);\n    return syncFeed(url).map(a => {\n      let __PATH__ = a.link.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[0];\n      let dom = syncDom(a.content);\n      let {\n        author,\n        title,\n        link\n      } = a;\n      let image = dom.document.getElementsByTagName(\"img\")[0];\n      let article = {\n        author,\n        title,\n        link,\n        image: image ? image.src : \"http://viralizing.me/wp-content//uploads/2017/03/60fa9bmxvpe-redd-angelo-uai-258x145.jpg\"\n      };\n      return article;\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"stripe\":{\"server\":{\"core\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/core/bundle.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./customers\"));\nmodule.watch(require(\"./charges\"));\nmodule.watch(require(\"./refunds\"));\nmodule.watch(require(\"./transfers\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"charges.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/core/charges.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_charges_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      amount: Number,\n      currency: String,\n      application_fee: Match.Maybe(Number),\n      capture: Match.Maybe(Boolean),\n      description: Match.Maybe(String),\n      destination: Match.Maybe(Match.ObjectIncluding({\n        account: Match.Maybe(Object),\n        amount: Match.Maybe(Number)\n      })),\n      transfer_group: Match.Maybe(String),\n      on_behalf_of: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      receipt_email: Match.Maybe(String),\n      shipping: Match.Maybe(Object),\n      customer: Match.Maybe(String),\n      source: Match.Maybe(String)\n    });\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (user && user.emails[0]) {\n      data.receipt_email = user.emails[0].address;\n    }\n\n    if (!data.source) {\n      if (!user.stripe.id) {\n        throw new Meteor.Error(500, \"[Stripe Charges] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n      }\n\n      data.customer = user.stripe.id;\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.create, client.charges);\n    return method(data);\n  },\n  \"stripe_charges_update\": function (chargeID, data) {\n    if (!chargeID) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe User Data Provided\");\n    }\n\n    check(chargeID, String);\n    check(data, {\n      description: Match.Maybe(String),\n      fraud_details: Match.Maybe(Object),\n      metadata: Match.Maybe(Object),\n      receipt_email: Match.Maybe(String),\n      destination: Match.Maybe(Match.ObjectIncluding({\n        address: Match.Maybe(Match.ObjectIncluding({\n          line1: String,\n          city: Match.Maybe(String),\n          country: Match.Maybe(String),\n          lin2: Match.Maybe(String),\n          postal_code: Match.Maybe(String),\n          state: Match.Maybe(String)\n        })),\n        name: String,\n        carrier: Match.Maybe(String),\n        phone: Match.Maybe(String),\n        tracking_number: Match.Maybe(String)\n      })),\n      transfer_group: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.update, client.charges);\n    return method(chargeID, data);\n  },\n  \"stripe_charges_get\": function (chargeID) {\n    if (!chargeID) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n    }\n\n    check(chargeID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.retrieve, client.charges);\n    return method(chargeID);\n  },\n  \"stripe_charges_capture\": function (chargeID, data) {\n    if (!chargeID) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n    }\n\n    check(chargeID, String);\n    check(data, {\n      amount: Match.Maybe(Number),\n      application_fee: Match.Maybe(Number),\n      receipt_email: Match.Maybe(String),\n      statement_descriptor: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.capture, client.charges);\n    return method(chargeID, data);\n  },\n  \"stripe_charges_list\": function (query) {\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Charges] - No Query Provided\");\n    }\n\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      customer: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      source: Match.Maybe(Match.ObjectIncluding({\n        object: Match.Maybe(String)\n      })),\n      starting_after: Match.Maybe(String),\n      transfer_group: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.charges.list, client.charges);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"customers.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/core/customers.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_customers_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      account_balance: Match.Maybe(Number),\n      business_vat_id: Match.Maybe(String),\n      coupon: Match.Maybe(String),\n      description: Match.Maybe(String),\n      email: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      shipping: Match.Maybe(Object),\n      source: Match.Maybe(Object)\n    });\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - User (\" + user._id + \") already has a Stripe account.\");\n    }\n\n    if (user && user.emails[0]) {\n      data.email = user.emails[0].address;\n    }\n\n    if (user && user.profile) {\n      data.description = (user.profile.name || \"\") + \" \" + (user.profile.lastName || \"\") + \"-[\" + user._id + \"]\";\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.create, client.customers);\n    let stripeRes = method(data);\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        stripe: Object.assign({}, user.stripe, {\n          id: stripeRes.id\n        })\n      }\n    });\n    return stripeRes;\n  },\n  \"stripe_customers_update\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      account_balance: Match.Maybe(Number),\n      business_vat_id: Match.Maybe(String),\n      coupon: Match.Maybe(String),\n      default_source: Match.Maybe(String),\n      description: Match.Maybe(String),\n      email: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      shipping: Match.Maybe(Object),\n      source: Match.Maybe(Object)\n    });\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (user && user.emails[0]) {\n      data.email = user.emails[0].address;\n    }\n\n    if (!data.description && user && user.profile) {\n      data.description = (user.profile.name || \"\") + \" \" + (user.profile.lastName || \"\") + \" - [\" + user._id + \"]\";\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.update, client.customers);\n    let stripeRes = method(user.stripe.id, data);\n    return stripeRes;\n  },\n  \"stripe_customers_get\": function (user) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user || !user.stripe || !user.stripe.id) {\n      Meteor.call(\"stripe_customers_create\", user, {});\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user || !user.stripe || !user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - User or Stripe data doesn't exist.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.retrieve, client.customers);\n    return method(user.stripe.id);\n  },\n  \"stripe_customers_delete\": function (user) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.emails[0] || !user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user || !user.stripe || !user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - User or Stripe data doesn't exist.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.del, client.customers);\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        stripe: {\n          id: null,\n          cards: []\n        }\n      }\n    });\n    return method(user.stripe.id);\n  },\n  \"stripe_customers_list\": function (query) {\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Query Provided\");\n    }\n\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.list, client.customers);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"refunds.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/core/refunds.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_refunds_create\": function (data) {\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Refunds] - No Refund Data Provided\");\n    }\n\n    check(data, {\n      charge: String,\n      amount: Match.Maybe(Number),\n      metadata: Match.Maybe(Object),\n      reason: Match.Maybe(String),\n      refund_application_fee: Match.Maybe(String),\n      reverse_transfer: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.refunds.create, client.refunds);\n    return method(data);\n  },\n  \"stripe_refunds_update\": function (refundID, data) {\n    if (!refundID) {\n      throw new Meteor.Error(500, \"[Stripe Refunds] - No Stripe Refund ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Refunds] - No Stripe Refund Data Provided\");\n    }\n\n    check(refundID, String);\n    check(data, {\n      metadata: Match.Maybe(Object)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.refunds.update, client.refunds);\n    return method(refundID, data);\n  },\n  \"stripe_refunds_get\": function (refundID) {\n    if (!refundID) {\n      throw new Meteor.Error(500, \"[Stripe Refunds] - No Stripe Refund ID Provided\");\n    }\n\n    check(refundID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.refunds.retrieve, client.refunds);\n    return method(refundID);\n  },\n  \"stripe_refunds_list\": function (query) {\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Refunds] - No Query Provided\");\n    }\n\n    check(query, {\n      charge: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.refunds.list, client.refunds);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"transfers.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/core/transfers.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_transfers_create\": function (data) {\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Transfer Data Provided\");\n    }\n\n    check(data, {\n      amount: Number,\n      application_fee: Match.Maybe(Number),\n      currency: String,\n      destination: String,\n      description: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      source_transaction: Match.Maybe(String),\n      statement_descriptor: Match.Maybe(String),\n      source_type: Match.Maybe(String),\n      method: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.transfers.create, client.transfers);\n    return method(data);\n  },\n  \"stripe_transfers_update\": function (transferID, data) {\n    if (!transferID) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer Data Provided\");\n    }\n\n    check(transferID, String);\n    check(data, {\n      description: Match.Maybe(String),\n      metadata: Match.Maybe(Object)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.transfers.update, client.transfers);\n    return method(transferID, data);\n  },\n  \"stripe_transfers_get\": function (transferID) {\n    if (!transferID) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer ID Provided\");\n    }\n\n    check(transferID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.transfers.retrieve, client.transfers);\n    return method(transferID);\n  },\n  \"stripe_transfers_list\": function (query) {\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Transfers] - No Query Provided\");\n    }\n\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      date: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      destination: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String),\n      status: Match.Maybe(String),\n      transfer_group: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.transfers.list, client.transfers);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"payment-methods\":{\"bank-accounts.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/payment-methods/bank-accounts.jsx                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_bank_accounts_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      source: Match.OneOf(String, Match.ObjectIncluding({\n        object: String,\n        account_number: String,\n        country: String,\n        currency: String,\n        account_holder_name: String,\n        account_holder_type: String,\n        routing_number: String\n      })),\n      metadata: Match.Maybe(Object)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.createSource, client.customers);\n    return method(user.stripe.id, data);\n  },\n  \"stripe_bank_accounts_update\": function (user, accountID, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!accountID) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account Data Provided\");\n    }\n\n    check(user, Object);\n    check(accountID, String);\n    check(data, {\n      account_holder_name: Match.Maybe(String),\n      account_holder_type: Match.Maybe(String),\n      metadata: Match.Maybe(Object)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.updateCard, client.customers);\n    return method(user.stripe.id, accountID, data);\n  },\n  \"stripe_bank_accounts_get\": function (user, accountID) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!accountID) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n    }\n\n    check(user, Object);\n    check(accountID, String);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.retrieveSource, client.customers);\n    return method(user.stripe.id, accountID);\n  },\n  \"stripe_bank_accounts_delete\": function (user, accountID) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!accountID) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n    }\n\n    check(user, Object);\n    check(accountID, String);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.deleteSource, client.customers);\n    return method(user.stripe.id, accountID);\n  },\n  \"stripe_bank_accounts_verify\": function (user, accountID, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!accountID) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe User Data Provided\");\n    }\n\n    check(user, Object);\n    check(accountID, String);\n    check(data, {\n      amounts: [Number],\n      verification_method: Match.Maybe(Object)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.verifySource, client.customers);\n    return method(user.stripe.id, accountID, data);\n  },\n  \"stripe_bank_accounts_list\": function (user, query) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n    }\n\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Query Provided\");\n    }\n\n    check(user, Object);\n    check(query, {\n      object: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    query.object = \"bank_account\";\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.listSources, client.customers);\n    return method(user.stripe.id, query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/payment-methods/bundle.jsx                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./bank-accounts\"));\nmodule.watch(require(\"./cards\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cards.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/payment-methods/cards.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_cards_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Stripe Card Data Provided\");\n    }\n\n    check(user, Object);\n    check(data, {\n      source: Match.OneOf(String, Match.ObjectIncluding({\n        object: String,\n        exp_month: Number,\n        exp_year: Number,\n        number: Number,\n        address_city: Match.Maybe(String),\n        address_country: Match.Maybe(String),\n        address_line1: Match.Maybe(String),\n        address_line2: Match.Maybe(String),\n        address_state: Match.Maybe(String),\n        address_zip: Match.Maybe(String),\n        currency: Match.Maybe(Object),\n        cvc: String,\n        default_for_currency: Match.Maybe(String),\n        metadata: Match.Maybe(Object),\n        name: Match.Maybe(String)\n      })),\n      metadata: Match.Maybe(Object)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.createSource, client.customers);\n    return method(user.stripe.id, data);\n  },\n  \"stripe_cards_update\": function (user, cardID, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n    }\n\n    if (!cardID) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Stripe Card ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Stripe Card Data Provided\");\n    }\n\n    check(user, Object);\n    check(cardID, String);\n    check(data, {\n      address_city: Match.Maybe(String),\n      address_country: Match.Maybe(String),\n      address_line1: Match.Maybe(String),\n      address_line2: Match.Maybe(String),\n      address_state: Match.Maybe(String),\n      address_zip: Match.Maybe(String),\n      exp_month: Match.Maybe(Number),\n      exp_year: Match.Maybe(Number),\n      metadata: Match.Maybe(Object),\n      name: Match.Maybe(String)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.updateCard, client.customers);\n    return method(user.stripe.id, cardID, data);\n  },\n  \"stripe_cards_get\": function (user, cardID) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n    }\n\n    if (!cardID) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Stripe Card ID Provided\");\n    }\n\n    check(user, Object);\n    check(cardID, String);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.retrieveCard, client.customers);\n    return method(user.stripe.id, cardID);\n  },\n  \"stripe_cards_delete\": function (user, cardID) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n    }\n\n    if (!cardID) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Card Account ID Provided\");\n    }\n\n    check(user, Object);\n    check(cardID, String);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.deleteCard, client.customers);\n    return method(user.stripe.id, cardID);\n  },\n  \"stripe_cards_list\": function (user, query) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n    }\n\n    if (!query) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - No Query Provided\");\n    }\n\n    check(user, Object);\n    check(query, {\n      object: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.listCards, client.customers);\n    return method(user.stripe.id, query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"subscriptions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/subscriptions/bundle.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./coupons\"));\nmodule.watch(require(\"./discounts\"));\nmodule.watch(require(\"./invoices\"));\nmodule.watch(require(\"./invoice-items\"));\nmodule.watch(require(\"./plans\"));\nmodule.watch(require(\"./subscriptions\"));\nmodule.watch(require(\"./subscription-items\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"coupons.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/subscriptions/coupons.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_coupons_create\": function (data) {\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Coupons] - No Stripe Coupon Data Provided\");\n    }\n\n    check(data, {\n      id: Match.Maybe(String),\n      duration: Match.Where(function (duration) {\n        check(duration, String);\n\n        if (duration === \"repeating\" && !data.duration_in_months) {\n          throw new Error(\"duration_in_months must be set when duration is repeating\");\n        }\n\n        if (!data.amount_off && !data.percent_off || data.amount_off && data.percent_off) {\n          throw new Error(\"Either percent_off or amount_off must be set\");\n        }\n\n        if (data.amount_off && !data.currency) {\n          throw new Error(\"Currency must be set when amount_off is used\");\n        }\n\n        return true;\n      }),\n      amount_off: Match.Maybe(Match.Where(function (amount) {\n        if (data.percent_off) {\n          return true;\n        }\n\n        check(amount, Number);\n        return true;\n      })),\n      currency: Match.Maybe(Match.Where(function (currency) {\n        if (data.amount_off) {\n          check(currency, String);\n          return true;\n        }\n\n        return true;\n      })),\n      duration_in_months: Match.Maybe(Match.Where(function (months) {\n        if (data.duration === \"repeating\") {\n          check(months, Number);\n          return true;\n        }\n\n        return true;\n      })),\n      max_redemptions: Match.Maybe(Number),\n      metadata: Match.Maybe(Object),\n      percent_off: Match.Maybe(Match.Where(function (amount) {\n        if (data.amount_off) {\n          return true;\n        }\n\n        check(amount, Number);\n        return true;\n      })),\n      redeem_by: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.coupons.create, client.coupons);\n    return method(data);\n  },\n  \"stripe_coupons_update\": function (couponID, data) {\n    if (!couponID) {\n      throw new Meteor.Error(500, \"[Stripe Coupons] - No Stripe Coupon ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Coupons] - No Stripe Coupon Data Provided\");\n    }\n\n    check(couponID, String);\n    check(data, {\n      metadata: Match.Maybe(Object)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.coupons.update, client.coupons);\n    return method(couponID, data);\n  },\n  \"stripe_coupons_get\": function (couponID) {\n    if (!couponID) {\n      throw new Meteor.Error(500, \"[Stripe Coupons] - No Stripe Coupon ID Provided\");\n    }\n\n    check(couponID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.coupons.retrieve, client.coupons);\n    return method(couponID);\n  },\n  \"stripe_coupons_delete\": function (couponID) {\n    if (!couponID) {\n      throw new Meteor.Error(500, \"[Stripe Coupons] - No Coupon ID Provided\");\n    }\n\n    check(couponID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.coupons.del, client.coupons);\n    return method(couponID);\n  },\n  \"stripe_coupons_list\": function (query) {\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.coupons.list, client.coupons);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"discounts.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/subscriptions/discounts.jsx                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nMeteor.methods({\n  \"stripe_discounts_delete_from_customer\": function (user) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Discounts] - No Application User Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Discounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.customers.deleteDiscount, client.customers);\n    return method(user.stripe.id);\n  },\n  \"stripe_discounts_delete_from_subscription\": function (subscriptionID) {\n    if (!subscriptionID) {\n      throw new Meteor.Error(500, \"[Stripe Discounts] - No Subscription ID Provided\");\n    }\n\n    check(subscriptionID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.subscriptions.deleteDiscount, client.subscriptions);\n    return method(subscriptionID);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"invoice-items.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/subscriptions/invoice-items.jsx                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_invoice_items_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Stripe Invoice Item Data Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Invoice Items] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    data.customer = user.stripe.id;\n    check(data, {\n      amount: Number,\n      currency: String,\n      customer: String,\n      description: Match.Maybe(String),\n      discountable: Match.Maybe(Boolean),\n      invoice: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      subscription: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoiceItems.create, client.invoiceItems);\n    return method(data);\n  },\n  \"stripe_invoice_items_update\": function (subscriptionID, data) {\n    if (!subscriptionID) {\n      throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Stripe Invoice Item ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Stripe Invoice Item Data Provided\");\n    }\n\n    check(subscriptionID, String);\n    check(data, {\n      amount: Number,\n      description: Match.Maybe(String),\n      discountable: Match.Maybe(Boolean),\n      metadata: Match.Maybe(Object)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoiceItems.update, client.invoiceItems);\n    return method(subscriptionID, data);\n  },\n  \"stripe_invoice_items_get\": function (subscriptionID) {\n    if (!subscriptionID) {\n      throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Stripe Invoice Item ID Provided\");\n    }\n\n    check(subscriptionID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoiceItems.retrieve, client.invoiceItems);\n    return method(subscriptionID);\n  },\n  \"stripe_invoice_items_delete\": function (subscriptionID) {\n    if (!subscriptionID) {\n      throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Invoice Item ID Provided\");\n    }\n\n    check(subscriptionID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoiceItems.del, client.invoiceItems);\n    return method(subscriptionID);\n  },\n  \"stripe_invoice_items_list\": function (query) {\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      customer: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoiceItems.list, client.invoiceItems);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"invoices.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/subscriptions/invoices.jsx                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_invoices_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice Data Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    data.customer = user.stripe.id;\n    check(data, {\n      customer: String,\n      application_fee: Match.Maybe(String),\n      description: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      statement_descriptor: Match.Maybe(String),\n      subscription: Match.Maybe(String),\n      tax_percent: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.create, client.invoices);\n    return method(data);\n  },\n  \"stripe_invoices_update\": function (invoiceID, data) {\n    if (!invoiceID) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice Data Provided\");\n    }\n\n    check(invoiceID, String);\n    check(data, {\n      application_fee: Match.Maybe(String),\n      closed: Match.Maybe(Boolean),\n      description: Match.Maybe(String),\n      forgiven: Match.Maybe(Boolean),\n      metadata: Match.Maybe(Object),\n      statement_descriptor: Match.Maybe(String),\n      subscription: Match.Maybe(String),\n      tax_percent: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.update, client.invoices);\n    return method(invoiceID, data);\n  },\n  \"stripe_invoices_get\": function (invoiceID) {\n    if (!invoiceID) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n    }\n\n    check(invoiceID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.retrieve, client.invoices);\n    return method(invoiceID);\n  },\n  \"stripe_invoices_get_items\": function (invoiceID, query) {\n    if (!invoiceID) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n    }\n\n    check(invoiceID, String);\n    check(query, {\n      coupon: Match.Maybe(String),\n      customer: Match.Maybe(String),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String),\n      subscription: Match.Maybe(String),\n      subscription_items: Match.Maybe(Match.ObjectIncluding({\n        id: Match.Maybe(String),\n        deleted: Match.Maybe(String),\n        plan: Match.Maybe(String),\n        quantity: Match.Maybe(String)\n      })),\n      subscription_plan: Match.Maybe(String),\n      subscription_prorate: Match.Maybe(String),\n      subscription_proration_date: Match.Maybe(String),\n      subscription_quantity: Match.Maybe(String),\n      subscription_tax_percent: Match.Maybe(String),\n      subscription_trial_end: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.retrieveLines, client.invoices);\n    return method(invoiceID);\n  },\n  \"stripe_invoices_get_upcoming\": function (user, query) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Application User Provided\");\n    }\n\n    check(user, Object);\n    check(query, {\n      coupon: Match.Maybe(String),\n      subscription: Match.Maybe(String),\n      subscription_items: Match.Maybe(Match.ObjectIncluding({\n        id: Match.Maybe(String),\n        deleted: Match.Maybe(String),\n        plan: Match.Maybe(String),\n        quantity: Match.Maybe(String)\n      })),\n      subscription_plan: Match.Maybe(String),\n      subscription_prorate: Match.Maybe(String),\n      subscription_proration_date: Match.Maybe(String),\n      subscription_quantity: Match.Maybe(String),\n      subscription_tax_percent: Match.Maybe(String),\n      subscription_trial_end: Match.Maybe(String)\n    });\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.retrieveUpcoming, client.invoices);\n    return method(user.stripe.id, query);\n  },\n  \"stripe_invoices_pay\": function (invoiceID) {\n    if (!invoiceID) {\n      throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n    }\n\n    check(invoiceID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.pay, client.invoices);\n    return method(invoiceID);\n  },\n  \"stripe_invoices_list\": function (query) {\n    check(query, {\n      customer: Match.Maybe(String),\n      date: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.invoices.list, client.invoices);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"plans.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/subscriptions/plans.jsx                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_plans_create\": function (data) {\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Plans] - No Stripe Plan Data Provided\");\n    }\n\n    check(data, {\n      id: String,\n      amount: Number,\n      currency: String,\n      interval: String,\n      name: String,\n      interval_count: Match.Maybe(String),\n      metadata: Match.Maybe(Object),\n      statement_descriptor: Match.Maybe(String),\n      trial_period_days: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.plans.create, client.plans);\n    return method(data);\n  },\n  \"stripe_plans_update\": function (planID, data) {\n    if (!planID) {\n      throw new Meteor.Error(500, \"[Stripe Plans] - No Stripe Plan ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Plans] - No Stripe Plan Data Provided\");\n    }\n\n    check(planID, String);\n    check(data, {\n      metadata: Match.Maybe(Object),\n      name: Match.Maybe(String),\n      statement_descriptor: Match.Maybe(String),\n      trial_period_days: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.plans.update, client.plans);\n    return method(planID, data);\n  },\n  \"stripe_plans_get\": function (planID) {\n    if (!planID) {\n      throw new Meteor.Error(500, \"[Stripe Plans] - No Stripe Plan ID Provided\");\n    }\n\n    check(planID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.plans.retrieve, client.plans);\n    return method(planID);\n  },\n  \"stripe_plans_delete\": function (planID) {\n    if (!planID) {\n      throw new Meteor.Error(500, \"[Stripe Plans] - No Plan ID Provided\");\n    }\n\n    check(planID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.plans.del, client.plans);\n    return method(planID);\n  },\n  \"stripe_plans_list\": function (query) {\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.plans.list, client.plans);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"subscription-items.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/subscriptions/subscription-items.jsx                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//TODO: Subscription Items\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"subscriptions.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/subscriptions/subscriptions.jsx                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet StripeConnection;\nmodule.watch(require(\"../connection\"), {\n  default(v) {\n    StripeConnection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"stripe_subscriptions_create\": function (user, data) {\n    if (!user) {\n      throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Stripe Subscription Data Provided\");\n    }\n\n    check(user, Object);\n\n    if (!user.stripe) {\n      user = Meteor.users.findOne({\n        _id: user._id\n      });\n    }\n\n    if (!user.stripe.id) {\n      throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n    }\n\n    data.customer = user.stripe.id;\n    check(data, {\n      customer: Match.Where(function (customer) {\n        check(customer, String);\n\n        if (!data.items && !data.plan || data.items && data.plan) {\n          throw new Meteor.Error(500, \"[Stripe Subscriptions] - Either Items or Plan must be provided\");\n        }\n\n        if (data.items && data.items.length === 0) {\n          throw new Meteor.Error(500, \"[Stripe Subscriptions] - Items must have at least 1 plan\");\n        }\n\n        return true;\n      }),\n      application_fee_percent: Match.Maybe(String),\n      coupon: Match.Maybe(String),\n      items: Match.Maybe([Match.ObjectIncluding({\n        plan: String,\n        quantity: Match.Maybe(Number)\n      })]),\n      metadata: Match.Maybe(Object),\n      plan: Match.Maybe(String),\n      prorate: Match.Maybe(String),\n      quantity: Match.Maybe(Number),\n      source: Match.Maybe(String),\n      tax_percent: Match.Maybe(Number),\n      trial_end: Match.Maybe(Number),\n      trial_period_days: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.subscriptions.create, client.subscriptions);\n    return method(data);\n  },\n  \"stripe_subscriptions_update\": function (subscriptionID, data) {\n    if (!subscriptionID) {\n      throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Stripe Subscription ID Provided\");\n    }\n\n    if (!data) {\n      throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Stripe Subscription Data Provided\");\n    }\n\n    check(subscriptionID, String);\n    check(data, {\n      application_fee_percent: Match.Maybe(String),\n      coupon: Match.Maybe(String),\n      items: Match.Maybe([Match.ObjectIncluding({\n        plan: String,\n        quantity: Match.Maybe(Number)\n      })]),\n      metadata: Match.Maybe(Object),\n      plan: Match.Maybe(String),\n      prorate: Match.Maybe(String),\n      proration_date: Match.Maybe(String),\n      quantity: Match.Maybe(Number),\n      source: Match.Maybe(String),\n      tax_percent: Match.Maybe(Number),\n      trial_end: Match.Maybe(Number)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.subscriptions.update, client.subscriptions);\n    return method(subscriptionID, data);\n  },\n  \"stripe_subscriptions_get\": function (subscriptionID) {\n    if (!subscriptionID) {\n      throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Stripe Subscription ID Provided\");\n    }\n\n    check(subscriptionID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.subscriptions.retrieve, client.subscriptions);\n    return method(subscriptionID);\n  },\n  \"stripe_subscriptions_delete\": function (subscriptionID) {\n    if (!subscriptionID) {\n      throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Subscription ID Provided\");\n    }\n\n    check(subscriptionID, String);\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.subscriptions.del, client.subscriptions);\n    return method(subscriptionID);\n  },\n  \"stripe_subscriptions_list\": function (query) {\n    check(query, {\n      created: Match.Maybe(Match.ObjectIncluding({\n        gt: Match.Maybe(String),\n        gte: Match.Maybe(String),\n        lt: Match.Maybe(String),\n        lte: Match.Maybe(String)\n      })),\n      ending_before: Match.Maybe(String),\n      limit: Match.Maybe(Number),\n      starting_after: Match.Maybe(String)\n    });\n    let client = StripeConnection();\n    let method = Meteor.wrapAsync(client.subscriptions.list, client.subscriptions);\n    return method(query);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/bundle.jsx                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./core/bundle\"));\nmodule.watch(require(\"./payment-methods/bundle\"));\nmodule.watch(require(\"./subscriptions/bundle\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/stripe/server/connection.jsx                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Stripe;\nmodule.watch(require(\"stripe\"), {\n  default(v) {\n    Stripe = v;\n  }\n\n}, 0);\n\nlet StripeConneciton = function () {\n  let client = Stripe(Meteor.settings.private.stripe.secretKey);\n  return client;\n};\n\nmodule.exportDefault(StripeConneciton);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"accounts\":{\"server\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/accounts/server/bundle.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./social-connect\"));\nmodule.watch(require(\"./methods\"));\nmodule.watch(require(\"./image-upload\"));\nmodule.watch(require(\"./invites\"));\nmodule.watch(require(\"./fake-accounts\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fake-accounts.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/accounts/server/fake-accounts.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/accounts/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 1);\nlet faker;\nmodule.watch(require(\"faker\"), {\n  default(v) {\n    faker = v;\n  }\n\n}, 2);\nlet Countries;\nmodule.watch(require(\"../../../constants/countries\"), {\n  default(v) {\n    Countries = v;\n  }\n\n}, 3);\n\nlet _;\n\nmodule.watch(require(\"lodash\"), {\n  default(v) {\n    _ = v;\n  }\n\n}, 4);\nconst isoLangs = {\n  \"ab\": {\n    \"name\": \"Abkhaz\",\n    \"code\": \"ab\",\n    \"native\": \"аҧсуа\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"aa\": {\n    \"name\": \"Afar\",\n    \"code\": \"aa\",\n    \"native\": \"Afaraf\",\n    \"icon\": \"flag-icon-et\"\n  },\n  \"af\": {\n    \"name\": \"Afrikaans\",\n    \"code\": \"af\",\n    \"native\": \"Afrikaans\",\n    \"icon\": \"flag-icon-za\"\n  },\n  \"ak\": {\n    \"name\": \"Akan\",\n    \"code\": \"ak\",\n    \"native\": \"Akan\",\n    \"icon\": \"flag-icon-gh\"\n  },\n  \"sq\": {\n    \"name\": \"Albanian\",\n    \"code\": \"sq\",\n    \"native\": \"Shqip\",\n    \"icon\": \"flag-icon-al\"\n  },\n  \"am\": {\n    \"name\": \"Amharic\",\n    \"code\": \"am\",\n    \"native\": \"አማርኛ\",\n    \"icon\": \"flag-icon-et\"\n  },\n  \"ar\": {\n    \"name\": \"Arabic\",\n    \"code\": \"ar\",\n    \"native\": \"العربية\",\n    \"icon\": \"flag-icon-sa\"\n  },\n  \"an\": {\n    \"name\": \"Aragonese\",\n    \"code\": \"an\",\n    \"native\": \"Aragonés\",\n    \"icon\": \"flag-icon-es\"\n  },\n  \"hy\": {\n    \"name\": \"Armenian\",\n    \"code\": \"hy\",\n    \"native\": \"Հայերեն\",\n    \"icon\": \"flag-icon-am\"\n  },\n  \"as\": {\n    \"name\": \"Assamese\",\n    \"code\": \"as\",\n    \"native\": \"অসমীয়া\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"av\": {\n    \"name\": \"Avaric\",\n    \"code\": \"av\",\n    \"native\": \"авар мацӀ, магӀарул мацӀ\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"ay\": {\n    \"name\": \"Aymara\",\n    \"code\": \"ay\",\n    \"native\": \"aymar aru\",\n    \"icon\": \"flag-icon-cl\"\n  },\n  \"az\": {\n    \"name\": \"Azerbaijani\",\n    \"code\": \"az\",\n    \"native\": \"azərbaycan dili\",\n    \"icon\": \"flag-icon-az\"\n  },\n  \"bm\": {\n    \"name\": \"Bambara\",\n    \"code\": \"bm\",\n    \"native\": \"Bamanankan\",\n    \"icon\": \"flag-icon-ml\"\n  },\n  \"ba\": {\n    \"name\": \"Bashkir\",\n    \"code\": \"ba\",\n    \"native\": \"башҡорт теле\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"eu\": {\n    \"name\": \"Basque\",\n    \"code\": \"eu\",\n    \"native\": \"Euskara, euskera\",\n    \"icon\": \"flag-icon-es\"\n  },\n  \"be\": {\n    \"name\": \"Belarusian\",\n    \"code\": \"be\",\n    \"native\": \"Беларуская\",\n    \"icon\": \"flag-icon-by\"\n  },\n  \"bn\": {\n    \"name\": \"Bengali\",\n    \"code\": \"bn\",\n    \"native\": \"বাংলা\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"bh\": {\n    \"name\": \"Bihari\",\n    \"code\": \"bh\",\n    \"native\": \"भोजपुरी\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"bi\": {\n    \"name\": \"Bislama\",\n    \"code\": \"bi\",\n    \"native\": \"Bislama\",\n    \"icon\": \"flag-icon-vu\"\n  },\n  \"bs\": {\n    \"name\": \"Bosnian\",\n    \"code\": \"bs\",\n    \"native\": \"Bosanski jezik\",\n    \"icon\": \"flag-icon-ba\"\n  },\n  \"br\": {\n    \"name\": \"Breton\",\n    \"code\": \"br\",\n    \"native\": \"Brezhoneg\",\n    \"icon\": \"flag-icon-fr\"\n  },\n  \"bg\": {\n    \"name\": \"Bulgarian\",\n    \"code\": \"bg\",\n    \"native\": \"български език\",\n    \"icon\": \"flag-icon-bg\"\n  },\n  \"my\": {\n    \"name\": \"Burmese\",\n    \"code\": \"my\",\n    \"native\": \"ဗမာစာ\",\n    \"icon\": \"flag-icon-mm\"\n  },\n  \"ca\": {\n    \"name\": \"Catalan\",\n    \"code\": \"ca\",\n    \"native\": \"Català\",\n    \"icon\": \"flag-icon-ad\"\n  },\n  \"ch\": {\n    \"name\": \"Chamorro\",\n    \"code\": \"ch\",\n    \"native\": \"Chamoru\",\n    \"icon\": \"flag-icon-gu\"\n  },\n  \"ce\": {\n    \"name\": \"Chechen\",\n    \"code\": \"ce\",\n    \"native\": \"нохчийн мотт\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"ny\": {\n    \"name\": \"Chichewa\",\n    \"code\": \"ny\",\n    \"native\": \"ChiCheŵa\",\n    \"icon\": \"flag-icon-mw\"\n  },\n  \"zh\": {\n    \"name\": \"Chinese\",\n    \"code\": \"zh\",\n    \"native\": \"中文\",\n    \"icon\": \"flag-icon-cn\"\n  },\n  \"cv\": {\n    \"name\": \"Chuvash\",\n    \"code\": \"cv\",\n    \"native\": \"чӑваш чӗлхи\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"kw\": {\n    \"name\": \"Cornish\",\n    \"code\": \"kw\",\n    \"native\": \"Kernewek\",\n    \"icon\": \"flag-icon-gb\"\n  },\n  \"co\": {\n    \"name\": \"Corsican\",\n    \"code\": \"co\",\n    \"native\": \"Corsu, lingua corsa\",\n    \"icon\": \"flag-icon-fr\"\n  },\n  \"cr\": {\n    \"name\": \"Cree\",\n    \"code\": \"cr\",\n    \"native\": \"ᓀᐦᐃᔭᐍᐏᐣ\",\n    \"icon\": \"flag-icon-ca\"\n  },\n  \"hr\": {\n    \"name\": \"Croatian\",\n    \"code\": \"hr\",\n    \"native\": \"Hrvatski\",\n    \"icon\": \"flag-icon-hr\"\n  },\n  \"cs\": {\n    \"name\": \"Czech\",\n    \"code\": \"cs\",\n    \"native\": \"česky, čeština\",\n    \"icon\": \"flag-icon-cz\"\n  },\n  \"da\": {\n    \"name\": \"Danish\",\n    \"code\": \"da\",\n    \"native\": \"Dansk\",\n    \"icon\": \"flag-icon-dk\"\n  },\n  \"dv\": {\n    \"name\": \"Divehi\",\n    \"code\": \"dv\",\n    \"native\": \"ދިވެހި\",\n    \"icon\": \"flag-icon-mv\"\n  },\n  \"nl\": {\n    \"name\": \"Dutch\",\n    \"code\": \"nl\",\n    \"native\": \"Nederlands, Vlaams\",\n    \"icon\": \"flag-icon-nl\"\n  },\n  \"en\": {\n    \"name\": \"English\",\n    \"code\": \"en\",\n    \"native\": \"English\",\n    \"icon\": \"flag-icon-us\"\n  },\n  \"et\": {\n    \"name\": \"Estonian\",\n    \"code\": \"et\",\n    \"native\": \"Eesti, eesti keel\",\n    \"icon\": \"flag-icon-ee\"\n  },\n  \"ee\": {\n    \"name\": \"Ewe\",\n    \"code\": \"ee\",\n    \"native\": \"Eʋegbe\",\n    \"icon\": \"flag-icon-gh\"\n  },\n  \"fo\": {\n    \"name\": \"Faroese\",\n    \"code\": \"fo\",\n    \"native\": \"føroyskt\",\n    \"icon\": \"flag-icon-dk\"\n  },\n  \"fj\": {\n    \"name\": \"Fijian\",\n    \"code\": \"fj\",\n    \"native\": \"vosa Vakaviti\",\n    \"icon\": \"flag-icon-fj\"\n  },\n  \"fi\": {\n    \"name\": \"Finnish\",\n    \"code\": \"fi\",\n    \"native\": \"suomi, suomen kieli\",\n    \"icon\": \"flag-icon-fi\"\n  },\n  \"fr\": {\n    \"name\": \"French\",\n    \"code\": \"fr\",\n    \"native\": \"français\",\n    \"icon\": \"flag-icon-fr\"\n  },\n  \"gl\": {\n    \"name\": \"Galician\",\n    \"code\": \"gl\",\n    \"native\": \"Galego\",\n    \"icon\": \"flag-icon-es\"\n  },\n  \"ka\": {\n    \"name\": \"Georgian\",\n    \"code\": \"ka\",\n    \"native\": \"ქართული\",\n    \"icon\": \"flag-icon-ge\"\n  },\n  \"de\": {\n    \"name\": \"German\",\n    \"code\": \"de\",\n    \"native\": \"Deutsch\",\n    \"icon\": \"flag-icon-de\"\n  },\n  \"el\": {\n    \"name\": \"Greek\",\n    \"code\": \"el\",\n    \"native\": \"Ελληνικά\",\n    \"icon\": \"flag-icon-gr\"\n  },\n  \"gn\": {\n    \"name\": \"Guaraní\",\n    \"code\": \"gn\",\n    \"native\": \"Avañeẽ\",\n    \"icon\": \"flag-icon-py\"\n  },\n  \"gu\": {\n    \"name\": \"Gujarati\",\n    \"code\": \"gu\",\n    \"native\": \"ગુજરાતી\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"ht\": {\n    \"name\": \"Haitian\",\n    \"code\": \"ht\",\n    \"native\": \"Kreyòl ayisyen\",\n    \"icon\": \"flag-icon-ht\"\n  },\n  \"ha\": {\n    \"name\": \"Hausa\",\n    \"code\": \"ha\",\n    \"native\": \"Hausa, هَوُسَ\",\n    \"icon\": \"flag-icon-ng\"\n  },\n  \"he\": {\n    \"name\": \"Hebrew\",\n    \"code\": \"he\",\n    \"native\": \"עברית\",\n    \"icon\": \"flag-icon-il\"\n  },\n  \"hi\": {\n    \"name\": \"Hindi\",\n    \"code\": \"hi\",\n    \"native\": \"हिन्दी, हिंदी\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"ho\": {\n    \"name\": \"Hiri Motu\",\n    \"code\": \"ho\",\n    \"native\": \"Hiri Motu\",\n    \"icon\": \"flag-icon-pg\"\n  },\n  \"hu\": {\n    \"name\": \"Hungarian\",\n    \"code\": \"hu\",\n    \"native\": \"Magyar\",\n    \"icon\": \"flag-icon-hu\"\n  },\n  \"id\": {\n    \"name\": \"Indonesian\",\n    \"code\": \"id\",\n    \"native\": \"Bahasa Indonesia\",\n    \"icon\": \"flag-icon-id\"\n  },\n  \"ga\": {\n    \"name\": \"Irish\",\n    \"code\": \"ga\",\n    \"native\": \"Gaeilge\",\n    \"icon\": \"flag-icon-gb\"\n  },\n  \"ig\": {\n    \"name\": \"Igbo\",\n    \"code\": \"ig\",\n    \"native\": \"Asụsụ Igbo\",\n    \"icon\": \"flag-icon-ng\"\n  },\n  \"ik\": {\n    \"name\": \"Inupiaq\",\n    \"code\": \"ik\",\n    \"native\": \"Iñupiaq, Iñupiatun\",\n    \"icon\": \"flag-icon-us\"\n  },\n  \"is\": {\n    \"name\": \"Icelandic\",\n    \"code\": \"is\",\n    \"native\": \"Íslenska\",\n    \"icon\": \"flag-icon-is\"\n  },\n  \"it\": {\n    \"name\": \"Italian\",\n    \"code\": \"it\",\n    \"native\": \"Italiano\",\n    \"icon\": \"flag-icon-it\"\n  },\n  \"iu\": {\n    \"name\": \"Inuktitut\",\n    \"code\": \"iu\",\n    \"native\": \"ᐃᓄᒃᑎᑐᑦ\",\n    \"icon\": \"flag-icon-ca\"\n  },\n  \"ja\": {\n    \"name\": \"Japanese\",\n    \"code\": \"ja\",\n    \"native\": \"日本語\",\n    \"icon\": \"flag-icon-jp\"\n  },\n  \"jv\": {\n    \"name\": \"Javanese\",\n    \"code\": \"jv\",\n    \"native\": \"basa Jawa\",\n    \"icon\": \"flag-icon-id\"\n  },\n  \"kl\": {\n    \"name\": \"Kalaallisut\",\n    \"code\": \"kl\",\n    \"native\": \"kalaallisut\",\n    \"icon\": \"flag-icon-gl\"\n  },\n  \"kn\": {\n    \"name\": \"Kannada\",\n    \"code\": \"kn\",\n    \"native\": \"ಕನ್ನಡ\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"kr\": {\n    \"name\": \"Kanuri\",\n    \"code\": \"kr\",\n    \"native\": \"Kanuri\",\n    \"icon\": \"flag-icon-ng\"\n  },\n  \"ks\": {\n    \"name\": \"Kashmiri\",\n    \"code\": \"ks\",\n    \"native\": \"कश्मीरी, كشميري‎\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"kk\": {\n    \"name\": \"Kazakh\",\n    \"code\": \"kk\",\n    \"native\": \"Қазақ тілі\",\n    \"icon\": \"flag-icon-kz\"\n  },\n  \"km\": {\n    \"name\": \"Khmer\",\n    \"code\": \"km\",\n    \"native\": \"ភាសាខ្មែរ\",\n    \"icon\": \"flag-icon-kh\"\n  },\n  \"ki\": {\n    \"name\": \"Kikuyu\",\n    \"code\": \"ki\",\n    \"native\": \"Gĩkũyũ\",\n    \"icon\": \"flag-icon-ke\"\n  },\n  \"rw\": {\n    \"name\": \"Kinyarwanda\",\n    \"code\": \"rw\",\n    \"native\": \"Ikinyarwanda\",\n    \"icon\": \"flag-icon-rw\"\n  },\n  \"ky\": {\n    \"name\": \"Kirghiz\",\n    \"code\": \"ky\",\n    \"native\": \"кыргыз тили\",\n    \"icon\": \"flag-icon-kg\"\n  },\n  \"kv\": {\n    \"name\": \"Komi\",\n    \"code\": \"kv\",\n    \"native\": \"коми кыв\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"kg\": {\n    \"name\": \"Kongo\",\n    \"code\": \"kg\",\n    \"native\": \"KiKongo\",\n    \"icon\": \"flag-icon-cd\"\n  },\n  \"ko\": {\n    \"name\": \"Korean\",\n    \"code\": \"ko\",\n    \"native\": \"한국어\",\n    \"icon\": \"flag-icon-kr\"\n  },\n  \"ku\": {\n    \"name\": \"Kurdish\",\n    \"code\": \"ku\",\n    \"native\": \"كوردی‎\",\n    \"icon\": \"flag-icon-iq\"\n  },\n  \"kj\": {\n    \"name\": \"Kwanyama\",\n    \"code\": \"kj\",\n    \"native\": \"Kuanyama\",\n    \"icon\": \"flag-icon-ao\"\n  },\n  \"lb\": {\n    \"name\": \"Luxembourgish\",\n    \"code\": \"lb\",\n    \"native\": \"Lëtzebuergesch\",\n    \"icon\": \"flag-icon-lu\"\n  },\n  \"lg\": {\n    \"name\": \"Luganda\",\n    \"code\": \"lg\",\n    \"native\": \"Luganda\",\n    \"icon\": \"flag-icon-ug\"\n  },\n  \"li\": {\n    \"name\": \"Limburgish\",\n    \"code\": \"li\",\n    \"native\": \"Limburgs\",\n    \"icon\": \"flag-icon-nl\"\n  },\n  \"ln\": {\n    \"name\": \"Lingala\",\n    \"code\": \"ln\",\n    \"native\": \"Lingála\",\n    \"icon\": \"flag-icon-cd\"\n  },\n  \"lo\": {\n    \"name\": \"Lao\",\n    \"code\": \"lo\",\n    \"native\": \"ພາສາລາວ\",\n    \"icon\": \"flag-icon-la\"\n  },\n  \"lt\": {\n    \"name\": \"Lithuanian\",\n    \"code\": \"lt\",\n    \"native\": \"lietuvių kalba\",\n    \"icon\": \"flag-icon-lt\"\n  },\n  \"lv\": {\n    \"name\": \"Latvian\",\n    \"code\": \"lv\",\n    \"native\": \"latviešu valoda\",\n    \"icon\": \"flag-icon-lv\"\n  },\n  \"gv\": {\n    \"name\": \"Manx\",\n    \"code\": \"gv\",\n    \"native\": \"Gaelg, Gailck\",\n    \"icon\": \"flag-icon-im\"\n  },\n  \"mk\": {\n    \"name\": \"Macedonian\",\n    \"code\": \"mk\",\n    \"native\": \"македонски јазик\",\n    \"icon\": \"flag-icon-mk\"\n  },\n  \"mg\": {\n    \"name\": \"Malagasy\",\n    \"code\": \"mg\",\n    \"native\": \"Malagasy fiteny\",\n    \"icon\": \"flag-icon-mg\"\n  },\n  \"ms\": {\n    \"name\": \"Malay\",\n    \"code\": \"ms\",\n    \"native\": \"بهاس ملايو‎\",\n    \"icon\": \"flag-icon-my\"\n  },\n  \"ml\": {\n    \"name\": \"Malayalam\",\n    \"code\": \"ml\",\n    \"native\": \"മലയാളം\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"mt\": {\n    \"name\": \"Maltese\",\n    \"code\": \"mt\",\n    \"native\": \"Malti\",\n    \"icon\": \"flag-icon-mt\"\n  },\n  \"mi\": {\n    \"name\": \"Māori\",\n    \"code\": \"mi\",\n    \"native\": \"te reo Māori\",\n    \"icon\": \"flag-icon-nz\"\n  },\n  \"mr\": {\n    \"name\": \"Marathi\",\n    \"code\": \"mr\",\n    \"native\": \"मराठी\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"mh\": {\n    \"name\": \"Marshallese\",\n    \"code\": \"mh\",\n    \"native\": \"Kajin M̧ajeļ\",\n    \"icon\": \"flag-icon-mh\"\n  },\n  \"mn\": {\n    \"name\": \"Mongolian\",\n    \"code\": \"mn\",\n    \"native\": \"монгол\",\n    \"icon\": \"flag-icon-mn\"\n  },\n  \"na\": {\n    \"name\": \"Nauru\",\n    \"code\": \"na\",\n    \"native\": \"Ekakairũ Naoero\",\n    \"icon\": \"flag-icon-nr\"\n  },\n  \"nv\": {\n    \"name\": \"Navajo\",\n    \"code\": \"nv\",\n    \"native\": \"Diné bizaad, Dinékʼehǰí\",\n    \"icon\": \"flag-icon-us\"\n  },\n  \"nb\": {\n    \"name\": \"Norwegian Bokmål\",\n    \"code\": \"nb\",\n    \"native\": \"Norsk bokmål\",\n    \"icon\": \"flag-icon-no\"\n  },\n  \"nd\": {\n    \"name\": \"North Ndebele\",\n    \"code\": \"nd\",\n    \"native\": \"isiNdebele\",\n    \"icon\": \"flag-icon-zw\"\n  },\n  \"ne\": {\n    \"name\": \"Nepali\",\n    \"code\": \"ne\",\n    \"native\": \"नेपाली\",\n    \"icon\": \"flag-icon-np\"\n  },\n  \"ng\": {\n    \"name\": \"Ndonga\",\n    \"code\": \"ng\",\n    \"native\": \"Owambo\",\n    \"icon\": \"flag-icon-ao\"\n  },\n  \"nn\": {\n    \"name\": \"Norwegian Nynorsk\",\n    \"code\": \"nn\",\n    \"native\": \"Norsk nynorsk\",\n    \"icon\": \"flag-icon-no\"\n  },\n  \"no\": {\n    \"name\": \"Norwegian\",\n    \"code\": \"no\",\n    \"native\": \"Norsk\",\n    \"icon\": \"flag-icon-no\"\n  },\n  \"ii\": {\n    \"name\": \"Nuosu\",\n    \"code\": \"ii\",\n    \"native\": \"ꆈꌠ꒿ Nuosuhxop\",\n    \"icon\": \"flag-icon-cn\"\n  },\n  \"nr\": {\n    \"name\": \"South Ndebele\",\n    \"code\": \"nr\",\n    \"native\": \"isiNdebele\",\n    \"icon\": \"flag-icon-za\"\n  },\n  \"oc\": {\n    \"name\": \"Occitan\",\n    \"code\": \"oc\",\n    \"native\": \"Occitan\",\n    \"icon\": \"flag-icon-es\"\n  },\n  \"oj\": {\n    \"name\": \"Ojibwe\",\n    \"code\": \"oj\",\n    \"native\": \"ᐊᓂᔑᓈᐯᒧᐎᓐ\",\n    \"icon\": \"flag-icon-ca\"\n  },\n  \"om\": {\n    \"name\": \"Oromo\",\n    \"code\": \"om\",\n    \"native\": \"Afaan Oromoo\",\n    \"icon\": \"flag-icon-et\"\n  },\n  \"or\": {\n    \"name\": \"Oriya\",\n    \"code\": \"or\",\n    \"native\": \"ଓଡ଼ିଆ\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"os\": {\n    \"name\": \"Ossetian\",\n    \"code\": \"os\",\n    \"native\": \"ирон æвзаг\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"pa\": {\n    \"name\": \"Panjabi, Punjabi\",\n    \"code\": \"pa\",\n    \"native\": \"ਪੰਜਾਬੀ, پنجابی‎\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"pi\": {\n    \"name\": \"Pāli\",\n    \"code\": \"pi\",\n    \"native\": \"पाऴि\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"fa\": {\n    \"name\": \"Persian\",\n    \"code\": \"fa\",\n    \"native\": \"فارسی\",\n    \"icon\": \"flag-icon-ir\"\n  },\n  \"pl\": {\n    \"name\": \"Polish\",\n    \"code\": \"pl\",\n    \"native\": \"polski\",\n    \"icon\": \"flag-icon-pl\"\n  },\n  \"ps\": {\n    \"name\": \"Pashto\",\n    \"code\": \"ps\",\n    \"native\": \"پښتو\",\n    \"icon\": \"flag-icon-af\"\n  },\n  \"pt\": {\n    \"name\": \"Portuguese\",\n    \"code\": \"pt\",\n    \"native\": \"Português\",\n    \"icon\": \"flag-icon-pt\"\n  },\n  \"qu\": {\n    \"name\": \"Quechua\",\n    \"code\": \"qu\",\n    \"native\": \"Runa Simi, Kichwa\",\n    \"icon\": \"flag-icon-ar\"\n  },\n  \"rm\": {\n    \"name\": \"Romansh\",\n    \"code\": \"rm\",\n    \"native\": \"rumantsch grischun\",\n    \"icon\": \"flag-icon-ch\"\n  },\n  \"rn\": {\n    \"name\": \"Kirundi\",\n    \"code\": \"rn\",\n    \"native\": \"kiRundi\",\n    \"icon\": \"flag-icon-bi\"\n  },\n  \"ro\": {\n    \"name\": \"Romanian\",\n    \"code\": \"ro\",\n    \"native\": \"română\",\n    \"icon\": \"flag-icon-ro\"\n  },\n  \"ru\": {\n    \"name\": \"Russian\",\n    \"code\": \"ru\",\n    \"native\": \"русский язык\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"sa\": {\n    \"name\": \"Sanskrit\",\n    \"code\": \"sa\",\n    \"native\": \"संस्कृतम्\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"sc\": {\n    \"name\": \"Sardinian\",\n    \"code\": \"sc\",\n    \"native\": \"sardu\",\n    \"icon\": \"flag-icon-it\"\n  },\n  \"sd\": {\n    \"name\": \"Sindhi\",\n    \"code\": \"sd\",\n    \"native\": \"सिन्धी, سنڌي، سندھی‎\",\n    \"icon\": \"flag-icon-pk\"\n  },\n  \"se\": {\n    \"name\": \"Northern Sami\",\n    \"code\": \"se\",\n    \"native\": \"Davvisámegiella\",\n    \"icon\": \"flag-icon-no\"\n  },\n  \"sm\": {\n    \"name\": \"Samoan\",\n    \"code\": \"sm\",\n    \"native\": \"gagana faa Samoa\",\n    \"icon\": \"flag-icon-ws\"\n  },\n  \"sg\": {\n    \"name\": \"Sango\",\n    \"code\": \"sg\",\n    \"native\": \"yângâ tî sängö\",\n    \"icon\": \"flag-icon-cf\"\n  },\n  \"sr\": {\n    \"name\": \"Serbian\",\n    \"code\": \"sr\",\n    \"native\": \"српски језик\",\n    \"icon\": \"flag-icon-rs\"\n  },\n  \"gd\": {\n    \"name\": \"Gaelic\",\n    \"code\": \"gd\",\n    \"native\": \"Gàidhlig\",\n    \"icon\": \"flag-icon-gb\"\n  },\n  \"sn\": {\n    \"name\": \"Shona\",\n    \"code\": \"sn\",\n    \"native\": \"chiShona\",\n    \"icon\": \"flag-icon-zw\"\n  },\n  \"si\": {\n    \"name\": \"Sinhala\",\n    \"code\": \"si\",\n    \"native\": \"සිංහල\",\n    \"icon\": \"flag-icon-lk\"\n  },\n  \"sk\": {\n    \"name\": \"Slovak\",\n    \"code\": \"sk\",\n    \"native\": \"slovenčina\",\n    \"icon\": \"flag-icon-sk\"\n  },\n  \"sl\": {\n    \"name\": \"Slovene\",\n    \"code\": \"sl\",\n    \"native\": \"slovenščina\",\n    \"icon\": \"flag-icon-si\"\n  },\n  \"so\": {\n    \"name\": \"Somali\",\n    \"code\": \"so\",\n    \"native\": \"Soomaaliga, af Soomaali\",\n    \"icon\": \"flag-icon-so\"\n  },\n  \"st\": {\n    \"name\": \"Southern Sotho\",\n    \"code\": \"st\",\n    \"native\": \"Sesotho\",\n    \"icon\": \"flag-icon-za\"\n  },\n  \"es\": {\n    \"name\": \"Spanish\",\n    \"code\": \"es\",\n    \"native\": \"Español\",\n    \"icon\": \"flag-icon-mx\"\n  },\n  \"su\": {\n    \"name\": \"Sundanese\",\n    \"code\": \"su\",\n    \"native\": \"Basa Sunda\",\n    \"icon\": \"flag-icon-id\"\n  },\n  \"sw\": {\n    \"name\": \"Swahili\",\n    \"code\": \"sw\",\n    \"native\": \"Kiswahili\",\n    \"icon\": \"flag-icon-tz\"\n  },\n  \"ss\": {\n    \"name\": \"Swati\",\n    \"code\": \"ss\",\n    \"native\": \"SiSwati\",\n    \"icon\": \"flag-icon-sz\"\n  },\n  \"sv\": {\n    \"name\": \"Swedish\",\n    \"code\": \"sv\",\n    \"native\": \"svenska\",\n    \"icon\": \"flag-icon-se\"\n  },\n  \"ta\": {\n    \"name\": \"Tamil\",\n    \"code\": \"ta\",\n    \"native\": \"தமிழ்\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"te\": {\n    \"name\": \"Telugu\",\n    \"code\": \"te\",\n    \"native\": \"తెలుగు\",\n    \"icon\": \"flag-icon-in\"\n  },\n  \"tg\": {\n    \"name\": \"Tajik\",\n    \"code\": \"tg\",\n    \"native\": \"тоҷикӣ, toğikī, تاجیکی‎\",\n    \"icon\": \"flag-icon-tj\"\n  },\n  \"th\": {\n    \"name\": \"Thai\",\n    \"code\": \"th\",\n    \"native\": \"ไทย\",\n    \"icon\": \"flag-icon-th\"\n  },\n  \"ti\": {\n    \"name\": \"Tigrinya\",\n    \"code\": \"ti\",\n    \"native\": \"ትግርኛ\",\n    \"icon\": \"flag-icon-er\"\n  },\n  \"bo\": {\n    \"name\": \"Tibetan Standard, Tibetan, Central\",\n    \"code\": \"bo\",\n    \"native\": \"བོད་ཡིག\",\n    \"icon\": \"flag-icon-cn\"\n  },\n  \"tk\": {\n    \"name\": \"Turkmen\",\n    \"code\": \"tk\",\n    \"native\": \"Türkmen, Түркмен\",\n    \"icon\": \"flag-icon-tm\"\n  },\n  \"tl\": {\n    \"name\": \"Tagalog\",\n    \"code\": \"tl\",\n    \"native\": \"Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔\",\n    \"icon\": \"flag-icon-ph\"\n  },\n  \"tn\": {\n    \"name\": \"Tswana\",\n    \"code\": \"tn\",\n    \"native\": \"Setswana\",\n    \"icon\": \"flag-icon-bw\"\n  },\n  \"to\": {\n    \"name\": \"Tonga (Tonga Islands)\",\n    \"code\": \"to\",\n    \"native\": \"faka Tonga\",\n    \"icon\": \"flag-icon-to\"\n  },\n  \"tr\": {\n    \"name\": \"Turkish\",\n    \"code\": \"tr\",\n    \"native\": \"Türkçe\",\n    \"icon\": \"flag-icon-tr\"\n  },\n  \"ts\": {\n    \"name\": \"Tsonga\",\n    \"code\": \"ts\",\n    \"native\": \"Xitsonga\",\n    \"icon\": \"flag-icon-mz\"\n  },\n  \"tt\": {\n    \"name\": \"Tatar\",\n    \"code\": \"tt\",\n    \"native\": \"татарча, tatarça, تاتارچا‎\",\n    \"icon\": \"flag-icon-ru\"\n  },\n  \"tw\": {\n    \"name\": \"Twi\",\n    \"code\": \"tw\",\n    \"native\": \"Twi\",\n    \"icon\": \"flag-icon-gh\"\n  },\n  \"ty\": {\n    \"name\": \"Tahitian\",\n    \"code\": \"ty\",\n    \"native\": \"Reo Tahiti\",\n    \"icon\": \"flag-icon-pf\"\n  },\n  \"ug\": {\n    \"name\": \"Uighur\",\n    \"code\": \"ug\",\n    \"native\": \"ئۇيغۇرچە‎\",\n    \"icon\": \"flag-icon-cn\"\n  },\n  \"uk\": {\n    \"name\": \"Ukrainian\",\n    \"code\": \"uk\",\n    \"native\": \"українська\",\n    \"icon\": \"flag-icon-ua\"\n  },\n  \"ur\": {\n    \"name\": \"Urdu\",\n    \"code\": \"ur\",\n    \"native\": \"اردو\",\n    \"icon\": \"flag-icon-pk\"\n  },\n  \"uz\": {\n    \"name\": \"Uzbek\",\n    \"code\": \"uz\",\n    \"native\": \"zbek, Ўзбек, أۇزبېك‎\",\n    \"icon\": \"flag-icon-uz\"\n  },\n  \"ve\": {\n    \"name\": \"Venda\",\n    \"code\": \"ve\",\n    \"native\": \"Tshivenḓa\",\n    \"icon\": \"flag-icon-za\"\n  },\n  \"vi\": {\n    \"name\": \"Vietnamese\",\n    \"code\": \"vi\",\n    \"native\": \"Tiếng Việt\",\n    \"icon\": \"flag-icon-vn\"\n  },\n  \"wa\": {\n    \"name\": \"Walloon\",\n    \"code\": \"wa\",\n    \"native\": \"Walon\",\n    \"icon\": \"flag-icon-be\"\n  },\n  \"cy\": {\n    \"name\": \"Welsh\",\n    \"code\": \"cy\",\n    \"native\": \"Cymraeg\",\n    \"icon\": \"flag-icon-gb\"\n  },\n  \"wo\": {\n    \"name\": \"Wolof\",\n    \"code\": \"wo\",\n    \"native\": \"Wollof\",\n    \"icon\": \"flag-icon-sn\"\n  },\n  \"fy\": {\n    \"name\": \"Western Frisian\",\n    \"code\": \"fy\",\n    \"native\": \"Frysk\",\n    \"icon\": \"flag-icon-nl\"\n  },\n  \"xh\": {\n    \"name\": \"Xhosa\",\n    \"code\": \"xh\",\n    \"native\": \"isiXhosa\",\n    \"icon\": \"flag-icon-za\"\n  },\n  \"yi\": {\n    \"name\": \"Yiddish\",\n    \"code\": \"yi\",\n    \"native\": \"ייִדיש\",\n    \"icon\": \"flag-icon-il\"\n  },\n  \"yo\": {\n    \"name\": \"Yoruba\",\n    \"code\": \"yo\",\n    \"native\": \"Yorùbá\",\n    \"icon\": \"flag-icon-bj\"\n  },\n  \"za\": {\n    \"name\": \"Zhuang\",\n    \"code\": \"za\",\n    \"native\": \"Saɯ cueŋƅ, Saw cuengh\",\n    \"icon\": \"flag-icon-cn\"\n  },\n  \"zz\": {\n    \"name\": \"Test\",\n    \"code\": \"zz\",\n    \"native\": \"Test\",\n    \"icon\": \"flag-icon-us\"\n  }\n};\nlet languages = [];\nObject.keys(isoLangs).forEach(key => languages.push(isoLangs[key]));\nlanguages.pop(); //REMOVE TEST LANGUAGE\n\nlanguages = _.orderBy(languages, \"native\").map(l => l.code);\n\nfunction randomizer(array, qty) {\n  let length = array.length;\n\n  if (qty && qty > 1) {\n    if (qty > length) return array;\n    let result = [];\n    let newArray = [...array];\n\n    for (let i = 0; i < qty; i++) {\n      length = newArray.length;\n      const index = Math.floor(Math.random() * length);\n      newArray.splice(index, 1);\n      result.push(array[index]);\n    }\n\n    return result;\n  } else {\n    const index = Math.floor(Math.random() * length);\n    return array[index];\n  }\n}\n\nMeteor.methods({\n  \"fake-profiles\": function () {\n    let index;\n    let result = []; //return faker;\n\n    for (index = 0; index < 15; index++) {\n      const network = randomizer([\"facebook\", \"twitter\"]);\n      let profile = SocialAccounts.findOne({\n        network\n      }); // const fake=faker.Helpers.contextualCard();\n\n      profile.active = true; //SET INFORMATION DATA\n\n      profile.information = Object.assign({}, Schema.information, {\n        name: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        avatar: faker.image.avatar(),\n        gender: randomizer([\"male\", \"female\"]),\n        birthDate: moment().subtract(15 + Math.random() * 50, 'years').toDate(),\n        country: randomizer(Countries),\n        city: \"\",\n        maritalStatus: \"\",\n        forbiddenSubjects: [],\n        sexualOrientation: \"\",\n        likes: [],\n        language: randomizer(languages),\n        description: faker.lorem.words(30),\n        categories: [],\n        specialties: [],\n        urls: []\n      });\n      profile.settings.type.brand = Boolean(Math.floor(Math.random() * 2));\n      profile.settings.type.influencer = Boolean(Math.floor(Math.random() * 2));\n\n      let getPrice = () => randomizer([Math.floor(Math.random() * 3000), \"\"]);\n\n      profile.pricing = Object.assign({}, Schema.pricing, {\n        post: getPrice(),\n        profilePicture: getPrice(),\n        coverPhoto: getPrice(),\n        noPostHour: getPrice(),\n        noPostDay: getPrice(),\n        share: getPrice(),\n        partnership: getPrice(),\n        ambassador: getPrice()\n      });\n      const tags = [\"Cantantes\", \"Pop\", \"Rock\", \"Mexico\", \"Artistas\", \"Mujeres\", \"Éxitos\", \"Los 40\", \"Icons\", \"Favoritos\", \"IBOL\", \"Test\"];\n      profile.grous = randomizer(tags, Math.random() * 10);\n      profile.groups.push(\"Fake\");\n\n      let getRandomNumber = function (multiplier) {\n        multiplier = multiplier || 1;\n        return Math.floor(Math.random() * 1000 * multiplier);\n      };\n\n      profile.statistics = {\n        retweets: getRandomNumber(),\n        retweetsPerPost: getRandomNumber(Math.random()),\n        favorites: getRandomNumber(),\n        favoritesPerPost: getRandomNumber(Math.random()),\n        comments: getRandomNumber(),\n        commentsPerPost: getRandomNumber(Math.random()),\n        likes: getRandomNumber(),\n        likesPerPost: getRandomNumber(Math.random()),\n        shares: getRandomNumber(),\n        sharesPerPost: getRandomNumber(Math.random()),\n        engagement: Math.random(),\n        followers: getRandomNumber(100),\n        following: getRandomNumber(100),\n        profileLikes: getRandomNumber(),\n        posts: getRandomNumber(),\n        postsPerDay: getRandomNumber(Math.random())\n      };\n      delete profile._id;\n      SocialAccounts.insert(profile);\n      result.push(profile);\n    }\n\n    return result;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"image-upload.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/accounts/server/image-upload.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet uuid;\nmodule.watch(require(\"uuid\"), {\n  default(v) {\n    uuid = v;\n  }\n\n}, 1);\nSlingshot.createDirective(\"account-image-upload\", Slingshot.S3Storage, {\n  bucket: \"ibol-accounts-media\",\n  acl: \"public-read\",\n  authorize: function () {\n    //Deny uploads if user is not logged in.\n    if (!this.userId) {\n      var message = \"Please login before posting files\";\n      throw new Meteor.Error(\"Login Required\", message);\n    }\n\n    return true;\n  },\n  maxSize: 10 * 1024 * 1024,\n  // 10 MB (use null for unlimited).\n  allowedFileTypes: [\"image/png\", \"image/jpeg\", \"image/gif\"],\n  key: function (file) {\n    let re = /(?:\\.([^.]+))?$/;\n    let fileExt = re.exec(file.name)[1];\n    return Meteor.userId() + \"/\" + uuid.v4() + \".\" + fileExt;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"invites.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/accounts/server/invites.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Email;\nmodule.watch(require(\"meteor/email\"), {\n  Email(v) {\n    Email = v;\n  }\n\n}, 1);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/account-invites/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 2);\nlet Settings;\nmodule.watch(require(\"../../../settings\"), {\n  default(v) {\n    Settings = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"account-invite-create\": function (invite) {\n    const user = Meteor.user();\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    };\n\n    removeTypeNames(invite);\n    let newInvite = Object.assign({}, Schema, {\n      owner: user._id\n    }, invite);\n\n    if (!newInvite.account) {\n      throw new Meteor.Error(500, \"No Account sent on Invite\");\n    }\n\n    let newInviteID = SocialAccountsInvites.insert(newInvite);\n    newInvite._id = newInviteID;\n    Meteor.call(\"account-invite-send-email\", newInvite);\n    return newInviteID;\n  },\n  \"account-invite-delete\": function (invite, accountID) {\n    let dbInvite = SocialAccountsInvites.findOne({\n      _id: invite._id\n    });\n\n    if (dbInvite.account !== accountID) {\n      throw new Meteor.Error(403, \"Invite doesn't belong to account\");\n    }\n\n    return SocialAccountsInvites.remove({\n      _id: invite._id\n    });\n  },\n  \"account-invite-send-email\": function (invite) {\n    let account = SocialAccounts.findOne({\n      _id: invite.account\n    });\n    let user = Meteor.users.findOne({\n      _id: account.owner\n    }, {\n      fields: {\n        services: 0\n      }\n    });\n    let userName = user.profile.name;\n    let accountName = (account.information.name || \"\") + \" \" + (account.information.lastName || \"\");\n    let dbUser = Accounts.findUserByEmail(invite.email);\n\n    if (dbUser) {\n      Meteor.call(\"notifications-create\", dbUser._id, {\n        type: \"info\",\n        title: \"Nueva Invitación\",\n        description: \"Has sido invitado a administrar la cuenta de \" + accountName,\n        url: \"http://localhost:3000/accounts/invite/\" + invite._id\n      });\n    }\n\n    this.unblock();\n    let subject = \"Ha sido invitado a administrar una cuenta\";\n    let html = (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" te ha invitado a administrar la cuenta de \" + accountName + \"<br> <a href='http://localhost:3000/accounts/invite/\" + invite._id + \"'>Ver Invitación</a>\";\n\n    if (invite.type === \"share\") {\n      subject = \"Ha sido invitado a administrar una cuenta\";\n      html = (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" te ha invitado a administrar la cuenta de \" + accountName + \"<br> <a href='http://localhost:3000/accounts/invite/\" + invite._id + \"'>Ver Invitación</a>\";\n    }\n\n    Email.send({\n      from: Settings.email.noReply,\n      to: invite.email,\n      subject,\n      html\n    });\n    return SocialAccountsInvites.update({\n      _id: invite._id\n    }, {\n      $set: {\n        status: \"sent\",\n        sent: new Date()\n      }\n    });\n  },\n  \"account-invite-update-status\": function (invite, status) {\n    //console.log(\"INVITE_UPDATE\", status);\n    let user = Meteor.user();\n\n    if (status === \"reject\") {\n      return SocialAccountsInvites.update({\n        _id: invite._id\n      }, {\n        $set: {\n          status: \"rejected\"\n        }\n      });\n    }\n\n    if (status === \"accept\") {\n      let query = {};\n\n      if (invite.type === \"share\") {\n        let account = SocialAccounts.findOne({\n          _id: invite.account._id\n        });\n        let shares = account.shares;\n        shares.push(user._id);\n        query = {\n          shares\n        };\n      }\n\n      if (invite.type === \"manager\") {\n        query = {\n          manager: user._id\n        };\n      }\n\n      SocialAccounts.update({\n        _id: invite.account._id\n      }, {\n        $set: query\n      });\n      Meteor.call(\"account-invite-delete\", invite, invite.account._id);\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/accounts/server/methods.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Email;\nmodule.watch(require(\"meteor/email\"), {\n  Email(v) {\n    Email = v;\n  }\n\n}, 1);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/accounts/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 2);\nlet Settings;\nmodule.watch(require(\"../../../settings\"), {\n  default(v) {\n    Settings = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"profile-create\": function (user, connection) {\n    //console.log(\"PROFILE_CREATE_USER\", user);\n    //console.log(\"PROFILE_CREAATE_CONNECTION\",connection);\n\n    /*\n     let passPhrase = Meteor.settings.private.aes.passPhrase;\n      let encriptValues = function (serviceData) {\n     console.log(\"ENCRIPTION_PROCESS\",Object.keys(serviceData));\n     Object.keys(serviceData).forEach(function(key){\n     let value = serviceData[key];\n     console.log(\"PREVIOUS_VALUE [\" + key + \"]: \", value);\n     value = CryptoJS.AES.encrypt(value.toString(), passPhrase).toString();\n     console.log(\"ENCRYPTED_VALUE [\" + key + \"]: \", value);\n     serviceData[key] = value;\n     });\n     };\n      encriptValues(connection.serviceData);\n     */\n    let newProfile = Object.assign({}, Schema, {\n      owner: user._id,\n      manager: user._id,\n      connection: connection.serviceData,\n      network: connection.serviceName\n    });\n    console.log(newProfile.network);\n\n    switch (newProfile.network) {\n      case \"facebook\":\n        newProfile.information.name = newProfile.connection.first_name;\n        newProfile.information.lastName = newProfile.connection.last_name;\n        newProfile.information.avatar = \"https://graph.facebook.com/\" + newProfile.connection.id + \"/picture?type=large\";\n        newProfile.information.gender = newProfile.connection.gender; //newProfile.information.languages = [newProfile.connection.locale.split(\"_\")[0]];\n\n        break;\n\n      case \"twitter\":\n        newProfile.information.name = newProfile.connection.screenName;\n        newProfile.information.avatar = newProfile.connection.profile_image_url_https;\n        newProfile.information.languages = [newProfile.connection.lang];\n        break;\n\n      case \"instagram\":\n        newProfile.information.name = newProfile.connection.full_name;\n        newProfile.information.avatar = newProfile.connection.profile_picture;\n        break;\n\n      case \"google\":\n        newProfile.information.name = newProfile.connection.given_name;\n        newProfile.information.lastName = newProfile.connection.family_name;\n        newProfile.information.avatar = newProfile.connection.picture;\n        break;\n\n      default:\n        throw new Meteor.Error(500, \"Wrong Network\");\n    }\n\n    let profileID = SocialAccounts.insert(newProfile);\n    newProfile._id = profileID;\n\n    if (newProfile.network === 'facebook') {\n      Meteor.call(\"autocreate-pages-related\", profileID);\n    }\n\n    Meteor.call(\"profile-get-stats\", newProfile);\n    return profileID;\n  },\n  \"profiles-save\": function (profile) {\n    const user = Meteor.user();\n    let dbProfile = SocialAccounts.findOne({\n      _id: profile._id\n    });\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    }; //TODO: Change this...\n\n\n    profile.owner = profile.owner._id;\n    profile.manager = profile.manager._id;\n    profile.shares = profile.shares.map(a => a._id);\n    removeTypeNames(profile);\n    return SocialAccounts.update(profile._id, {\n      $set: Object.assign({}, dbProfile, profile)\n    });\n  },\n  \"profiles-mark-delete\": function (profile) {\n    const user = Meteor.user();\n    profile = SocialAccounts.findOne({\n      _id: profile._id\n    });\n\n    if (profile.owner !== user._id) {\n      throw new Meteor.Error(403, \"Only the owner can delete an account\");\n    }\n\n    let accountName = (profile.information.name || \"\") + \" \" + (profile.information.lastName || \"\");\n    let userName = user.profile.name;\n    SocialAccounts.update(profile._id, {\n      $set: {\n        delete: true,\n        active: false\n      }\n    });\n    this.unblock();\n    Email.send({\n      from: \"no-reply@viralizing.me\",\n      to: Settings.support.email,\n      subject: \"Eliminación de Cuenta [\" + (accountName === \" \" ? \"\" : accountName + \" - \") + profile.network + \"]\",\n      html: (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" desea borrar la cuenta \" + accountName + \" (\" + profile._id + \")\"\n    });\n  },\n  \"profiles-restore-delete\": function (profile) {\n    SocialAccounts.update(profile._id, {\n      $set: {\n        delete: true,\n        active: false\n      }\n    });\n  },\n  \"profile-get-stats\": function (profile) {\n    let screenName;\n    let method;\n\n    if (!profile.connection) {\n      profile = SocialAccounts.findOne({\n        _id: profile._id\n      });\n    }\n\n    console.log(\"CALL STATISTICS\");\n\n    switch (profile.network) {\n      case \"facebook\":\n        method = \"facebook-account-stats\";\n        screenName = profile.connection.id;\n        break;\n\n      case \"twitter\":\n        method = \"twitter-account-stats\";\n        screenName = profile.connection.screenName;\n        break;\n\n      case \"instagram\":\n        method = \"instagram-account-stats\";\n        screenName = profile.connection.username;\n        break;\n\n      case \"google\":\n        return;\n\n      default:\n        throw new Meteor.Error(500, \"Unknown Network\");\n    }\n\n    let statistics = Meteor.call(method, screenName, profile);\n    statistics.updated = new Date();\n    console.log(\"NEW STATISTICS\", statistics);\n    return SocialAccounts.update(profile._id, {\n      $set: {\n        statistics\n      }\n    });\n  },\n  \"connect-facebook-pages\": function (accountID, pages) {\n    let user = Meteor.user();\n    let pageData = Meteor.call(\"facebook-pages-list\", accountID);\n    let data = pageData.data.filter(page => pages.indexOf(page.id) !== -1);\n    let pageIDs = [];\n    data.forEach(page => {\n      page.parent = accountID;\n      page.accessToken = page.access_token;\n      let newProfile = Object.assign({}, Schema, {\n        owner: user._id,\n        manager: user._id,\n        connection: page,\n        network: \"facebook\"\n      });\n      newProfile.information.name = page.name;\n      newProfile.information.avatar = \"https://graph.facebook.com/\" + newProfile.connection.id + \"/picture?type=large\";\n      newProfile.type = \"page\"; //pageIDs.push(newProfile);\n      //return;\n\n      let matchPage = SocialAccounts.findOne({\n        \"connection.id\": page.id\n      });\n\n      if (matchPage) {\n        //Page Added return Error\n        console.log(\"Page Already Exists\", page.id);\n        pageIDs.push({\n          status: 'Error',\n          fbId: page.id,\n          name: page.name\n        });\n      } else {\n        let profileID = SocialAccounts.insert(newProfile);\n        newProfile._id = profileID;\n        Meteor.call(\"profile-get-stats\", newProfile);\n        pageIDs.push({\n          status: 'Success',\n          id: profileID,\n          fbId: page.id,\n          name: page.name\n        });\n      }\n    });\n    return pageIDs;\n  },\n  \"account-category-invite-proposal\": function (accountID, data) {\n    //console.log(\"account-category-invite-proposal\", accountID, data);\n    let user = Meteor.user();\n    let userName = user.profile.name;\n    let action = \"Categoria\";\n    let proposal = data.category;\n\n    if (data.type === \"specialty\") {\n      action = \"Especialidad\";\n      proposal = (data.category ? data.category : \"Sin Categoria\") + \" -> \" + data.specialty;\n    }\n\n    this.unblock();\n    let subject = \"Se ha sugerido una nueva \" + action;\n    let html = (userName ? userName : \"El usuario\") + \" (\" + user.emails[0].address + \" - \" + user._id + \")\" + \" ha sugerido una nueva \" + action + \" (\" + proposal + \")\";\n    Email.send({\n      from: Settings.email.noReply,\n      to: \"hello@viralizing.me\",\n      subject,\n      html\n    });\n  },\n  \"account-target-objective-proposal\": function (accountID, data) {\n    //console.log(\"account-target-objective-proposal\", accountID, data);\n    let user = Meteor.user();\n    let userName = user.profile.name;\n    let action = \"Meta\";\n    let proposal = data.objective;\n    this.unblock();\n    let subject = \"Se ha sugerido una nueva \" + action;\n    let html = (userName ? userName : \"El usuario\") + \" (\" + user.emails[0].address + \" - \" + user._id + \")\" + \" ha sugerido una nueva \" + action + \" (\" + proposal + \")\";\n    Email.send({\n      from: Settings.email.noReply,\n      to: \"hello@viralizing.me\",\n      subject,\n      html\n    });\n  },\n  \"autocreate-pages-related\": function (profileID) {\n    let fbPages = Meteor.call(\"facebook-pages-list\", profileID).data;\n    let pageIDs = fbPages.map(page => page.id);\n    Meteor.call(\"connect-facebook-pages\", profileID, pageIDs);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"social-connect.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/accounts/server/social-connect.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\n/////////////////////////////\n// OAuth related functions //\n/////////////////////////////\nlet OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\nlet makePascalCased = function (word) {\n  return word[0].toUpperCase() + word.slice(1).toLowerCase();\n};\n\nlet addOauthService = function (user, options) {\n  console.log(\"addOauthService\");\n  check(options.oauth, {\n    credentialToken: String,\n    // When an error occurs while retrieving the access token, we store\n    // the error in the pending credentials table, with a secret of\n    // null. The client can call the login method with a secret of null\n    // to retrieve the error.\n    credentialSecret: Match.OneOf(null, String)\n  }); // Retrieve the pending credential object\n\n  let result = OAuth.retrieveCredential(options.oauth.credentialToken, options.oauth.credentialSecret);\n\n  if (!result) {\n    // OAuth credentialToken is not recognized, which could be either\n    // because the popup was closed by the user before completion, or\n    // some sort of error where the oauth provider didn't talk to our\n    // server correctly and closed the popup somehow.\n    throw new Meteor.Error(\"Social network not connected.\");\n  }\n\n  if (result instanceof Error) {\n    // We tried to login, but there was a fatal error. Report it back\n    // to the user.\n    throw result;\n  }\n\n  let serviceName = result.serviceName;\n  let serviceData = result.serviceData; // Service Must be valid\n\n  if (serviceName !== \"facebook\" && serviceName !== \"twitter\" && serviceName !== \"instagram\" && serviceName !== \"google\") {\n    throw new Meteor.Error(makePascalCased(serviceName) + \" is not supported\");\n  } // The user must not have used the service already\n\n\n  let dbSocialAccount = SocialAccounts.findOne({\n    \"connection.id\": serviceData.id\n  });\n\n  if (dbSocialAccount) {\n    if (dbSocialAccount.delete) {\n      SocialAccounts.update(dbSocialAccount._id, {\n        $set: {\n          delete: false\n        }\n      });\n      return dbSocialAccount._id;\n    } else {\n      throw new Meteor.Error(\"This \" + makePascalCased(serviceName) + \" account is already connected\");\n    }\n  } // The service must provide an `id` field\n\n\n  if (!_.has(serviceData, \"id\")) {\n    throw new Meteor.Error(\"Service data for service \" + makePascalCased(serviceName) + \" must include id\");\n  }\n\n  return Meteor.call(\"profile-create\", user, result);\n}; //////////////////////////////\n// `addLoginService` method //\n//////////////////////////////\n\n\nMeteor.methods({\n  addLoginService: function (options) {\n    let user = Meteor.user(); // Ensure the user is logged in\n\n    if (!user) {\n      throw new Meteor.Error(\"Login required\");\n    } // Check arguments\n\n\n    check(options, Object); // Adding an oauth service\n\n    if (options.oauth) {\n      return addOauthService(user, options);\n    }\n\n    throw new Meteor.Error(\"Bad request\");\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"advertising\":{\"server\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/advertising/server/bundle.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./file-upload\"));\nmodule.watch(require(\"./methods\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"file-upload.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/advertising/server/file-upload.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet uuid;\nmodule.watch(require(\"uuid\"), {\n  default(v) {\n    uuid = v;\n  }\n\n}, 0);\nSlingshot.createDirective(\"advertising-image-upload\", Slingshot.S3Storage, {\n  bucket: \"ibol-advertising-media\",\n  acl: \"public-read\",\n  authorize: function () {\n    //Deny uploads if user is not logged in.\n    if (!this.userId) {\n      var message = \"Please login before posting files\";\n      throw new Meteor.Error(\"Login Required\", message);\n    }\n\n    return true;\n  },\n  maxSize: 10 * 1024 * 1024,\n  // 10 MB (use null for unlimited).\n  allowedFileTypes: [\"image/png\", \"image/jpeg\", \"image/gif\"],\n  key: function (file) {\n    let re = /(?:\\.([^.]+))?$/;\n    let fileExt = re.exec(file.name)[1];\n    return Meteor.userId() + \"/\" + uuid.v4() + \".\" + fileExt;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/advertising/server/methods.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"advertising-facebook-create-compound-ad\": function (IDs, data) {\n    let {\n      accountID,\n      adAccountID,\n      adSetID\n    } = IDs;\n    let userID = Meteor.userId();\n    if (!userID) throw new Meteor.Error(401, \"Not allowed\");\n    let errors = [];\n    let {\n      creative,\n      ad\n    } = data;\n    let processedFile = creative.image.split(\",\")[1];\n    let image = Meteor.call(\"fb-marketing-images-create\", accountID, adAccountID, processedFile);\n    let hashImage = image.images.bytes.hash;\n    console.log(\"IMAGE_UPLOAD\", hashImage);\n    creative = {\n      title: creative.title,\n      account_id: adAccountID,\n      body: creative.body,\n      //image_url: creative.image,\n      image_hash: hashImage,\n      link_url: creative.link,\n      //object_id: \"369756380077148\",\n      object_story_spec: {\n        \"link_data\": {\n          image_hash: hashImage,\n          \"call_to_action\": {\n            \"type\": \"SIGN_UP\",\n            \"value\": {\n              \"link\": \"https://www.facebook.com/ibolviralizing/\"\n            }\n          },\n          \"link\": \"https://www.facebook.com/ibolviralizing/\",\n          \"message\": \"try it out\"\n        },\n        \"page_id\": \"369756380077148\",\n        \"instagram_actor_id\": \"\"\n      }\n    };\n    let creativeRes = Meteor.call(\"fb-marketing-adCreative-create\", accountID, adAccountID, creative);\n    let creativeID = creativeRes.id;\n    if (!creativeID) errors.push(creativeRes);\n    ad = {\n      name: ad.name,\n      adset_id: adSetID,\n      creative: {\n        creative_id: creativeID\n      },\n      status: \"ACTIVE\" //ACTIVE, PAUSED, DELETED, ARCHIVED\n\n    };\n    let adRes = Meteor.call(\"fb-marketing-ads-create\", accountID, adAccountID, adSetID, creativeID, ad);\n    if (!adRes.id) errors.push(adRes);\n    if (errors.length > 0) return {\n      errors\n    };\n    return adRes;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"agenda\":{\"server\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/agenda/server/bundle.jsx                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./image-upload\"));\nmodule.watch(require(\"./methods\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"image-upload.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/agenda/server/image-upload.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet uuid;\nmodule.watch(require(\"uuid\"), {\n  default(v) {\n    uuid = v;\n  }\n\n}, 0);\nSlingshot.createDirective(\"post-image-upload\", Slingshot.S3Storage, {\n  bucket: \"ibol-posts-media\",\n  acl: \"public-read\",\n  authorize: function () {\n    //Deny uploads if user is not logged in.\n    if (!this.userId) {\n      var message = \"Please login before posting files\";\n      throw new Meteor.Error(\"Login Required\", message);\n    }\n\n    return true;\n  },\n  maxSize: 10 * 1024 * 1024,\n  // 10 MB (use null for unlimited).\n  allowedFileTypes: [\"image/png\", \"image/jpeg\", \"image/gif\"],\n  key: function (file) {\n    let re = /(?:\\.([^.]+))?$/;\n    let fileExt = re.exec(file.name)[1];\n    return Meteor.userId() + \"/\" + uuid.v4() + \".\" + fileExt;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/agenda/server/methods.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet UrlShorter;\nmodule.watch(require(\"node-url-shorter\"), {\n  default(v) {\n    UrlShorter = v;\n  }\n\n}, 2);\nlet HTTP;\nmodule.watch(require(\"meteor/http\"), {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 3);\nlet PostSchema;\nmodule.watch(require(\"../../../server/schemas/posts/schema\"), {\n  default(v) {\n    PostSchema = v;\n  }\n\n}, 4);\nMeteor.methods({\n  \"posts-scheduler\": function (data, userID) {\n    userID = userID || Meteor.userId();\n    let urlRegEx = new RegExp(\"(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})\");\n\n    if (!data.message || typeof data.message !== \"string\") {\n      throw new Meteor.Error(400, \"Message must be set.\");\n    }\n\n    if (!data.accounts || data.accounts.length === 0) {\n      throw new Meteor.Error(400, \"Accounts must me selected\");\n    }\n\n    if (!data.date || typeof data.date.getMonth !== \"function\") {\n      throw new Meteor.Error(400, \"Date is not valid.\");\n    }\n\n    if (data.deadline && typeof data.date.getMonth !== \"function\") {\n      throw new Meteor.Error(400, \"Deadline is not valid.\");\n    }\n\n    if (data.location && !Array.isArray(data.location) && data.location.length !== 2 && typeof data.location[0] !== \"number\" && typeof data.location[1] !== \"number\") {\n      throw new Meteor.Error(400, \"Location is not valid.\");\n    }\n\n    if (data.media && typeof data.media === \"string\" && !data.media.match(urlRegEx)) {\n      throw new Meteor.Error(400, \"Media is not valid.\");\n    }\n\n    if (data.campaign && typeof data.campaign !== \"string\") {\n      throw new Meteor.Error(400, \"Campaign is not valid.\");\n    }\n\n    if (data.invite && typeof data.invite !== \"string\") {\n      throw new Meteor.Error(400, \"Campaign is not valid.\");\n    }\n\n    if (data.isPaid && typeof data.isPaid !== \"boolean\") {\n      throw new Meteor.Error(400, \"isPaid is not valid.\");\n    }\n\n    if (data.status && typeof data.status !== \"string\") {\n      throw new Meteor.Error(400, \"Campaign is not valid.\");\n    }\n\n    if (data.hashtags && data.hashtags.length !== 0 && data.hashtags.every(e => typeof e !== \"string\")) {\n      throw new Meteor.Error(400, \"Hashtags are not valid.\");\n    }\n\n    if (data.hashtags) {\n      data.hashtags.forEach(function (hashtag) {\n        data.message += \" \" + hashtag;\n      });\n    }\n\n    let postIDs = [];\n    data.accounts.forEach(function (account) {\n      let newPost = Object.assign({}, PostSchema);\n      newPost.owner = userID;\n      newPost.type = \"post\";\n      newPost.date = data.date;\n      newPost.deadline = data.deadline || null;\n      newPost.campaign = data.campaign || null;\n      newPost.invite = data.invite || null;\n      newPost.status = data.status || \"scheduled\";\n      newPost.isPaid = data.isPaid || false;\n      newPost.account = {\n        _id: account._id,\n        name: account.information.name,\n        lastName: account.information.lastName,\n        avatar: account.information.avatar,\n        network: account.network\n      };\n      newPost.data.message = data.message;\n      newPost.data.media = data.media;\n      newPost.data.location = data.location;\n      postIDs.push(Posts.insert(newPost));\n    });\n    return postIDs;\n  },\n  \"posts-fake-create\": function () {\n    console.log(\"POSTS_FAKE-CALLED\");\n    let accounts = [{\n      \"_id\": \"6eGeKTxGbNuLfjbtk\",\n      \"network\": \"twitter\",\n      \"information\": {\n        \"avatar\": \"https://pbs.twimg.com/profile_images/826115681946988544/TgOgp2gP_normal.jpg\",\n        \"lastName\": \"Incorp\",\n        \"name\": \"Ibol_Inc\"\n      },\n      \"connection\": {\n        \"id\": \"825526971505446912\",\n        \"screenName\": \"Ibol_Inc\",\n        \"accessToken\": \"825526971505446912-BKiaP4KjYkYFfMCmYDc2AkLZjpcLkV0\",\n        \"accessTokenSecret\": \"UZXTVYOiaIgh50kaDxNFRSx9wbAzWF67ndT9UFvcWurto\",\n        \"profile_image_url\": \"http://pbs.twimg.com/profile_images/826115681946988544/TgOgp2gP_normal.jpg\",\n        \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/826115681946988544/TgOgp2gP_normal.jpg\",\n        \"lang\": \"en\"\n      }\n    }, {\n      \"_id\": \"JTpPdmWj8HHSHE49u\",\n      \"network\": \"facebook\",\n      \"information\": {\n        \"avatar\": \"https://graph.facebook.com/133170043861498/picture?type=large\",\n        \"lastName\": \"Incorp\",\n        \"name\": \"Ibol\"\n      },\n      \"connection\": {\n        \"accessToken\": \"EAAQ8cdw98pUBAAxD8QsSqdMPJWdZAkpHTHwJTZAVIABQCfMjoCgE51GdSbUGUZAzCDJyWDHaACFUIooFW7c77qLKREuRodIy7TB6KRrFfZBHV5Y8i1TAyGq8CB2uvTOz8kGFwgZBiuPkaQKdhhOYwg1CQrZBwxR1oRKarZCyWtvHgZDZD\",\n        \"expiresAt\": 1492367978241,\n        \"id\": \"133170043861498\",\n        \"name\": \"Ibol Incorp\",\n        \"first_name\": \"Ibol\",\n        \"last_name\": \"Incorp\",\n        \"link\": \"https://www.facebook.com/app_scoped_user_id/133170043861498/\",\n        \"gender\": \"male\",\n        \"locale\": \"en_US\",\n        \"age_range\": {\n          \"min\": 21\n        }\n      }\n    }, {\n      \"_id\": \"pBnZgT5E3x7Cekj8a\",\n      \"network\": \"instagram\",\n      \"information\": {\n        \"avatar\": \"https://scontent.cdninstagram.com/t51.2885-19/s150x150/16230362_1842733642635953_3112165154159067136_n.jpg\",\n        \"lastName\": \"\",\n        \"name\": \"Ibol\"\n      },\n      \"connection\": {\n        \"bio\": \"\",\n        \"username\": \"ibol_viralizing\",\n        \"id\": \"4533566292\",\n        \"full_name\": \"Ibol\",\n        \"website\": \"\",\n        \"profile_picture\": \"https://scontent.cdninstagram.com/t51.2885-19/s150x150/16230362_1842733642635953_3112165154159067136_n.jpg\",\n        \"accessToken\": \"4533566292.aef68f0.6e138f18196345c596dd6e80d6ab59aa\"\n      }\n    }];\n    let i;\n    let lastDate = new Date();\n    let posts = [];\n\n    for (i = 0; i < 100; i++) {\n      console.log(\"POST_\" + i + \"_INITIATED\", lastDate);\n      let accountPosition = Math.floor(Math.random() * 3);\n      let account = accounts[accountPosition];\n      let newPost = Object.assign({}, PostSchema);\n      let minutesOffset = Math.floor(Math.random() * 3) + 1;\n      newPost.owner = Meteor.userId();\n      newPost.type = \"post\";\n      newPost.date = moment(lastDate).add(minutesOffset, \"minutes\").toDate();\n      newPost.status = \"scheduled\";\n      newPost.isPaid = false;\n      newPost.account = {\n        _id: account._id,\n        name: account.information.name,\n        lastName: account.information.lastName,\n        avatar: account.information.avatar,\n        network: account.network\n      };\n      newPost.data.message = \"This is a test message #viralizing\";\n      newPost.data.media = \"https://scontent.fmex7-1.fna.fbcdn.net/v/t31.0-8/16252222_130164834162019_8387112973073187684_o.jpg?oh=7921c404001814ff46dd3ff43601f63b&oe=59306168\";\n      lastDate = moment(newPost.date).toDate();\n      posts.push(Posts.insert(newPost));\n      console.log(\"POST_\" + i + \"_CREATED\");\n    }\n\n    console.log(\"FOR_LOOP_FINISHED\", posts.length);\n    return posts;\n  },\n  \"post-get-short-url\": function (url) {\n    check(url, String);\n    return HTTP.call(\"POST\", \"https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyBcythzarlyApVyP89lJ8W4QagEYVhru2E\", {\n      data: {\n        longUrl: url\n      }\n    }).data.id;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"code\":{\"server\":{\"bundle.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/code/server/bundle.jsx                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"examples\":{\"server\":{\"bundle.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/examples/server/bundle.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"google-plus\":{\"server\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google-plus/server/bundle.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./post-create\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google-plus/server/connection.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar google = require(\"googleapis\");\n\nlet GoogleConnection = function (token) {\n  var plus = google.plus(\"v1\");\n  var OAuth2 = google.auth.OAuth2;\n  var oauth2Client = new OAuth2(\"666001639290-4ockfbrs6nruqfds6jkugk1g8mctffe2.apps.googleusercontent.com\", \"xmMAWuSkSv99ENIjVCHNTUf9\", \"http://localhost:3000\");\n  oauth2Client.setCredentials({\n    access_token: token\n  });\n  google.options({\n    auth: oauth2Client\n  });\n  return {\n    library: plus,\n    oauth: oauth2Client\n  };\n};\n\nmodule.exportDefault(GoogleConnection);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"post-create.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/google-plus/server/post-create.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet GoogleConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    GoogleConnection = v;\n  }\n\n}, 0);\nlet HTTP;\nmodule.watch(require(\"meteor/http\"), {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 1);\n\nlet request = require('request').defaults({\n  encoding: null\n});\n\nMeteor.methods({\n  \"google-post-create\": function (profileID, message, callback) {\n    let profile = Profiles.findOne({\n      \"network\": \"google\"\n    });\n\n    if (!profile) {\n      throw new Meteor.Error(\"There's no matching profile\");\n    }\n\n    let connection = profile.connection,\n        client = GoogleConnection(connection.accessToken);\n\n    if (client) {\n      let postMessage = function (post) {\n        return client.post('statuses/update', post, function (error, tweet, response) {\n          if (error) {\n            console.log(\"TWITTER_ERROR\");\n            throw new Meteor.Error(\"Twitter: Failed to Post\");\n          }\n\n          console.log(\"TWEET_SUCCESSFUL\", tweet); // Tweet body.\n\n          if (callback) {\n            callback();\n          }\n        });\n      },\n          postImage = function (post) {\n        return request.get(post.media, function (error, response, body) {\n          if (!error && response.statusCode == 200) {\n            client.post('media/upload', {\n              media: body\n            }, function (error, media, response) {\n              if (error) {\n                throw new Meteor.Error(\"Twitter: Failed to Upload Media\");\n              }\n\n              if (!error) {\n                post.media_ids = media.media_id_string;\n                delete post.media;\n                return postMessage(post);\n              }\n            });\n          }\n        });\n      };\n\n      message = {\n        status: \"I Love Pagani!!!! \" + moment().format(\"HH:MM:SS A\"),\n        lat: \"37.7821120598956\",\n        long: \"-122.400612831116\",\n        display_coordinates: true,\n        media: \"https://c1.staticflickr.com/8/7340/9722529830_cd8851126e_b.jpg\"\n      };\n      var body = 'My first post using facebook-node-sdk';\n      console.log(Object.keys(client.library.activities));\n      client.library.people.get({\n        userId: 'me'\n      }, function (err, response) {\n        console.log(\"ERROR\", err);\n        console.log(\"RESPONSE\", response);\n      });\n      HTTP.call(\"POST\", \"https://www.googleapis.com/plusDomains/v1/people/{userId}/activities\", {\n        data: {\n          \"object\": {\n            \"originalContent\": \"Happy Monday! #caseofthemondays\"\n          },\n          \"access\": {\n            \"items\": [{\n              \"type\": \"domain\"\n            }],\n            \"domainRestricted\": true\n          }\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"OAuth$\" + connection.accessToken\n        }\n      });\n      /*\n       let query;\n        if (message.media) {\n       query = postImage(message);\n       } else {\n       query = postMessage(message);\n       }\n        return query;*/\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"instagram\":{\"server\":{\"account-stats.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/instagram/server/account-stats.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet InstagramConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    InstagramConnection = v;\n  }\n\n}, 0);\nMeteor.methods({\n  \"instagram-account-stats\": function (userName, profile) {\n    if (!profile) {\n      profile = SocialAccounts.findOne({\n        \"network\": \"instagram\"\n      });\n    }\n\n    if (!profile) {\n      throw new Meteor.Error(\"There's no matching profile\");\n    }\n\n    let connection = profile.connection,\n        client = InstagramConnection(connection.accessToken);\n\n    if (profile) {\n      let posts = [];\n      let syncUser = Meteor.wrapAsync(client.user_self, client); //console.log(\"before user\");\n\n      let user = syncUser({\n        access_token: connection.accessToken\n      }); //console.log(\"after user\", user);\n\n      let syncPosts = Meteor.wrapAsync(client.user_self_media_recent, client),\n          getPosts = function (max_id) {\n        let query = {\n          count: 200\n        };\n\n        if (max_id) {\n          query.max_id = max_id;\n        }\n\n        let result = syncPosts(query, {\n          access_token: connection.accessToken\n        }),\n            lastPost = result[result.length - 1];\n        posts = [...posts, ...result];\n\n        if (lastPost) {\n          if (max_id) {\n            if (max_id !== lastPost.id) {\n              getPosts(lastPost.id);\n            }\n          } else {\n            getPosts(lastPost.id);\n          }\n        }\n      };\n\n      getPosts();\n      let samplePost = {\n        created_time: Number(new Date()) / 1000\n      };\n      const first = posts[0] || samplePost;\n      const last = posts[posts.length - 1] || samplePost;\n      let comments = 0;\n      let likes = 0;\n\n      for (const x of posts) {\n        comments += x.comments.count;\n        likes += x.likes.count;\n      }\n\n      let result = {\n        comments,\n        commentsPerPost: comments / posts.length,\n        likes,\n        likesPerPost: likes / posts.length,\n        engagement: (comments + likes) / posts.length / user.counts.followed_by,\n        followers: user.counts.followed_by,\n        following: user.counts.follows,\n        posts: user.counts.media,\n        postsPerDay: posts.length / Math.abs(moment(new Date(Number(first.created_time) * 1000)).diff(moment(new Date(Number(last.created_time) * 1000)), \"days\"))\n      };\n      Object.keys(result).forEach(key => {\n        if (Number.isNaN(result[key])) {\n          result[key] = 0;\n        }\n      });\n\n      if (result.postsPerDay === Infinity) {\n        result.postsPerDay = 0;\n      }\n\n      return result;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/instagram/server/bundle.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./post-create\"));\nmodule.watch(require(\"./account-stats\"));\nmodule.watch(require(\"./search\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/instagram/server/connection.jsx                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet instagram;\nmodule.watch(require(\"instagramapi\"), {\n  default(v) {\n    instagram = v;\n  }\n\n}, 0);\n\nlet InstagramConnection = function (token) {\n  let client = instagram.instagram();\n  client.use({\n    access_token: token\n  });\n  return client;\n};\n\nmodule.exportDefault(InstagramConnection);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"post-create.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/instagram/server/post-create.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nMeteor.methods({\n  \"instagram-post-create\": function (connection, post, callback) {\n    //console.log(\"INSTAGRAM_POST_CREATE\");\n    //console.log(\"INSTAGRAM_POST_DATE:\", post.date, \"_CURRENT_TIME:\", new Date());\n    Meteor.call(\"notifications-create\", \"zfbP3aTqiP8yAg8NQ\", {\n      title: \"Instagram Post\",\n      description: \"You have a scheduled post\"\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"search.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/instagram/server/search.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*import InstagramConnection from \"./connection\";\nimport InstagramSearchTags from \"instagram-searchtags\";\n\nMeteor.methods({\n    \"instagram-search\": function (query) {\n        const searchTags = new InstagramSearchTags({\n            username: 'ibol_viralizing',\n            password: 'ibol2017',\n        });\n\n\n// Login Instagram with credentials\n        searchTags.login()\n            .then(() => {\n\n                // Create #dog tag\n                const tag = searchTags.createTag('dog')\n\n                // Fetch 10 latest nodes\n                return tag.fetchNodes(10)\n\n            })\n            .then((nodes) => {\n\n                // ... do something cool with nodes\n\n                // close connection\n                searchTags.close()\n\n            })\n            .catch((err) => {\n\n                // close connection\n                searchTags.close()\n\n                console.error(`Error: ${err.message}`)\n\n            })\n    }\n});\n*/\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"paypal\":{\"server\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/paypal/server/bundle.jsx                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./payouts\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/paypal/server/connection.jsx                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet paypal;\nmodule.watch(require(\"paypal-rest-sdk\"), {\n  default(v) {\n    paypal = v;\n  }\n\n}, 0);\n\nlet PaypalConnection = function () {\n  paypal.configure({\n    mode: \"sandbox\",\n    client_id: Meteor.settings.private.paypal.clientId,\n    client_secret: Meteor.settings.private.paypal.secret\n  });\n  return paypal;\n};\n\nmodule.exportDefault(PaypalConnection);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"payouts.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/paypal/server/payouts.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet PaypalConnection;\nmodule.watch(require(\"./connection\"), {\n  default(v) {\n    PaypalConnection = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"paypal-payouts-create\": function () {\n    let sender_batch_id = Math.random().toString(36).substring(9);\n    let create_payout_json = {\n      \"sender_batch_header\": {\n        \"sender_batch_id\": sender_batch_id,\n        \"email_subject\": \"You have a payment\"\n      },\n      \"items\": [{\n        \"recipient_type\": \"EMAIL\",\n        \"amount\": {\n          \"value\": 0.99,\n          \"currency\": \"USD\"\n        },\n        \"receiver\": \"shirt-supplier-one@mail.com\",\n        \"note\": \"Thank you.\",\n        \"sender_item_id\": \"item_1\"\n      }, {\n        \"recipient_type\": \"EMAIL\",\n        \"amount\": {\n          \"value\": 0.90,\n          \"currency\": \"USD\"\n        },\n        \"receiver\": \"shirt-supplier-two@mail.com\",\n        \"note\": \"Thank you.\",\n        \"sender_item_id\": \"item_2\"\n      }, {\n        \"recipient_type\": \"EMAIL\",\n        \"amount\": {\n          \"value\": 2.00,\n          \"currency\": \"USD\"\n        },\n        \"receiver\": \"shirt-supplier-three@mail.com\",\n        \"note\": \"Thank you.\",\n        \"sender_item_id\": \"item_3\"\n      }]\n    };\n    let paypal = PaypalConnection();\n    /*paypal.payout.create(create_payout_json, function (error, payout) {\n        if (error) {\n            console.log(error.response);\n        } else {\n            console.log(\"Create Payout Response\");\n            console.log(payout);\n        }\n    });*/\n\n    let client = Meteor.wrapAsync(paypal.payout.create, paypal.payout);\n\n    try {\n      return client(create_payout_json);\n    } catch (e) {\n      return e;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"pricing\":{\"server\":{\"bundle.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/pricing/server/bundle.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"reporter\":{\"server\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/reporter/server/bundle.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./methods\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/reporter/server/methods.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Email;\nmodule.watch(require(\"meteor/email\"), {\n  Email(v) {\n    Email = v;\n  }\n\n}, 1);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/reports/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 2);\nlet Settings;\nmodule.watch(require(\"../../../settings\"), {\n  default(v) {\n    Settings = v;\n  }\n\n}, 3);\nMeteor.methods({\n  \"report-create\": function (data) {\n    let user = Meteor.user();\n    let newReport = Object.assign({}, Schema, data, {\n      owner: user._id\n    });\n    console.log(\"REPORT_CREATE\", newReport);\n    return Reports.insert(newReport);\n  },\n  \"report-save\": function (report) {\n    const user = Meteor.user();\n    let dbReport = Reports.findOne({\n      _id: report._id\n    });\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    };\n\n    report.owner = report.owner._id;\n    removeTypeNames(report);\n    return Reports.update(report._id, {\n      $set: Object.assign({}, dbReport, report)\n    });\n  },\n  \"report-delete\": function (report) {\n    let dbReport = Reports.findOne({\n      _id: report._id\n    });\n    const user = Meteor.user();\n\n    if (dbReport.owner !== user._id) {\n      throw new Meteor.Error(403, \"Report doesn't belong to user.\");\n    }\n\n    return Reports.remove({\n      _id: report._id\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"statement\":{\"server\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/statement/server/bundle.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./methods\"));\nmodule.watch(require(\"./upload\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/statement/server/methods.jsx                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/payments/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"payments-create-fake\": function () {\n    let user = Meteor.user();\n    let accounts = SocialAccounts.find({}, {\n      fields: {\n        _id: 1\n      }\n    }).fetch();\n    accounts = [...accounts, ...accounts, ...accounts];\n    let cards = [\"Visa\", \"Amex\", \"MasterCard\", \"Discover\"];\n    let payments = accounts.map(a => Object.assign({}, Schema, {\n      status: \"completed\",\n      from: user._id,\n      to: a._id,\n      campaign: Math.round(Math.random()) ? \"FGHsw43uezjudkN2p\" : \"XEuAEdnJL57WobBKN\",\n      amount: Math.round(Math.random() * 100000),\n      date: moment().subtract(Math.floor(Math.random() * 600), 'days').toDate(),\n      paymentMethod: {\n        brand: cards[Math.floor(Math.random() * 4)],\n        last4: String(Math.floor(Math.random() * 10)) + String(Math.floor(Math.random() * 10)) + String(Math.floor(Math.random() * 10)) + String(Math.floor(Math.random() * 10))\n      }\n    }));\n    return payments.map(p => Payments.insert(p));\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"upload.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/statement/server/upload.jsx                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nSlingshot.createDirective(\"test-bucket-ibol\", Slingshot.S3Storage, {\n  bucket: \"test-bucket-ibol\",\n  allowedFileTypes: null,\n  acl: \"public-read\",\n  authorize: function () {\n    //Deny uploads if user is not logged in.\n    if (!this.userId) {\n      var message = \"Please login before posting files\";\n      throw new Meteor.Error(\"Login Required\", message);\n    }\n\n    return true;\n  },\n  maxSize: 5 * 1024 * 1024 * 1024,\n  key: function (file) {\n    //Store file into a directory by the user's username.\n    var user = Meteor.users.findOne(this.userId);\n    return user.username + \"/\" + file.name;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"teamattack\":{\"server\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/teamattack/server/bundle.jsx                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./methods\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/teamattack/server/methods.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Schema;\nmodule.watch(require(\"../../../server/schemas/team-attack/schema\"), {\n  default(v) {\n    Schema = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"teamAttack-create\": function (teamAttack) {\n    let user = Meteor.user();\n    let newTeamAttack = Object.assign({}, Schema, {\n      owner: user._id\n    }, teamAttack);\n    return TeamAttack.insert(newTeamAttack);\n  },\n  \"teamAttack-save\": function (teamAttack) {\n    const user = Meteor.user(); //console.log(\"teamAttack-save\", teamAttack);\n\n    let dbTeamAttack = TeamAttack.findOne({\n      _id: teamAttack._id\n    });\n\n    const removeTypeNames = function (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (k === \"__typename\") {\n          delete obj[k];\n        }\n\n        if (obj[k] && typeof obj[k] === \"object\") {\n          removeTypeNames(obj[k]);\n        }\n      });\n    };\n\n    teamAttack.owner = teamAttack.owner._id;\n    teamAttack.members = teamAttack.members.map(m => m._id);\n    removeTypeNames(teamAttack);\n    return TeamAttack.update(teamAttack._id, {\n      $set: Object.assign({}, dbTeamAttack, teamAttack)\n    });\n  },\n  \"teamAttack-delete\": function (teamAttack) {\n    const user = Meteor.user();\n    let dbTeamAttack = TeamAttack.findOne({\n      _id: teamAttack._id\n    });\n\n    if (dbTeamAttack.owner !== user._id) {\n      throw new Meteor.Error(403, \"Only the owner can delete an account\");\n    }\n\n    return TeamAttack.remove({\n      _id: dbTeamAttack._id\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"bundles\":{\"server.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/modules/bundles/server.jsx                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"../core/server/bundle\"));\nmodule.watch(require(\"../agenda/server/bundle\"));\nmodule.watch(require(\"../examples/server/bundle\"));\nmodule.watch(require(\"../accounts/server/bundle\"));\nmodule.watch(require(\"../campaigns/server/bundle\"));\nmodule.watch(require(\"../reporter/server/bundle\"));\nmodule.watch(require(\"../code/server/bundle\"));\nmodule.watch(require(\"../statement/server/bundle\"));\nmodule.watch(require(\"../pricing/server/bundle\"));\nmodule.watch(require(\"../teamattack/server/bundle\"));\nmodule.watch(require(\"../advertising/server/bundle\"));\nmodule.watch(require(\"../twitter/server/bundle\"));\nmodule.watch(require(\"../facebook/server/bundle\"));\nmodule.watch(require(\"../instagram/server/bundle\"));\nmodule.watch(require(\"../google-plus/server/bundle\"));\nmodule.watch(require(\"../google/server/bundle\"));\nmodule.watch(require(\"../stripe/server/bundle\"));\nmodule.watch(require(\"../paypal/server/bundle\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"schemas\":{\"account-invites\":{\"definitions\":{\"account-invites.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/account-invites/definitions/account-invites.jsx                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst AccountInvite = `\ntype AccountInvite {\n    _id: String,\n    account: Account,\n    email: String,\n    sent: String,\n    owner: User,\n    status: String,\n    type: String\n}\n`;\nmodule.exportDefault([AccountInvite]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/account-invites/definitions/bundle.jsx                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet accountInvites;\nmodule.watch(require(\"./account-invites\"), {\n  default(v) {\n    accountInvites = v;\n  }\n\n}, 0);\nmodule.exportDefault([...accountInvites]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"account-invites.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/account-invites/resolvers/account-invites.jsx                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    accountInvite(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        _id: args.inviteID\n      };\n      return SocialAccountsInvites.findOne(query);\n    },\n\n    accountInvites(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        account: args.accountID\n      };\n      return SocialAccountsInvites.find(query).fetch();\n    }\n\n  },\n  AccountInvite: {\n    owner: account => {\n      let user = Meteor.users.findOne({\n        _id: account.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    account: invite => {\n      let user = SocialAccounts.findOne({\n        _id: invite.account\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/account-invites/resolvers/bundle.jsx                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet accountInvites;\nmodule.watch(require(\"./account-invites\"), {\n  default(v) {\n    accountInvites = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(accountInvites));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/account-invites/bundle.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/account-invites/schema.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  account: null,\n  email: null,\n  sent: null,\n  owner: null,\n  status: \"pending\",\n  type: \"manager\"\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"accounts\":{\"definitions\":{\"account.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/accounts/definitions/account.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet User;\nmodule.watch(require(\"../../users/definitions/users\"), {\n  default(v) {\n    User = v;\n  }\n\n}, 0);\nconst Account = `\ntype Account {\n    _id: String,\n    suspended: Boolean,\n    type: String,\n    active: Boolean,\n    delete: Boolean,\n    network: String,\n    manager: User,\n    owner: User,\n    shares: [User],\n    connection: Connection,\n    settings: AccountSettings,\n    information: AccountInformation,\n    audience: AccountAudience,\n    pricing: AccountPricing,\n    gallery: AccountGallery,\n    groups: [String],\n    statistics: AccountStatistics,\n    campaignsCount: Int\n}\n`;\nconst AccountGallery = `\ntype AccountGallery {\n    images: [AccountGalleryFolder],\n    videos: [AccountGalleryFolder]\n}\n`;\nconst AccountGalleryFolder = `\ntype AccountGalleryFolder {\n    name: String,\n    content: [String]\n}\n`;\nconst AccountStatistics = `\ntype AccountStatistics {\n    retweets: String,\n    retweetsPerPost: String,\n    favorites: String,\n    favoritesPerPost: String,\n    comments: String,\n    commentsPerPost: String,\n    likes: String,\n    likesPerPost: String,\n    shares: String,\n    sharesPerPost: String,\n    engagement: String,\n    followers: Int,\n    following: String,\n    profileLikes: String,\n    posts: String,\n    postsPerDay: String\n}\n`;\nconst AccountAudienceTarget = `\ntype AccountAudienceTarget {\n    name: String,\n    age: String,\n    gender: String,\n    nrssg: String,\n    countries: [String],\n    cities: [String],\n    languages: [String],\n    description:String\n}   \n`;\nconst AccountAudienceObjectives = `\ntype AccountAudienceObjectives {\n    increaseFollowers: Boolean,\n    increaseViews: Boolean,\n    increaseShares: Boolean,\n    increaseEngagement: Boolean,\n    increaseLikes: Boolean,\n    increaseTrafficHours: Boolean,\n    reachNewMarkets: Boolean,\n    increaseSpeaking: Boolean,\n    increasePlays: Boolean,\n    increaseWebsiteTraffic: Boolean,\n    positionTarget: Boolean,\n    keepTarget: Boolean,\n    presence: Boolean,\n    positionNewMarkets: Boolean,\n    \n}   \n`;\nconst AccountAudience = `\ntype AccountAudience {\n    targets:[AccountAudienceTarget]\n    conquer:[String],\n    objectives: AccountAudienceObjectives\n}   \n`;\nconst Connection = `\ntype Connection {\n    accessToken: String,\n    id:String\n}\n`;\nconst AccountSettings = `\ntype AccountSettings {\n    type: AccountsSettingsType\n}   \n`;\nconst AccountsSettingsType = `\ntype AccountsSettingsType {\n    brand: Boolean,\n    influencer: Boolean\n}\n`;\nconst AccountInformation = `\ntype AccountInformation {\n    name: String,\n    lastName: String,\n    avatar: String,\n    gender: String,\n    birthDate: String,\n    country: String,\n    city: String,\n    maritalStatus: String,\n    forbiddenSubjects: [String],\n    sexualOrientation: String,\n    likes: [String],\n    language: String,\n    description: String,\n    categories:[String],\n    specialties:[String]\n    urls: [String],\n} \n`;\nconst AccountConceptSubjects = `\ntype AccountConceptSubjects {\n    primary: [String],\n    secondary: [String],\n    forbidden: [String]\n}\n`;\nconst AccountPricing = `\ntype AccountPricing {\n    post: String,\n    profilePicture:String,\n    coverPhoto:String,\n    noPostHour:String,\n    noPostDay:String,\n    share: String,\n    partnership: String,\n    ambassador: String\n}\n`;\nconst AccountPricingPhotos = `\ntype AccountPricingPhotos {\n    profile: String,\n    cover: String\n}\n\n`;\nconst AccountPricingNoPost = `\ntype AccountPricingNoPost {\n    hour: String,\n    day: String\n}\n`;\nconst RangeQuery = `\ninput RangeQuery {\n    min: String,\n    max: String\n}\n`;\nmodule.exportDefault([Account, Connection, AccountGallery, AccountGalleryFolder, AccountAudience, AccountAudienceTarget, AccountAudienceObjectives, AccountSettings, AccountStatistics, AccountsSettingsType, AccountInformation, AccountConceptSubjects, AccountPricing, AccountPricingPhotos, AccountPricingNoPost, RangeQuery, ...User]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/accounts/definitions/bundle.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet accounts;\nmodule.watch(require(\"./account\"), {\n  default(v) {\n    accounts = v;\n  }\n\n}, 0);\nlet fbPages;\nmodule.watch(require(\"./facebook-pages\"), {\n  default(v) {\n    fbPages = v;\n  }\n\n}, 1);\nmodule.exportDefault([...accounts, ...fbPages]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"facebook-pages.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/accounts/definitions/facebook-pages.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst FBPage = `\ntype FBPage {\n    id: String,\n    name: String,\n    category: String,\n    perms: [String],\n    picture: String\n}\n`;\nmodule.exportDefault([FBPage]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"accounts.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/accounts/resolvers/accounts.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    account(root, args, context) {\n      // Only return the current user, for security\n      const account = SocialAccounts.findOne({\n        _id: args._id\n      });\n      let userID = context.userId;\n\n      if (userID !== account.owner && userID !== account.manager && account.shares.indexOf(userID) == -1) {\n        return null;\n      }\n\n      return account;\n    },\n\n    accountsOwnSearch(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        $or: [{\n          owner: userID\n        }, {\n          manager: userID\n        }, {\n          shares: {\n            $in: [userID]\n          }\n        }],\n        delete: {\n          $ne: true\n        }\n      };\n\n      if (args.query) {\n        const regex = new RegExp(args.query, \"i\");\n        query.$and.push({\n          $or: [{\n            \"information.name\": {\n              $regex: regex\n            }\n          }, {\n            \"information.lastName\": {\n              $regex: regex\n            }\n          }, {\n            \"network\": {\n              $regex: regex\n            }\n          }]\n        });\n      }\n\n      console.log(\"ACCOUNTS_OWN\", query);\n      return SocialAccounts.find(query, {\n        limit: 15\n      }).fetch();\n    },\n\n    accountsByTag(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      re = new RegExp(args.tag, \"i\");\n      console.log(\"ACCOUNTS_BY_TAG: \", args.tag); //db.accounts.find({groups:{$in:[/^ibol$/i]}}).count()\n\n      let query = {\n        $and: [{\n          $or: [{\n            owner: userID\n          }, {\n            manager: userID\n          }, {\n            shares: {\n              $in: [userID]\n            }\n          }]\n        }],\n        groups: {\n          $in: [re]\n        }\n      };\n      return SocialAccounts.find(query).fetch();\n    },\n\n    accounts(root, args, context) {\n      const userID = context.userId;\n      return SocialAccounts.find({\n        $or: [{\n          owner: userID\n        }, {\n          manager: userID\n        }, {\n          shares: {\n            $in: [userID]\n          }\n        }],\n        delete: {\n          $ne: true\n        }\n      }).fetch();\n    },\n\n    accountFBPages(root, args, context) {\n      const userID = context.userId;\n      let fbPages = Meteor.call(\"facebook-pages-list\", args.accountID).data;\n      let PagesIDs = fbPages.map(p => p.id);\n      console.log(\"FB_PAGES\", PagesIDs);\n      let dbPages = SocialAccounts.find({\n        type: \"page\",\n        \"connection.id\": {\n          $in: PagesIDs\n        }\n      }, {\n        fields: {\n          \"connection.id\": 1\n        }\n      }).fetch().map(p => p.connection.id);\n      console.log(\"DB_PAGES\", dbPages);\n      return fbPages.filter(p => dbPages.indexOf(p.id) === -1);\n    }\n\n  },\n  Account: {\n    manager: account => {\n      let user = Meteor.users.findOne({\n        _id: account.manager\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    owner: account => {\n      let user = Meteor.users.findOne({\n        _id: account.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    shares: account => {\n      let users = Meteor.users.find({\n        _id: {\n          $in: account.shares\n        }\n      }, {\n        fields: {\n          services: 0\n        }\n      }).fetch();\n      return users;\n    },\n    campaignsCount: account => {\n      //TODO: Add Distinct to this query\n      let count = Campaigns.find({\n        'information.brands': {\n          $in: [account._id]\n        }\n      }).count();\n      return count;\n    }\n  },\n  FBPage: {\n    picture: page => page.picture.data.url\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/accounts/resolvers/bundle.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet accounts;\nmodule.watch(require(\"./accounts\"), {\n  default(v) {\n    accounts = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(accounts));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/accounts/bundle.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/accounts/schema.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  network: \"\",\n  manager: \"\",\n  type: \"account\",\n  shares: [],\n  suspended: false,\n  active: false,\n  delete: false,\n  connection: {},\n  settings: {\n    type: {\n      brand: false,\n      influencer: false\n    }\n  },\n  information: {\n    name: \"\",\n    lastName: \"\",\n    avatar: \"\",\n    gender: \"\",\n    birthDate: null,\n    country: \"\",\n    city: \"\",\n    maritalStatus: \"\",\n    forbiddenSubjects: [],\n    sexualOrientation: \"\",\n    likes: [],\n    language: \"\",\n    description: \"\",\n    categories: [],\n    specialties: [],\n    urls: []\n  },\n  audience: {\n    targets: [],\n    conquer: [],\n    objectives: {\n      increaseFollowers: false,\n      increaseViews: false,\n      increaseShares: false,\n      increaseEngagement: false,\n      increaseLikes: false,\n      increaseTrafficHours: false,\n      reachNewMarkets: false,\n      increaseSpeaking: false,\n      increasePlays: false,\n      increaseWebsiteTraffic: false,\n      positionTarget: false,\n      keepTarget: false,\n      presence: false,\n      positionNewMarkets: false\n    }\n  },\n  pricing: {\n    post: \"\",\n    profilePicture: \"\",\n    coverPhoto: \"\",\n    noPostHour: \"\",\n    noPostDay: \"\",\n    share: \"\",\n    partnership: \"\",\n    ambassador: \"\"\n  },\n  gallery: {\n    images: [],\n    videos: []\n  },\n  groups: []\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"advertising\":{\"definitions\":{\"advertising.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/advertising/definitions/advertising.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet User;\nmodule.watch(require(\"../../users/definitions/users\"), {\n  default(v) {\n    User = v;\n  }\n\n}, 0);\nlet Campaign;\nmodule.watch(require(\"../../campaign/definitions/campaign\"), {\n  default(v) {\n    Campaign = v;\n  }\n\n}, 1);\nconst Advertising = `\ntype Advertising {\n    campaign:Campaign\n    network:String,\n    message:CampaignMessage,\n    budget:String\n}\n`;\nmodule.exportDefault([Advertising, ...Campaign]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/advertising/definitions/bundle.jsx                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet advertising;\nmodule.watch(require(\"./advertising\"), {\n  default(v) {\n    advertising = v;\n  }\n\n}, 0);\nmodule.exportDefault([...advertising]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"advertising.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/advertising/resolvers/advertising.jsx                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {}\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/advertising/resolvers/bundle.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet advertising;\nmodule.watch(require(\"./advertising\"), {\n  default(v) {\n    advertising = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(advertising));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/advertising/bundle.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"campaign\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign/definitions/bundle.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet campaign;\nmodule.watch(require(\"./campaign\"), {\n  default(v) {\n    campaign = v;\n  }\n\n}, 0);\nmodule.exportDefault([...campaign]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"campaign.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign/definitions/campaign.jsx                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Accounts;\nmodule.watch(require(\"../../accounts/definitions/account\"), {\n  default(v) {\n    Accounts = v;\n  }\n\n}, 0);\nconst Campaign = `\ntype Campaign {\n    _id: String,\n    owner: User,\n    manager: User,\n    shares: [User],\n    status: String,\n    information: CampaignInformation,\n    messages: [CampaignMessage],\n    gallery: CampaignGallery\n}\n`;\nconst CampaignGallery = `\ntype CampaignGallery {\n    images: [CampaignGalleryFolder],\n    videos: [CampaignGalleryFolder]\n}\n`;\nconst CampaignGalleryFolder = `\ntype CampaignGalleryFolder {\n    name: String,\n    content: [String]\n}\n`;\nconst CampaignInformation = `\ntype CampaignInformation {\n    profile: String,\n    cover: String,\n    name: String,\n    brands: [Account],\n    conquer: [String],\n    dateStart: String,\n    dateEnd: String,\n    description: String,\n    url: String,\n    objectives: CampaignInformationObjectives\n} \n`;\nconst CampaignInformationObjectives = `\ntype CampaignInformationObjectives {\n    increaseFollowers: Boolean,\n    increaseViews: Boolean,\n    increaseShares: Boolean,\n    increaseEngagement: Boolean,\n    increaseLikes: Boolean,\n    increaseTrafficHours: Boolean,\n    reachNewMarkets: Boolean,\n    increaseSpeaking: Boolean,\n    increasePlays: Boolean,\n    increaseWebsiteTraffic: Boolean,\n    positionTarget: Boolean,\n    keepTarget: Boolean,\n    presence: Boolean,\n    positionNewMarkets: Boolean,\n    \n}   \n`;\nconst CampaignInformationHashtags = `\ntype CampaignInformationHashtags {\n    main: [String],\n    secondary: [String]\n}\n`;\nconst CampaignMessage = `\ntype CampaignMessage {\n    _id: String,\n    message: String,\n    media: String,\n    hashtags: [String]\n}\n`;\nmodule.exportDefault([Campaign, CampaignInformation, CampaignInformationObjectives, CampaignGallery, CampaignGalleryFolder, CampaignInformationHashtags, CampaignMessage, ...Accounts]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign/resolvers/bundle.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet campaign;\nmodule.watch(require(\"./campaign\"), {\n  default(v) {\n    campaign = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(campaign));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"campaign.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign/resolvers/campaign.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    campaign(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      console.log(\"CAMPAIGN\", args);\n      const campaign = Campaigns.findOne({\n        _id: args._id\n      });\n\n      if (userID === campaign.owner) {\n        console.log(\"IsOwner\");\n      }\n\n      return campaign;\n    },\n\n    campaignsOwn(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        owner: userID\n      };\n      return Campaigns.find(query).fetch();\n    }\n\n  },\n  Campaign: {\n    owner: account => {\n      let user = Meteor.users.findOne({\n        _id: account.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    manager: account => {\n      let user = Meteor.users.findOne({\n        _id: account.manager\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    shares: account => {\n      let users = Meteor.users.find({\n        _id: {\n          $in: account.shares\n        }\n      }, {\n        fields: {\n          services: 0\n        }\n      }).fetch();\n      return users;\n    }\n  },\n  CampaignInformation: {\n    brands: account => {\n      if (!account.brands || account.brands.length === 0) {\n        return [];\n      }\n\n      let result = SocialAccounts.find({\n        _id: {\n          $in: account.brands\n        }\n      }, {\n        fields: {\n          connection: 0\n        }\n      }).fetch();\n      return result;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign/bundle.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign/schema.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  owner: null,\n  manager: null,\n  shares: [],\n  status: \"active\",\n  information: {\n    profile: null,\n    cover: null,\n    name: null,\n    brands: [],\n    conquer: [],\n    dateStart: null,\n    dateEnd: null,\n    description: null,\n    url: null,\n    objectives: []\n  },\n  messages: [],\n  gallery: {\n    images: [],\n    videos: []\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"campaign-invites\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign-invites/definitions/bundle.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet campaignInvites;\nmodule.watch(require(\"./campaign-invites\"), {\n  default(v) {\n    campaignInvites = v;\n  }\n\n}, 0);\nmodule.exportDefault([...campaignInvites]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"campaign-invites.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign-invites/definitions/campaign-invites.jsx                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst CampaignInvite = `\ntype CampaignInvite {\n    _id: String,\n    campaign: Campaign,\n    email: String,\n    sent: String,\n    owner: User,\n    status: String,\n    type: String\n}\n`;\nmodule.exportDefault([CampaignInvite]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign-invites/resolvers/bundle.jsx                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet campaignInvites;\nmodule.watch(require(\"./campaign-invites\"), {\n  default(v) {\n    campaignInvites = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(campaignInvites));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"campaign-invites.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign-invites/resolvers/campaign-invites.jsx                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    campaignInvite(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        _id: args.inviteID\n      };\n      return CampaignInvites.findOne(query);\n    },\n\n    campaignInvites(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        account: args.campaignID\n      };\n      return CampaignInvites.find(query).fetch();\n    }\n\n  },\n  CampaignInvite: {\n    owner: account => {\n      let user = Meteor.users.findOne({\n        _id: account.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    campaign: invite => {\n      let campaign = Campaigns.findOne({\n        _id: invite.campaign\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return campaign;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/campaign-invites/bundle.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"events\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/events/definitions/bundle.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet events;\nmodule.watch(require(\"./events\"), {\n  default(v) {\n    events = v;\n  }\n\n}, 0);\nmodule.exportDefault([...events]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/events/definitions/events.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst Event = `\ntype Event {\n    _id: String,\n    type: String,\n    start: String,\n    end: String,\n    allDay: Boolean,\n    title: String,\n    preview: String,\n    network: String\n}\n`;\nmodule.exportDefault([Event]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/events/resolvers/bundle.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet events;\nmodule.watch(require(\"./events\"), {\n  default(v) {\n    events = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(events));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/events/resolvers/events.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    eventsOwn(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      console.log(\"EVENTS_OWN\", args);\n      let posts = [];\n      let campaigns = [];\n\n      if (args.posts) {\n        posts = Posts.find({\n          owner: userID\n        }).fetch().map(p => ({\n          _id: p._id,\n          type: \"post\",\n          allDay: false,\n          start: p.date,\n          end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n          title: (p.account.name || \"\") + \" \" + (p.account.lastName || \"\"),\n          preview: p.account.avatar,\n          network: p.account.network\n        }));\n      }\n\n      if (args.all) {\n        campaigns = Campaigns.find({\n          owner: userID\n        }).fetch().map(c => ({\n          _id: c._id,\n          type: \"campaign\",\n          allDay: true,\n          start: c.information.dateStart,\n          end: c.information.dateEnd,\n          title: c.information.name,\n          preview: c.information.profile,\n          network: null\n        }));\n      } //TODO: IMPLEMENT REST OF FILTERS\n\n\n      return [...posts, ...campaigns];\n    },\n\n    eventsCampaign(root, args, context) {\n      let query = {\n        campaign: args.campaignID\n      };\n\n      if (!args.all) {\n        let filters = [];\n        Object.keys(args).forEach(key => {\n          if (args[key]) {\n            filters.push(key);\n          }\n        });\n        query.status = {\n          $in: filters\n        };\n      }\n\n      let posts = Posts.find(query).fetch().map(p => ({\n        _id: p._id,\n        type: \"post\",\n        allDay: false,\n        start: p.date,\n        end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n        title: (p.account.name || \"\") + \" \" + (p.account.lastName || \"\"),\n        preview: p.account.avatar,\n        network: p.account.network\n      }));\n      return posts;\n    },\n\n    eventsAccount(root, args, context) {\n      let query = {\n        \"account._id\": args.accountID\n      };\n\n      if (!args.all) {\n        let filters = [];\n        Object.keys(args).forEach(key => {\n          if (args[key]) {\n            filters.push(key);\n          }\n        });\n        query.status = {\n          $in: filters\n        };\n      }\n\n      let posts = Posts.find(query).fetch().map(p => ({\n        _id: p._id,\n        type: \"post\",\n        allDay: false,\n        start: p.date,\n        end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n        title: (p.account.name || \"\") + \" \" + (p.account.lastName || \"\"),\n        preview: p.account.avatar,\n        network: p.account.network\n      }));\n      return posts;\n    }\n\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/events/bundle.jsx                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"facebook-ads\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/facebook-ads/definitions/bundle.jsx                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet facebook;\nmodule.watch(require(\"./facebook\"), {\n  default(v) {\n    facebook = v;\n  }\n\n}, 0);\nmodule.exportDefault([...facebook]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"facebook.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/facebook-ads/definitions/facebook.jsx                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst FacebookAccount = `\ntype FacebookAccount {\n    _id: String,\n    status: Int,\n    name: String,\n    money:FacebookAccountMoney,\n    endAdvertiser: FacebookAccountEndAdvertiser,\n    created: String,\n    business: FacebookAccountBusiness\n}\n`;\nconst FacebookAccountMoney = `\ntype FacebookAccountMoney {\n    spent: String,\n    balance: String,\n    currency: String\n}\n`;\nconst FacebookAccountBusiness = `\ntype FacebookAccountBusiness {\n    _id: String,\n    name: String\n}\n`;\nconst FacebookAccountEndAdvertiser = `\ntype FacebookAccountEndAdvertiser {\n    _id: String,\n    name: String\n}\n`;\nconst FacebookCampaign = `\ntype FacebookCampaign {\n    _id: String,\n    name: String,\n    account: FacebookAccount,\n    buyingType: String,\n    objective: String,\n    status: FacebookCampaignStatus,\n    created: String,\n    updated: String,\n    spendCap: String,\n    startDate: String,\n    endDate: String,\n    adSets: [FacebookAdSet]\n}\n`;\nconst FacebookCampaignStatus = `\ntype FacebookCampaignStatus {\n    configured: String,\n    effective: String,\n    status: String\n}\n`;\nconst FacebookAdSet = `\ntype FacebookAdSet {\n    _id: String\n    name: String,\n    account: FacebookAccount,\n    campaign: FacebookCampaign,\n    created: String,\n    updated: String,\n    status: FacebookAdSetStatus,\n    money: FacebookAdSetMoney,\n    billingEvent: String,\n    goal: String,\n    startDate: String,\n    endDate: String,\n    recommendations: [FacebookAdSetRecommendation],\n    impressions: String,\n    promotedObject: FacebookAdSetPromotedObject,\n    targeting: FacebookAdSetTarget,\n    ads:[FacebookAd]\n}\n`;\nconst FacebookAdSetTarget = `\ntype FacebookAdSetTarget {\n    user_os: [String],\n    user_device: [String],\n    facebook_positions: [String],\n    age_max: String,\n    age_min: String,\n    geo_locations: FacebookAdSetTargetGeoLocations,\n    publisher_platforms: [String]\n}\n`;\nconst FacebookAdSetTargetGeoLocations = `\ntype FacebookAdSetTargetGeoLocations {\n    countries: [String],\n    locationTypes: [String]\n}\n`;\nconst FacebookAdSetPromotedObject = `\ntype FacebookAdSetPromotedObject {\n    type: String,\n    data: String\n}\n`;\nconst FacebookAdSetStatus = `\ntype FacebookAdSetStatus {\n    configured: String,\n    effective: String,\n    status: String\n}\n`;\nconst FacebookAdSetRecommendation = `\ntype FacebookAdSetRecommendation {\n    field: String,\n    code: String,\n    confidence: String,\n    importance: String,\n    message: String,\n    title: String\n}\n`;\nconst FacebookAdSetMoney = `\ntype FacebookAdSetMoney {\n    autoBid: Boolean,\n    avgPrizePaceing: Boolean,\n    budget: FacebookAdSetMoneyBudget\n}\n`;\nconst FacebookAdSetMoneyBudget = `\ntype FacebookAdSetMoneyBudget {\n    daily: String,\n    lifetime: String,\n    remaining: String\n}\n`;\nconst FacebookAd = `\ntype FacebookAd {\n    _id: String\n    name: String,\n    status: FacebookAdStatus,\n    adSet: FacebookAdSet,\n    campaign: FacebookCampaign,\n    created: String,\n    updated: String,\n    creative:[FacebookAdCreative],\n    reviewFeedback: String\n}\n`;\nconst FacebookAdStatus = `\ntype FacebookAdStatus {\n    configured: String,\n    effective: String,\n    status: String\n}\n`;\nconst FacebookAdCreative = `\ntype FacebookAdCreative {\n    _id: String\n    title: String,\n    body: String,\n    image: String,\n    link: String,\n    object: FacebookAdCreativeObject,\n    ctaType: String\n}\n`;\nconst FacebookAdCreativeObject = `\ntype FacebookAdCreativeObject {\n    type: String,\n    data: String\n}\n`;\nconst FacebookAudience = `\ntype FacebookAudience {\n    users: Int,\n    estimate_ready: Boolean\n}\n`;\nconst FacebookAdsCampaignAudienceEstimateTargetingSpecCountries = `\ninput FacebookAdsCampaignAudienceEstimateTargetingSpecCountries {\n    countries: [String]\n}\n`;\nconst FacebookAdsCampaignAudienceEstimateTargetingSpec = `\ninput FacebookAdsCampaignAudienceEstimateTargetingSpec {\n    geo_locations: FacebookAdsCampaignAudienceEstimateTargetingSpecCountries,\n    age_min: Int,\n    age_max: Int\n}\n`;\nconst FacebookAdsCampaignsAudienceEstimate = `\ninput FacebookAdsCampaignsAudienceEstimate {\n    currency: String,\n    optimize_for: String,\n    targeting_spec: FacebookAdsCampaignAudienceEstimateTargetingSpec\n}\n`;\nconst FacebookDeliveryEstimateBind_Est = `\ntype FacebookDeliveryEstimateBind_Est {\n    min_bid: Int,\n    median_bid: Int,\n    max_bid: Int,\n}\n`;\nconst FacebookDeliveryEstimateDaily_out = `\ntype FacebookDeliveryEstimateDaily_out {\n    spend: Int,\n    reach: Int,\n    impressions: Int,\n    actions: Int\n}\n`;\nconst FacebookDeliveryEstimate = `\ntype FacebookDeliveryEstimate {\n    bid_estimate: FacebookDeliveryEstimateBind_Est,\n    daily_outcomes_curve: [FacebookDeliveryEstimateDaily_out],\n    estimate_dau: Int,\n    estimate_mau: Int,\n    estimate_ready: Boolean\n}\n`;\nconst FacebookAdsCampaignsDeliveryEstimateGeolocations = `\ninput FacebookAdsCampaignsDeliveryEstimateGeolocations {\n    country_groups: [String]\n}\n`;\nconst FacebookAdsCampaignsDeliveryEstimateTargeting_Spec = `\ninput FacebookAdsCampaignsDeliveryEstimateTargeting_Spec {\n    geo_locations: FacebookAdsCampaignsDeliveryEstimateGeolocations,\n    user_device: [String],\n    user_os: [String]\n}\n`;\nconst FacebookAdsCampaignsDeliveryEstimate = `\ninput FacebookAdsCampaignsDeliveryEstimate {\n    targeting_spec: FacebookAdsCampaignsDeliveryEstimateTargeting_Spec,\n    optimization_goal: String\n}\n`;\nmodule.exportDefault([FacebookAccount, FacebookAccountMoney, FacebookAccountBusiness, FacebookAccountEndAdvertiser, FacebookCampaign, FacebookCampaignStatus, FacebookAdSet, FacebookAdSetTarget, FacebookAdSetTargetGeoLocations, FacebookAdSetPromotedObject, FacebookAdSetStatus, FacebookAdSetRecommendation, FacebookAdSetMoney, FacebookAdSetMoneyBudget, FacebookAd, FacebookAdCreative, FacebookAdCreativeObject, FacebookAdStatus, FacebookAudience, FacebookAdsCampaignsAudienceEstimate, FacebookAdsCampaignAudienceEstimateTargetingSpec, FacebookAdsCampaignAudienceEstimateTargetingSpecCountries, FacebookAdsCampaignsDeliveryEstimateGeolocations, FacebookAdsCampaignsDeliveryEstimateTargeting_Spec, FacebookAdsCampaignsDeliveryEstimate, FacebookDeliveryEstimateBind_Est, FacebookDeliveryEstimateDaily_out, FacebookDeliveryEstimate]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/facebook-ads/resolvers/bundle.jsx                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet facebook;\nmodule.watch(require(\"./facebook\"), {\n  default(v) {\n    facebook = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(facebook));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"facebook.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/facebook-ads/resolvers/facebook.jsx                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    facebookAdAccounts(root, args, context) {\n      let accounts = Meteor.call(\"fb-marketing-adAccounts-list\", args.socialAccountID, args.campaignID);\n      return accounts.map(a => {\n        let res = {\n          _id: a.account_id,\n          name: a.name,\n          money: {\n            spent: a.account_id,\n            balance: a.balance,\n            currency: a.currency\n          },\n          endAdvertiser: {\n            _id: a.end_advertiser,\n            name: a.end_advertiser_name\n          },\n          created: a.created_time,\n          business: {}\n        };\n\n        if (a.business && a.business.id) {\n          res.business = {\n            _id: a.business.id,\n            name: a.business.name\n          };\n        }\n\n        return res;\n      });\n    },\n\n    facebookAdsCampaign(root, args, context) {\n      let c = Meteor.call(\"fb-marketing-campaigns-read\", args.socialAccountID, args.campaignID);\n      let res = {\n        _id: c.id,\n        ibolAccount: args.socialAccountID,\n        name: c.name,\n        account: c.account_id,\n        buyingType: c.buying_type,\n        objective: c.objective,\n        status: {\n          configured: c.configured_status,\n          effective: c.effective_status,\n          status: c.status\n        },\n        created: new Date(c.created_time),\n        updated: new Date(c.updated_time),\n        spendCap: c.spend_cap,\n        startDate: new Date(c.start_time),\n        endDate: new Date(c.stop_time),\n        adsets: []\n      };\n\n      if (c.adsets) {\n        res.adSets = c.adsets.data.map(a => ({\n          _id: a.id,\n          ibolAccount: args.socialAccountID\n        }));\n      }\n\n      return res;\n    },\n\n    facebookAdsCampaigns(root, args, context) {\n      console.log(\"facebookAdsCampaigns\", args.socialAccountID, args.adAccountID);\n      let campaigns = Meteor.call(\"fb-marketing-campaigns-list\", args.socialAccountID, args.adAccountID);\n      return campaigns.map(c => {\n        let res = {\n          _id: c.id,\n          ibolAccount: args.socialAccountID,\n          name: c.name,\n          account: c.account_id,\n          buyingType: c.buying_type,\n          objective: c.objective,\n          status: {\n            configured: c.configured_status,\n            effective: c.effective_status,\n            status: c.status\n          },\n          created: new Date(c.created_time),\n          updated: new Date(c.updated_time),\n          spendCap: c.spend_cap,\n          startDate: new Date(c.start_time),\n          endDate: new Date(c.stop_time),\n          adSets: []\n        };\n\n        if (c.adsets && c.adsets.data) {\n          res.adSets = c.adsets.data.map(a => ({\n            _id: a.id,\n            ibolAccount: args.socialAccountID\n          }));\n        }\n\n        return res;\n      });\n    },\n\n    facebookAdsCampaignsAdSets(root, args, context) {\n      let adSets = Meteor.call(\"fb-marketing-adsets-from-campaign\", args.socialAccountID, args.campaignID);\n      console.log('facebookAdsCampaignsAdSets', adSets);\n      return adSets.map(a => {\n        let res = {\n          _id: a.id,\n          ibolAccount: args.socialAccountID,\n          name: a.name,\n          account: a.account_id,\n          campaign: a.campaign._id,\n          created: new Date(a.created_time),\n          updated: new Date(a.updated_time),\n          billingEvent: a.billing_event,\n          goal: a.optimization_goal,\n          startDate: new Date(a.start_time),\n          endDate: new Date(a.end_time),\n          money: {\n            autoBid: a.is_autobid,\n            avgPrizePaceing: a.is_average_price_pacing,\n            budget: {\n              daily: a.daily_budget,\n              lifetime: a.lifetime_budget,\n              remaining: a.budget_remaining\n            }\n          },\n          recommendations: [],\n          impressions: a.lifetime_imps,\n          status: {\n            configured: a.configured_status,\n            effective: a.effective_status,\n            status: a.status\n          },\n          promotedObject: {\n            type: \"Page\",\n            data: a.promoted_object ? a.promoted_object.page_id : null\n          },\n          targeting: {\n            user_os: a.targeting.user_os,\n            user_device: a.targeting.user_device,\n            facebook_positions: a.targeting.facebook_positions,\n            age_max: a.targeting.age_max,\n            age_min: a.targeting.age_min,\n            geo_locations: {\n              countries: a.targeting.geo_locations.countries,\n              locationTypes: a.targeting.geo_locations.location_types,\n              publisher_platforms: a.targeting.platforms\n            }\n          }\n        };\n\n        if (a.recommendations) {\n          res.recommendations = a.recommendations.map(r => ({\n            field: r.blame_field,\n            code: r.code,\n            confidence: r.confidence,\n            importance: r.importance,\n            message: r.message,\n            title: r.title\n          }));\n        }\n\n        return res;\n      });\n    },\n\n    facebookAdsCampaignsAdSetAds(root, args, context) {\n      let ads = Meteor.call(\"fb-marketing-ads-from-adset\", args.socialAccountID, args.adSetID);\n      return ads.data.map(a => ({\n        _id: a.id,\n        name: a.name,\n        status: {\n          configured: a.configured_status,\n          effective: a.effective_status,\n          status: a.status\n        },\n        adSet: a.adset_id,\n        creative: []\n      }));\n    },\n\n    facebookAdsCampaignsAdSetAd(root, args, context) {\n      let res = Meteor.call(\"fb-marketing-ads-read\", args.socialAccountID, args.adID);\n      let reviewFeedback = null;\n\n      if (res.ad_review_feedback) {\n        let messages = [];\n        Object.keys(res.ad_review_feedback.global).forEach(key => {\n          messages.push(res.ad_review_feedback.global[key]);\n        });\n        reviewFeedback = messages.join(\", \");\n      }\n\n      return {\n        _id: res.id,\n        ibolAccount: args.socialAccountID,\n        name: res.name,\n        status: {\n          configured: res.configured_status,\n          effective: res.effective_status,\n          status: res.status\n        },\n        adSet: res.adset.id,\n        campaign: res.campaign.id,\n        created: res.created_time,\n        updated: res.updated_time,\n        creative: res.adcreatives.data.map(creative => creative.id),\n        reviewFeedback\n      };\n    },\n\n    facebookAdsCampaignsAudienceEstimate: (root, args, context) => {\n      let audience = Meteor.call(\"fb-marketing-campaigns-audience\", args.socialAccountID, args.adID, args.data);\n      console.log('facebookAdsCampaignsAudienceEstimate', audience);\n      return audience.data;\n    },\n    facebookAdsCampaignsDeliveryEstimate: (root, args, context) => {\n      let delivery_es = Meteor.call(\"fb-marketing-campaigns-delivery-estimate\", args.socialAccountID, args.adID, args.data);\n      console.log('facebookAdsCampaignsDeliveryEstimate', delivery_es);\n      return delivery_es.data[0];\n    }\n  },\n  FacebookCampaign: {\n    account: campaign => {\n      console.log(\"FACEBOOK_CAMPAIGN_ACCOUNT\", campaign.ibolAccount, campaign.account);\n      let a = Meteor.call(\"fb-marketing-adAccounts-read\", campaign.ibolAccount, campaign.account);\n      return {\n        _id: a.id,\n        status: a.account_status,\n        money: {\n          spent: a.amount_spent,\n          balance: a.balance,\n          currency: a.currency\n        },\n        endAdvertiser: {\n          _id: a.end_advertiser,\n          name: a.end_advertiser_name\n        },\n        business: {\n          _id: a.business.id,\n          name: a.business.name\n        },\n        created: new Date(a.created_time)\n      };\n    },\n    adSets: campaign => {\n      let adSets = Meteor.call(\"fb-marketing-adsets-from-campaign\", campaign.ibolAccount, campaign._id);\n      return adSets.map(a => ({\n        _id: a.id,\n        ibolAccount: campaign.ibolAccount,\n        name: a.name,\n        account: a.account_id,\n        campaign: a.campaign._id,\n        created: new Date(a.created_time),\n        updated: new Date(a.updated_time),\n        billingEvent: a.billing_event,\n        goal: a.optimization_goal,\n        startDate: new Date(a.start_time),\n        endDate: new Date(a.end_time),\n        money: {\n          autoBid: a.is_autobid,\n          avgPrizePaceing: a.is_average_price_pacing,\n          budget: {\n            daily: a.daily_budget,\n            lifetime: a.lifetime_budget,\n            remaining: a.budget_remaining\n          }\n        },\n        recommendations: a.recommendations.map(r => ({\n          field: r.blame_field,\n          code: r.code,\n          confidence: r.confidence,\n          importance: r.importance,\n          message: r.message,\n          title: r.title\n        })),\n        impressions: a.lifetime_imps,\n        status: {\n          configured: a.configured_status,\n          effective: a.effective_status,\n          status: a.status\n        },\n        promotedObject: {\n          type: \"Page\",\n          data: a.promoted_object.page_id\n        },\n        target: {\n          age: {\n            max: a.targeting.age_max,\n            min: a.targeting.age_min\n          },\n          geoLocations: {\n            countries: a.targeting.geo_locations.countries,\n            locationTypes: a.targeting.geo_locations.location_types\n          },\n          platforms: a.targeting.platforms\n        }\n      }));\n    }\n  },\n  FacebookAdSet: {\n    ads: adSet => {\n      let ads = Meteor.call(\"fb-marketing-ads-from-adset\", adSet.ibolAccount, adSet._id);\n      return ads.data.map(a => ({\n        _id: a.id,\n        name: a.name,\n        status: a.status,\n        adSet: a.adset_id,\n        creative: []\n      }));\n    }\n  },\n  FacebookAd: {\n    creative: ad => {\n      let creatives = Meteor.call(\"fb-marketing-adCreative-from-ad\", ad.ibolAccount, ad._id);\n      return creatives.data.map(a => ({\n        _id: a.id,\n        body: a.body,\n        image: a.image_url,\n        link: a.link_url,\n        ctaType: a.call_to_action_type,\n        title: a.title\n      }));\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/facebook-ads/bundle.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"invites\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/invites/definitions/bundle.jsx                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet invites;\nmodule.watch(require(\"./invites\"), {\n  default(v) {\n    invites = v;\n  }\n\n}, 0);\nmodule.exportDefault([...invites]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"invites.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/invites/definitions/invites.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Campaign;\nmodule.watch(require(\"../../campaign/definitions/campaign\"), {\n  default(v) {\n    Campaign = v;\n  }\n\n}, 0);\nconst InviteMessage = `\ntype InviteMessage {\n    message: String,\n    media: String,\n    date: String,\n    quantity: Int,\n    location: String\n}\n`;\nconst InviteNetworks = `\ntype InviteNetworks {\n    twitter: Boolean,\n    facebook: Boolean,\n    instagram: Boolean\n}\n`;\nconst Invite = `\ntype Invite {\n    _id: String,\n    createdAt:String,\n    updatedAt:String,\n    owner: User,\n    campaign: Campaign,\n    type: String,\n    status: String, \n    deadline: String,\n    influencers:[Account],\n    teamAttacks: [TeamAttack],\n    invitesAvailable:Int,\n    budget: String,\n    useHashtag: Boolean,\n    options:[InviteMessage],\n    networks: InviteNetworks\n}\n`;\nmodule.exportDefault([Invite, InviteMessage, InviteNetworks, ...Campaign]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/invites/resolvers/bundle.jsx                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet invites;\nmodule.watch(require(\"./invites\"), {\n  default(v) {\n    invites = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(invites));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"invites.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/invites/resolvers/invites.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    invitesCampaign(root, args, context) {\n      console.log(\"INVITES_CAMPAIGNS\", args);\n      let invites = Invites.find({\n        campaign: args.campaignID\n      }).fetch();\n      return invites;\n    }\n\n  },\n  Invite: {\n    campaign: invite => {\n      let user = Campaigns.findOne({\n        _id: invite.campaign\n      });\n      return user;\n    },\n    influencers: invite => {\n      let members = SocialAccounts.find({\n        _id: {\n          $in: invite.influencers\n        }\n      }, {\n        fields: {\n          connection: 0\n        }\n      }).fetch();\n      return members;\n    },\n    owner: invite => {\n      let user = Meteor.users.findOne({\n        _id: invite.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    teamAttacks: invite => {\n      return TeamAttack.find({\n        _id: {\n          $in: invite.teamAttacks\n        }\n      }).fetch();\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/invites/bundle.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/invites/schema.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  createdAt: new Date(),\n  updatedAt: new Date(),\n  owner: null,\n  campaign: null,\n  status: \"draft\",\n  influencers: [],\n  teamAttacks: [],\n  invitesAvailable: 0,\n  budget: null,\n  deadline: null,\n  useHashtag: true,\n  type: \"post\",\n  options: [],\n  networks: {\n    facebook: true,\n    twitter: true,\n    instagram: true\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"news\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/news/definitions/bundle.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet news;\nmodule.watch(require(\"./news\"), {\n  default(v) {\n    news = v;\n  }\n\n}, 0);\nmodule.exportDefault([...news]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"news.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/news/definitions/news.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst News = `\ntype News {\n    author: String,\n    title: String,\n    link: String,\n    image: String,\n    type: String\n}\n`;\nmodule.exportDefault([News]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/news/resolvers/bundle.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet news;\nmodule.watch(require(\"./news\"), {\n  default(v) {\n    news = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(news));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"news.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/news/resolvers/news.jsx                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    getNews(root, args, context) {\n      let path = \"http://viralizing.me\";\n      let tag = \"news\";\n\n      if (args.lang === \"es\") {\n        path = \"http://viralizing.me/es\";\n        tag = \"noticias\";\n      }\n\n      let blog = Meteor.call(\"rss-feed\", path + \"/feed/\") || [];\n      blog.map(n => Object.assign(n, {\n        type: \"blog\"\n      }));\n      let news = Meteor.call(\"rss-feed\", path + \"/feed/?tag=\" + tag) || [];\n      news.map(n => Object.assign(n, {\n        type: \"news\"\n      }));\n      console.log(\"QUERY_RESULTS\", [...blog, ...news]);\n      return [...blog, ...news];\n    }\n\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/news/bundle.jsx                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"payments\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/payments/definitions/bundle.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet payments;\nmodule.watch(require(\"./payments\"), {\n  default(v) {\n    payments = v;\n  }\n\n}, 0);\nmodule.exportDefault([...payments]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"payments.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/payments/definitions/payments.jsx                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst Payment = `\ntype Payment {\n    _id: String,\n    from: User,\n    to: Account,\n    campaign: Campaign,\n    amount: String,\n    date: String,\n    status: String,\n    type: String,\n    paymentMethod: PaymentMethod,\n    post: Post\n}\n`;\nconst PaymentMethod = `\ntype PaymentMethod {\n    brand: String,\n    last4: String\n}\n`;\nmodule.exportDefault([Payment, PaymentMethod]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/payments/resolvers/bundle.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet payments;\nmodule.watch(require(\"./payments\"), {\n  default(v) {\n    payments = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(payments));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"payments.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/payments/resolvers/payments.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet moment;\nmodule.watch(require(\"moment\"), {\n  default(v) {\n    moment = v;\n  }\n\n}, 1);\n\nfunction getMonthDateRange(year, month) {\n  console.log(\"GET_MONTH_DATE_RANGE_BEFORE\", year, month);\n  if (typeof year === \"string\") year = Number(year);\n  if (typeof month === \"string\") month = Number(month);\n  console.log(\"GET_MONTH_DATE_RANGE_After\", year, month); // month in moment is 0 based, so 9 is actually october, subtract 1 to compensate\n  // array is 'year', 'month', 'day', etc\n\n  let startDate = moment([year, month - 1]); // Clone the value before .endOf()\n\n  let endDate = moment(startDate).endOf('month'); // just for demonstration:\n\n  console.log(startDate.toDate());\n  console.log(endDate.toDate()); // make sure to call toDate() for plain JavaScript date type\n\n  return {\n    $gt: startDate.toDate(),\n    $lt: endDate.toDate()\n  };\n}\n\nmodule.exportDefault({\n  Query: {\n    paymentsOwn(root, args, context) {\n      let userID = context.userId;\n      let {\n        year,\n        month\n      } = args;\n      let usersQuery = {\n        $or: [{\n          owner: userID\n        }, {\n          manager: userID\n        }, {\n          shares: {\n            $in: [userID]\n          }\n        }],\n        delete: {\n          $ne: true\n        }\n      };\n      let userIDs = SocialAccounts.find(usersQuery, {\n        fields: {\n          _id: 1\n        }\n      }).fetch().map(u => u._id);\n      console.log(\"USER_IDS\", userIDs);\n      let query = {\n        $or: [{\n          from: userID\n        }, {\n          to: {\n            $in: userIDs\n          }\n        }]\n      };\n\n      if (year && month) {\n        query.date = getMonthDateRange(year, month);\n      }\n\n      console.log(\"PAYMENTS_OWN\", args);\n      console.log(\"PAYPEMTS_OWN_QUERY\", query);\n      let results = Payments.find(query).fetch().map(p => Object.assign({}, p, {\n        type: p.from === userID ? \"outgoing\" : \"incoming\"\n      }));\n      console.log(\"PAYMENTS_OWN\", results.length);\n      return results;\n    }\n\n  },\n  Payment: {\n    from: payment => {\n      return Meteor.users.findOne({\n        _id: payment.from\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n    },\n    to: payment => {\n      return SocialAccounts.findOne({\n        _id: payment.to\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n    },\n    campaign: payment => {\n      return Campaigns.findOne({\n        _id: payment.campaign\n      });\n    },\n    post: payment => {\n      return Posts.findOne({\n        _id: payment.post\n      }) || {};\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/payments/bundle.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/payments/schema.jsx                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  status: \"draft\",\n  //draft, scheduled, rejected, paid, completed\n  from: null,\n  to: null,\n  campaign: null,\n  amount: null,\n  date: new Date(),\n  paymentMethod: {\n    brand: null,\n    last4: null\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"posts\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/posts/definitions/bundle.jsx                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet posts;\nmodule.watch(require(\"./posts\"), {\n  default(v) {\n    posts = v;\n  }\n\n}, 0);\nmodule.exportDefault([...posts]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"posts.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/posts/definitions/posts.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst PostAccount = `\ntype PostAccount {\n    _id: String,\n    name: String,\n    lastName: String,\n    avatar: String,\n    network: String,\n    fullProfile: Account\n}\n`;\nconst PostData = `\ntype PostData {\n    message: String,\n    media: String,\n    location: String\n}\n`;\nconst Post = `\ntype Post {\n    _id: String,\n    status: String,\n    type: String,\n    date: String,\n    deadline: String,\n    campaign: String,\n    invite: String,\n    isPaid: Boolean,\n    useHashtag: Boolean\n    account: PostAccount,\n    owner: User,\n    data: PostData\n}\n`;\nmodule.exportDefault([Post, PostData, PostAccount]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/posts/resolvers/bundle.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet posts;\nmodule.watch(require(\"./posts\"), {\n  default(v) {\n    posts = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(posts));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"posts.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/posts/resolvers/posts.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    postsOwn(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      return Posts.find({\n        owner: userID\n      }).fetch();\n    },\n\n    postsInvite(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        campaign: args.campaignID,\n        invite: args.inviteID\n      };\n      let result = Posts.find(query).fetch();\n      console.log(\"POSTS_INVITE\", query, result.length);\n      return result;\n    }\n\n  },\n  Post: {\n    owner: post => {\n      let user = Meteor.users.findOne({\n        _id: post.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    }\n  },\n  PostAccount: {\n    fullProfile: account => {\n      let user = SocialAccounts.findOne({\n        _id: account._id\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/posts/bundle.jsx                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/posts/schema.jsx                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  status: \"draft\",\n  //draft, pending, sent, accepted, rejected, scheduled, published, completed, cancelled, suspended\n  type: \"post\",\n  //post, share, noPost, profile, cover\n  date: null,\n  campaign: null,\n  //Campaign ID\n  invite: null,\n  //Announcement ID\n  isPaid: true,\n  account: {\n    id: null,\n    name: null,\n    lastName: null,\n    avatar: null,\n    network: null\n  },\n  owner: \"\",\n  data: {\n    message: \"\",\n    media: null,\n    location: null\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"reports\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/reports/definitions/bundle.jsx                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet reports;\nmodule.watch(require(\"./reports\"), {\n  default(v) {\n    reports = v;\n  }\n\n}, 0);\nmodule.exportDefault([...reports]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reports.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/reports/definitions/reports.jsx                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst Report = `\ntype Report {\n    _id: String,\n    name: String,\n    owner: User\n    items: [ReportItem]\n}\n`;\nconst ReportItem = `\ntype ReportItem {\n    name: String,\n    Description: String,\n    type: String,\n    size: String,\n    source: ReportItemSource\n}\n`;\nconst ReportItemSource = `\ntype ReportItemSource {\n    type: String,\n    account: Account,\n    campaign: Campaign\n}\n`;\nmodule.exportDefault([Report, ReportItem, ReportItemSource]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/reports/resolvers/bundle.jsx                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet reports;\nmodule.watch(require(\"./reports\"), {\n  default(v) {\n    reports = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(reports));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reports.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/reports/resolvers/reports.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    reportsOwn(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        owner: userID\n      };\n      return Reports.find(query).fetch();\n    },\n\n    report(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        _id: args.reportId\n      };\n      return Reports.findOne(query);\n    }\n\n  },\n  Report: {\n    owner: account => {\n      let user = Meteor.users.findOne({\n        _id: account.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/reports/bundle.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/reports/schema.jsx                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  name: null,\n  owner: null,\n  items: []\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"search\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/search/definitions/bundle.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet search;\nmodule.watch(require(\"./search\"), {\n  default(v) {\n    search = v;\n  }\n\n}, 0);\nmodule.exportDefault([...search]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"search.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/search/definitions/search.jsx                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst SearchUser = `\ntype SearchUser {\n    name: String,\n    screenName: String,\n    avatar: String\n}\n`;\nconst SearchMedia = `\ntype SearchMedia {\n    type: String,\n    url: String,\n    preview: String\n}\n`;\nconst SearchItem = `\ntype SearchItem {\n    link:String,\n    title:String,\n    date: String,\n    description: String,\n    network:String,\n    media: SearchMedia,\n    user: SearchUser\n}\n`;\nconst TwitterTrendingPlace = `\ntype TwitterTrendingPlace {\n    country: String,\n    name: String,\n    countryCode: String,\n    type: String,\n    woeid: String,\n    parent: String\n}\n`;\nconst TwitterTrends = `\ntype TwitterTrends {\n    hashtag: String,\n    url: String,\n    promoted: String,\n    volume: String\n}\n`;\nmodule.exportDefault([SearchItem, SearchUser, SearchMedia, TwitterTrendingPlace, TwitterTrends]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/search/resolvers/bundle.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet search;\nmodule.watch(require(\"./search\"), {\n  default(v) {\n    search = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(search));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"search.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/search/resolvers/search.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    search(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let results = [];\n      console.log(\"SOCIAL_MEDIA_SEARCH\", args);\n\n      if (args.google) {\n        console.log(\"GOOGLE_SEARCH\");\n        let google = Meteor.call(\"google-search\", args.query);\n\n        if (google.error) {\n          console.log(\"ERROR\");\n          let newItem = {\n            link: \"https://viralizing.me\",\n            title: \"Unavailable\",\n            description: \"Google Search is not currently available.\",\n            date: null,\n            network: \"google\",\n            media: {\n              type: null,\n              url: null,\n              preview: null\n            },\n            user: {\n              name: null,\n              screenName: null,\n              avatar: null\n            }\n          };\n          results.push(newItem);\n        } else {\n          if (!google.items) {\n            console.log(\"GOOGLE_ERROR\", google);\n          } else {\n            google.items.forEach(item => {\n              let newItem = {\n                link: item.link,\n                title: item.title,\n                description: item.snippet,\n                date: null,\n                network: \"google\",\n                media: {\n                  type: null,\n                  url: null,\n                  preview: null\n                },\n                user: {\n                  name: null,\n                  screenName: null,\n                  avatar: null\n                }\n              };\n              results.push(newItem);\n            });\n          }\n        }\n      }\n\n      if (args.twitter) {\n        console.log(\"TWITTER_SEARCH\");\n        let twitter = Meteor.call(\"twitter-search\", args.query);\n        twitter.statuses.forEach(item => {\n          let newItem = {\n            link: null,\n            title: null,\n            description: item.text,\n            date: item.created_at,\n            network: \"twitter\",\n            media: {},\n            user: {\n              name: item.user.name,\n              screenName: item.user.screen_name,\n              avatar: item.user.profile_image_url_https\n            }\n          };\n\n          if (item.entities && item.entities.media && item.entities.media[0] && item.entities.media[0].media_url_https) {\n            let entityMedia = item.entities.media[0];\n            newItem.media = {\n              type: entityMedia.type,\n              url: entityMedia.media_url_https,\n              preview: null\n            };\n          }\n\n          if (item.extended_entities && item.extended_entities.media && item.extended_entities.media[0] && item.extended_entities.media[0].video_info) {\n            let video = item.extended_entities.media[0].video_info;\n            newItem.media = {\n              type: \"video\",\n              url: video.variants[0].url,\n              preview: item.entities.media[0].media_url_https\n            };\n          }\n\n          results.push(newItem);\n        });\n      }\n\n      return results;\n    },\n\n    woeidPlaces(root, args, context) {\n      return Meteor.call(\"twitter-trends-available\");\n    },\n\n    twitterTrends(root, args, context) {\n      if (!args.woeid) {\n        return [];\n      }\n\n      let res = Meteor.call(\"twitter-trends-place\", args.woeid);\n      return res[0].trends;\n    }\n\n  },\n  TwitterTrendingPlace: {\n    parent: function (place) {\n      return place.parentid;\n    },\n    type: function (place) {\n      return place.placeType.name;\n    }\n  },\n  TwitterTrends: {\n    hashtag: function (trend) {\n      return trend.name;\n    },\n    promoted: function (trend) {\n      return trend.promoted_content;\n    },\n    volume: function (trend) {\n      return trend.tweet_volume;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/search/bundle.jsx                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"team-attack\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/team-attack/definitions/bundle.jsx                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet teamAttack;\nmodule.watch(require(\"./team-attack\"), {\n  default(v) {\n    teamAttack = v;\n  }\n\n}, 0);\nmodule.exportDefault([...teamAttack]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"team-attack.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/team-attack/definitions/team-attack.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst TeamAttack = `\ntype TeamAttack {\n    _id: String,\n    name: String,\n    type: String,\n    owner: User,\n    action: String,\n    members: [Account]\n}\n`;\nmodule.exportDefault([TeamAttack]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/team-attack/resolvers/bundle.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet teamAttack;\nmodule.watch(require(\"./team-attack\"), {\n  default(v) {\n    teamAttack = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(teamAttack));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"team-attack.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/team-attack/resolvers/team-attack.jsx                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    teamAttacksOwn(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        owner: userID\n      };\n      return TeamAttack.find(query).fetch();\n    },\n\n    teamAttack(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      let query = {\n        _id: args._id\n      };\n      return TeamAttack.findOne(query);\n    },\n\n    accountsTeamAttack(root, args, context) {\n      const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n      console.log(\"ACCOUNTS_TEAM_ATTACK\", args);\n      let {\n        action_type,\n        results_order,\n        influencer_gender,\n        influencer_age,\n        influencer_country,\n        influencer_followers,\n        audience_gender,\n        audience_age,\n        audience_nrssg,\n        audience_country,\n        influencer_networks\n      } = args;\n\n      let getBounds = function (bounds, validator) {\n        let $gt = bounds.min;\n        let $lt = bounds.max;\n\n        if (validator) {\n          $gt = validator(bounds.min);\n          $lt = validator(bounds.max);\n        }\n\n        return {\n          $gt,\n          $lt\n        };\n      };\n\n      let query = {\n        suspended: {\n          $ne: true\n        },\n        delete: {\n          $ne: true\n        },\n        network: {\n          $in: influencer_networks\n        }\n      };\n      let options = {};\n\n      if (results_order && action_type) {\n        options.sort = {};\n\n        switch (results_order) {\n          case \"higherPrice\":\n            options.sort[`pricing.${action_type}`] = -1;\n            break;\n\n          case \"lowestPrice\":\n            options.sort[`pricing.${action_type}`] = 1;\n            break;\n\n          case \"higherEngagement\":\n            options.sort[\"statistics.engagement\"] = -1;\n            break;\n\n          case \"lowerEngagement\":\n            options.sort[\"statistics.engagement\"] = 1;\n            break;\n        }\n      }\n\n      if (action_type) {\n        if (action_type === \"post\" || action_type === \"share\") {\n          query[`pricing.${action_type}`] = {\n            $exists: true,\n            $ne: \"\"\n          };\n        }\n      }\n\n      if (influencer_gender && influencer_gender !== \"all\") {\n        query[\"information.gender\"] = influencer_gender;\n      }\n\n      if (influencer_age && influencer_age !== \"all\") {\n        influencer_age = {\n          min: influencer_age.max,\n          max: influencer_age.min\n        };\n        query[\"information.birthDate\"] = getBounds(influencer_age, function (value) {\n          return moment().subtract(Number(value), \"years\").toDate();\n        });\n      }\n\n      console.log(\"ACCOUNTS_TEAM_ATTACK_QUERY\", query, options);\n      return SocialAccounts.find(query, options).fetch(); //TODO: ADD FILTER ONLY INFLUENCER ACCOUNTS\n\n      console.log(\"INFLUENCER_FOLLOWERS\", influencer_followers); //ARGS: { gender: 'all', age: 'all', country: 'all', followers: 'all' }\n\n      if (influencer_country && influencer_country !== \"all\") {\n        query[\"information.country\"] = {\n          $in: influencer_country\n        };\n      }\n\n      if (influencer_followers && influencer_followers !== \"all\") {\n        query[\"statistics.followers\"] = getBounds(influencer_followers, Number);\n      }\n\n      if (audience_gender && audience_gender !== \"all\") {\n        query[\"information.audience.gender\"] = audience_gender;\n      }\n\n      if (audience_nrssg && audience_nrssg !== \"all\") {\n        query[\"information.audience.nrssg\"] = audience_nrssg;\n      }\n\n      if (audience_country && audience_country !== \"all\") {\n        query[\"information.audience.country\"] = {\n          $in: audience_country\n        };\n      }\n\n      if (audience_age && audience_age !== \"all\") {\n        let queryValues = [];\n        let brackets = [\"18-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65\"];\n        brackets.forEach(bracket => {\n          let split = bracket.split(\"-\");\n          let minValue = Number(split[0]);\n          let maxValue = Number(split[1]);\n\n          if (minValue >= audience_age.min && maxValue <= audience_age.max) {\n            queryValues.push(bracket);\n          }\n        });\n        query[\"information.audience.age\"] = {\n          $in: queryValues\n        };\n      }\n\n      console.log(\"ACCOUNTS_TEAMATTACK\", query);\n      return SocialAccounts.find(query).fetch();\n    }\n\n  },\n  TeamAttack: {\n    owner: account => {\n      let user = Meteor.users.findOne({\n        _id: account.owner\n      }, {\n        fields: {\n          services: 0\n        }\n      });\n      return user;\n    },\n    members: team => {\n      if (!team.members || team.members.length === 0) {\n        return [];\n      }\n\n      let members = SocialAccounts.find({\n        _id: {\n          $in: team.members\n        }\n      }, {\n        fields: {\n          connection: 0\n        }\n      }).fetch();\n      return members;\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/team-attack/bundle.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/team-attack/schema.jsx                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  name: null,\n  owner: null,\n  members: []\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"users\":{\"definitions\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/users/definitions/bundle.jsx                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet User;\nmodule.watch(require(\"./users\"), {\n  default(v) {\n    User = v;\n  }\n\n}, 0);\nmodule.exportDefault([...User]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/users/definitions/users.jsx                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst StripeCoupon = `\ntype StripeCoupon {\n    id: String\n    amount_off: String\n    created: String\n    currency: String\n    duration: String\n    duration_in_months: Int\n    percent_off: Int\n    redeem_by: String\n    times_redeemed: Int\n    valid: Boolean\n}\n`;\nconst UserCoupon = `\ntype UserCoupon {\n    coupon: StripeCoupon\n    start: String,\n    end: String,\n    subscription: String\n}\n`;\nconst StripeCard = `\ntype StripeCard {\n    brand: String,\n    country: String,\n    id: String,\n    last4: String\n}\n`;\nconst StripeBankAccount = `\ntype StripeBankAccount {\n    name: String\n    type: String,\n    bank: String,\n    country: String,\n    currency: String,\n    id: String,\n    last4: String\n}\n`;\nconst StripeSubscriptionPlan = `\ntype StripeSubscriptionPlan {\n    created: String,\n    quantity: String,\n    amount: Int,\n    currency: String,\n    name: String,\n    interval: String,\n    intervalCount: Int\n}\n`;\nconst StripeSubscription = `\ntype StripeSubscription {\n    created: String,\n    periodEnd: String,\n    periodStart: String,\n    id: String,\n    quantity: String,\n    startDate: String,\n    trialStart: String,\n    trialEnd: String,\n    plans: [StripeSubscriptionPlan]\n}\n`;\nconst StripeCharge = `\ntype StripeCharge {\n    id: String,\n    amount: Int,\n    refunded: Boolean,\n    refundedAmount: Int,\n    captured: Boolean,\n    date: String,\n    currency: String,\n    description: String,\n    dispute: String,\n    failureCode: String,\n    failureMessage: String,\n    paid: Boolean,\n    status: String,\n    invoice: StripeInvoice\n}\n`;\nconst StripeInvoice = `\ntype StripeInvoice {\n  id: String,\n  amountDue: Int,\n  attempts: Int,\n  nextAttempt: String,\n  charge: StripeCharge,\n  closed: String,\n  currency: String,\n  date: String,\n  description: String,\n  discount: String,\n  startingBalance: String,\n  endingBalance: String,\n  forgive: String,\n  paid: String,\n  periodEnd: String,\n  periodStart: String,\n  subtotal: Int,\n  tax: String,\n  taxPercent: Int,\n  total: Int\n}\n`;\nconst StripeUser = `\ntype StripeUser {\n    id: String, \n    balance: Int,\n    created: String,\n    currency: String,\n    default_source: String,\n    delinquent: Boolean,\n    description: String,\n    discount: UserCoupon,\n    defaultCard: StripeCard\n    cards: [StripeCard],\n    banks: [StripeBankAccount],\n    subscriptions: [StripeSubscription],\n    invoices: [StripeInvoice],\n    charges: [StripeCharge]\n}\n`;\nconst ZendeskComment = `\ntype ZendeskComment {\n  id: String,\n  author: ZendeskUser,\n  body: String,\n  channel: String,\n  created: String\n}\n`;\nconst ZendeskUser = `\ntype ZendeskUser {\n  id: String,\n  email: String,\n  name: String,\n  role: String,\n  created: String,\n  updated: String,\n  tags: String\n}\n`;\nconst ZendeskTicket = `\ntype ZendeskTicket {\n  id:String,\n  assignee:ZendeskUser,\n  collaborators: [String],\n  created: String,\n  updated: String,\n  priority: String,\n  requester: ZendeskUser,\n  satisfaction: String,\n  status: String,\n  subject: String,\n  description: String,\n  tags: [String],\n  comments: [ZendeskComment]\n}\n`;\nconst UserSupport = `\ntype UserSupport {\n  id: String,\n  tickets: [ZendeskTicket]\n}\n`;\nconst UserEmail = `\ntype UserEmail {\n  address: String\n  verified: Boolean\n}\n`;\nconst UserProfile = `\ntype UserProfile {\n    name: String,\n    lastName: String,\n    avatar: String\n}\n`;\nconst MixpanelEventProperties = `\ntype MixpanelEventProperties {\n    browser: String,\n    url: String,\n    referrer: String\n}\n`;\nconst MixpanelEvent = `\ntype MixpanelEvent {\n    id: String,\n    name: String,\n    created: String,\n    properties: MixpanelEventProperties\n}\n`;\nconst User = `\ntype User {\n  emails: [UserEmail]\n  profile: UserProfile,\n  stripe: StripeUser,\n  support: UserSupport,\n  events: [MixpanelEvent]\n  _id: String\n}\n`;\nmodule.exportDefault([User, UserEmail, UserProfile, StripeUser, UserCoupon, StripeCoupon, StripeCard, StripeBankAccount, StripeSubscription, StripeSubscriptionPlan, StripeCharge, StripeInvoice, UserSupport, ZendeskTicket, ZendeskComment, ZendeskUser, MixpanelEvent, MixpanelEventProperties]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"resolvers\":{\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/users/resolvers/bundle.jsx                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet users;\nmodule.watch(require(\"./users\"), {\n  default(v) {\n    users = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nmodule.exportDefault(merge(users));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/users/resolvers/users.jsx                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet HTTP;\nmodule.watch(require(\"meteor/http\"), {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  Query: {\n    user(root, args, context) {\n      const userID = context.userId || \"dzibKvJgaFFLskBZW\";\n      return Meteor.users.findOne(userID);\n    }\n\n  },\n  User: {\n    stripe: user => {\n      let data = Meteor.call(\"stripe_customers_get\", user);\n      data.balance = data.account_balance;\n      return data;\n    },\n    support: user => {\n      return (0, _objectSpread2.default)({}, user);\n    },\n    events: user => {\n      let data = Meteor.call(\"mixpanel_events_user\", user);\n      return data.map(e => ({\n        id: e.distinct_id,\n        name: e.name,\n        created: new Date(e.time),\n        properties: {\n          browser: e.properties.$browser,\n          url: e.properties.$current_url,\n          referrer: e.properties.$initial_referrer\n        }\n      }));\n    }\n  },\n  StripeUser: {\n    created: user => {\n      return new Date(user.created * 1000);\n    },\n    defaultCard: user => {\n      return user.sources.data.filter(s => s.id === user.default_source)[0];\n    },\n    cards: user => {\n      return user.sources.data.filter(s => s.object === \"card\");\n    },\n    banks: user => {\n      return user.sources.data.filter(s => s.object === \"bank_account\").map(s => ({\n        name: s.account_holder_name,\n        type: s.account_holder_type,\n        bank: s.bank_name,\n        country: s.country,\n        currency: s.currency,\n        id: s.id,\n        last4: s.last4\n      }));\n    },\n    subscriptions: user => {\n      return user.subscriptions.data.map(s => ({\n        created: new Date(s.created * 1000),\n        periodEnd: new Date(s.current_period_end * 1000),\n        periodStart: new Date(s.current_period_start * 1000),\n        id: s.id,\n        quantity: s.quantity,\n        startDate: new Date(s.start * 1000),\n        trialStart: s.trial_end ? new Date(s.trial_end) : null,\n        trialEnd: s.trial_start ? new Date(s.trial_start) : null,\n        plans: s.items.data.map(i => ({\n          created: new Date(i.created * 1000),\n          quantity: i.quantity,\n          amount: i.plan.amount,\n          currency: i.plan.currency,\n          name: i.plan.name,\n          interval: i.plan.interval,\n          intervalCount: i.plan.interval_count\n        }))\n      }));\n    },\n    charges: user => {\n      let charges = Meteor.call(\"stripe_charges_list\", {\n        customer: user.id,\n        limit: 100\n      });\n      return charges.data.map(c => ({\n        id: c.id,\n        amount: c.amount,\n        refunded: c.refunded,\n        refundedAmount: c.amount_refunded,\n        captured: c.captured,\n        date: new Date(c.created * 1000),\n        currency: c.currency,\n        description: c.description,\n        dispute: c.dispute,\n        failureCode: c.failureCode,\n        failureMessage: c.failure_message,\n        paid: c.paid,\n        status: c.status,\n        invoice: c.invoice\n      }));\n    },\n    invoices: user => {\n      let invoices = Meteor.call(\"stripe_invoices_list\", {\n        customer: user.id,\n        limit: 100\n      });\n      return invoices.data.map(i => ({\n        id: i.id,\n        amountDue: i.amount_due,\n        attempts: i.attempt_count,\n        nextAttempt: new Date(i.next_payment_attempt * 1000),\n        charge: i.charge,\n        closed: i.closed,\n        currency: i.currency,\n        date: new Date(i.date * 1000),\n        description: i.description,\n        discount: i.discount,\n        startingBalance: i.starting_balance,\n        endingBalance: i.ending_balance,\n        forgive: i.forgiven,\n        paid: i.paid,\n        periodEnd: new Date(i.period_end * 1000),\n        periodStart: new Date(i.period_start * 1000),\n        subtotal: i.subtotal,\n        tax: i.tax,\n        taxPercent: i.tax_percent,\n        total: i.total\n      }));\n    }\n  },\n  UserCoupon: {\n    start: coupon => {\n      return new Date(coupon.start * 1000);\n    },\n    end: coupon => {\n      return new Date(coupon.end * 1000);\n    }\n  },\n  UserSupport: {\n    tickets: user => {\n      let tickets = Meteor.call(\"zendesk_tickets_get_by_user\", user);\n      return tickets.map(t => ({\n        id: t.id,\n        assignee: t.assignee_id,\n        collaborators: t.collaborator_ids,\n        created: new Date(t.created_at),\n        updated: new Date(t.updated_at),\n        priority: t.priority,\n        requester: t.requester_id,\n        satisfaction: t.satisfaction_rating,\n        status: t.status,\n        subject: t.subject,\n        description: t.description,\n        tags: t.tags,\n        comments: []\n      }));\n    }\n  },\n  ZendeskTicket: {\n    assignee: ticket => {\n      let user = Meteor.call(\"zendesk_user_get\", ticket.assignee);\n\n      if (!user) {\n        return null;\n      }\n\n      let u = user;\n      return {\n        id: u.id,\n        email: u.email,\n        name: u.name,\n        role: u.role,\n        created: new Date(u.created_at),\n        updated: new Date(u.updated_at),\n        tags: u.tags\n      };\n    },\n    requester: ticket => {\n      let user = Meteor.call(\"zendesk_user_get\", ticket.requester);\n\n      if (!user) {\n        return null;\n      }\n\n      let u = user;\n      return {\n        id: u.id,\n        email: u.email,\n        name: u.name,\n        role: u.role,\n        created: new Date(u.created_at),\n        updated: new Date(u.updated_at),\n        tags: u.tags\n      };\n    },\n    comments: ticket => {\n      let comments = Meteor.call(\"zendesk_tickets_get_comments\", ticket.id);\n      return comments.comments.map(c => ({\n        id: c.id,\n        author: c.author_id,\n        body: c.body,\n        channel: c.via.channel,\n        created: new Date(c.created_at)\n      }));\n    }\n  },\n  ZendeskComment: {\n    author: comment => {\n      let user = Meteor.call(\"zendesk_user_get\", comment.author);\n\n      if (!user) {\n        return null;\n      }\n\n      let u = user;\n      return {\n        id: u.id,\n        email: u.email,\n        name: u.name,\n        role: u.role,\n        created: new Date(u.created_at),\n        updated: new Date(u.updated_at),\n        tags: u.tags\n      };\n    }\n  },\n  StripeCharge: {\n    invoice: charge => {\n      if (!charge.invoice) {\n        return null;\n      }\n\n      let i = Meteor.call(\"stripe_invoices_get\", charge.invoice);\n      return {\n        id: i.id,\n        amountDue: i.amount_due,\n        attempts: i.attempt_count,\n        nextAttempt: new Date(i.next_payment_attempt * 1000),\n        charge: i.charge,\n        closed: i.closed,\n        currency: i.currency,\n        date: new Date(i.date * 1000),\n        description: i.description,\n        discount: i.discount,\n        startingBalance: i.starting_balance,\n        endingBalance: i.ending_balance,\n        forgive: i.forgiven,\n        paid: i.paid,\n        periodEnd: new Date(i.period_end * 1000),\n        periodStart: new Date(i.period_start * 1000),\n        subtotal: i.subtotal,\n        tax: i.tax,\n        taxPercent: i.tax_percent,\n        total: i.total\n      };\n    }\n  },\n  StripeInvoice: {\n    charge: invoice => {\n      if (!invoice.charge) {\n        return null;\n      }\n\n      let c = Meteor.call(\"stripe_charges_get\", invoice.charge);\n      return {\n        id: c.id,\n        amount: c.amount,\n        refunded: c.refunded,\n        refundedAmount: c.amount_refunded,\n        captured: c.captured,\n        date: new Date(c.created * 1000),\n        currency: c.currency,\n        description: c.description,\n        dispute: c.dispute,\n        failureCode: c.failureCode,\n        failureMessage: c.failure_message,\n        paid: c.paid,\n        status: c.status,\n        invoice: c.invoice\n      };\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/users/bundle.jsx                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet definitions;\nmodule.watch(require(\"./definitions/bundle\"), {\n  default(v) {\n    definitions = v;\n  }\n\n}, 0);\nlet resolvers;\nmodule.watch(require(\"./resolvers/bundle\"), {\n  default(v) {\n    resolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  definitions,\n  resolvers\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/bundle.jsx                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  typeDefs: () => typeDefs,\n  resolvers: () => resolvers\n});\nlet Users;\nmodule.watch(require(\"./users/bundle\"), {\n  default(v) {\n    Users = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.watch(require(\"./accounts/bundle\"), {\n  default(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet Posts;\nmodule.watch(require(\"./posts/bundle\"), {\n  default(v) {\n    Posts = v;\n  }\n\n}, 2);\nlet Campaign;\nmodule.watch(require(\"./campaign/bundle\"), {\n  default(v) {\n    Campaign = v;\n  }\n\n}, 3);\nlet Events;\nmodule.watch(require(\"./events/bundle\"), {\n  default(v) {\n    Events = v;\n  }\n\n}, 4);\nlet Invites;\nmodule.watch(require(\"./invites/bundle\"), {\n  default(v) {\n    Invites = v;\n  }\n\n}, 5);\nlet Advertising;\nmodule.watch(require(\"./advertising/bundle\"), {\n  default(v) {\n    Advertising = v;\n  }\n\n}, 6);\nlet Search;\nmodule.watch(require(\"./search/bundle\"), {\n  default(v) {\n    Search = v;\n  }\n\n}, 7);\nlet News;\nmodule.watch(require(\"./news/bundle\"), {\n  default(v) {\n    News = v;\n  }\n\n}, 8);\nlet TeamAttack;\nmodule.watch(require(\"./team-attack/bundle\"), {\n  default(v) {\n    TeamAttack = v;\n  }\n\n}, 9);\nlet AccountInvites;\nmodule.watch(require(\"./account-invites/bundle\"), {\n  default(v) {\n    AccountInvites = v;\n  }\n\n}, 10);\nlet CampaignInvites;\nmodule.watch(require(\"./campaign-invites/bundle\"), {\n  default(v) {\n    CampaignInvites = v;\n  }\n\n}, 11);\nlet Reports;\nmodule.watch(require(\"./reports/bundle\"), {\n  default(v) {\n    Reports = v;\n  }\n\n}, 12);\nlet FacebookAds;\nmodule.watch(require(\"./facebook-ads/bundle\"), {\n  default(v) {\n    FacebookAds = v;\n  }\n\n}, 13);\nlet Payments;\nmodule.watch(require(\"./payments/bundle\"), {\n  default(v) {\n    Payments = v;\n  }\n\n}, 14);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 15);\nlet typeDefs = [...Accounts.definitions, ...Posts.definitions, ...Campaign.definitions, ...Events.definitions, ...Invites.definitions, ...Advertising.definitions, ...Search.definitions, ...News.definitions, ...TeamAttack.definitions, ...AccountInvites.definitions, ...Reports.definitions, ...CampaignInvites.definitions, ...FacebookAds.definitions, ...Payments.definitions];\nlet resolvers = merge(Accounts.resolvers, Users.resolvers, Posts.resolvers, Campaign.resolvers, Events.resolvers, Invites.resolvers, Advertising.resolvers, Search.resolvers, News.resolvers, TeamAttack.resolvers, AccountInvites.resolvers, Reports.resolvers, CampaignInvites.resolvers, FacebookAds.resolvers, Payments.resolvers);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"query.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/query.jsx                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst Query = `\ntype Query {\n  user: User\n  getNews(lang: String!): [News]\n  account(_id: String): Account\n  accountsOwnSearch(query: String): [Account]\n  accountsByTag(tag: String): [Account]\n  accounts: [Account]\n  accountInvite(inviteID: String!): AccountInvite\n  accountInvites(accountID: String!): [AccountInvite]\n  accountFBPages(accountID: String!): [FBPage]\n  accountsTeamAttack(action_type: String,results_order: String, influencer_networks: [String], influencer_gender: String, influencer_age: RangeQuery, influencer_country: [String], influencer_languages: String, influencer_city: [String], influencer_likes: RangeQuery, influencer_followers: RangeQuery, influencer_views: RangeQuery, influencer_engagement: RangeQuery, influencer_followers: RangeQuery, audience_gender: String, audience_age: RangeQuery, audience_nrssg: String, audience_country: [String]): [Account]\n  postsOwn: [Post]\n  reportsOwn: [Report]\n  report(reportId: String!): Report\n  postsInvite(campaignID: String!, inviteID: String!): [Post]\n  campaign(_id: String!): Campaign\n  campaignsOwn: [Campaign]\n  campaignInvite(inviteID: String!): CampaignInvite\n  campaignInvites(campaignID: String!): [CampaignInvite]\n  teamAttacksOwn: [TeamAttack]\n  teamAttack(_id: String!): TeamAttack\n  paymentsOwn(year:String, month:String, accounts:[String]): [Payment]\n  woeidPlaces: [TwitterTrendingPlace]\n  twitterTrends(woeid: String!): [TwitterTrends]\n  eventsOwn(all: Boolean, created:Boolean, paused:Boolean, active:Boolean, drafts:Boolean, posts:Boolean): [Event]\n  eventsCampaign(campaignID: String, all: Boolean, draft: Boolean, pending: Boolean, sent: Boolean, accepted: Boolean,  rejected: Boolean, scheduled: Boolean, published: Boolean, completed: Boolean, cancelled: Boolean, suspended: Boolean): [Event]\n  eventsAccount(accountID: String, all: Boolean, draft: Boolean, pending: Boolean, sent: Boolean, accepted: Boolean,  rejected: Boolean, scheduled: Boolean, published: Boolean, completed: Boolean, cancelled: Boolean, suspended: Boolean): [Event]\n  invitesCampaign(campaignID: String): [Invite]\n  search(query:String, twitter: Boolean, instagram: Boolean, google: Boolean): [SearchItem]\n  facebookAdAccounts(socialAccountID: String): [FacebookAccount]\n  facebookAdsCampaigns(socialAccountID: String, adAccountID: String): [FacebookCampaign]\n  facebookAdsCampaign(socialAccountID: String, adAccountID: String, campaignID: String): FacebookCampaign\n  facebookAdsCampaignsAdSets(socialAccountID: String, adAccountID: String, campaignID: String): [FacebookAdSet]\n  facebookAdsCampaignsAdSetAds(socialAccountID: String, adAccountID: String, campaignID: String, adSetID: String): [FacebookAd]\n  facebookAdsCampaignsAdSetAd(socialAccountID: String, adAccountID: String, campaignID: String, adID: String): FacebookAd\n  facebookAdsCampaignsAudienceEstimate(socialAccountID: String, adID: String, data: FacebookAdsCampaignsAudienceEstimate): FacebookAudience\n  facebookAdsCampaignsDeliveryEstimate(socialAccountID: String, adID: String, data: FacebookAdsCampaignsDeliveryEstimate): FacebookDeliveryEstimate\n}\n`;\nmodule.exportDefault(Query);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/schemas/schema.jsx                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet typeDefs, resolvers;\nmodule.watch(require(\"./bundle\"), {\n  typeDefs(v) {\n    typeDefs = v;\n  },\n\n  resolvers(v) {\n    resolvers = v;\n  }\n\n}, 0);\nlet makeExecutableSchema;\nmodule.watch(require(\"graphql-tools\"), {\n  makeExecutableSchema(v) {\n    makeExecutableSchema = v;\n  }\n\n}, 1);\nlet Query;\nmodule.watch(require(\"./query\"), {\n  default(v) {\n    Query = v;\n  }\n\n}, 2);\nconst Schema = `\nschema {\n  query: Query\n}\n`;\nmodule.exportDefault(makeExecutableSchema({\n  typeDefs: [Query, Schema, ...typeDefs],\n  resolvers\n}));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bundle.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/server/bundle.jsx                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"constants\":{\"countries.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/constants/countries.jsx                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault([\"Bangladesh\", \"Belgium\", \"Burkina Faso\", \"Bulgaria\", \"Bosnia and Herz.\", \"Brunei\", \"Bolivia\", \"Japan\", \"Burundi\", \"Benin\", \"Bhutan\", \"Jamaica\", \"Botswana\", \"Brazil\", \"Bahamas\", \"Belarus\", \"Belize\", \"Russia\", \"Rwanda\", \"Serbia\", \"Timor-Leste\", \"Turkmenistan\", \"Tajikistan\", \"Romania\", \"Guinea-Bissau\", \"Guatemala\", \"Greece\", \"Eq. Guinea\", \"Guyana\", \"Georgia\", \"United Kingdom\", \"Gabon\", \"Guinea\", \"Gambia\", \"Greenland\", \"Ghana\", \"Oman\", \"Tunisia\", \"Jordan\", \"Croatia\", \"Haiti\", \"Hungary\", \"Honduras\", \"Puerto Rico\", \"Palestine\", \"Portugal\", \"Paraguay\", \"Panama\", \"Papua New Guinea\", \"Peru\", \"Pakistan\", \"Philippines\", \"Poland\", \"Zambia\", \"W. Sahara\", \"Estonia\", \"Egypt\", \"South Africa\", \"Ecuador\", \"Italy\", \"Vietnam\", \"Solomon Is.\", \"Ethiopia\", \"Somalia\", \"Zimbabwe\", \"Spain\", \"Eritrea\", \"Montenegro\", \"Moldova\", \"Madagascar\", \"Morocco\", \"Uzbekistan\", \"Myanmar\", \"Mali\", \"Mongolia\", \"Macedonia\", \"Malawi\", \"Mauritania\", \"Uganda\", \"Malaysia\", \"Mexico\", \"Israel\", \"France\", \"Somaliland\", \"Finland\", \"Fiji\", \"Falkland Is.\", \"Nicaragua\", \"Netherlands\", \"Norway\", \"Namibia\", \"Vanuatu\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"New Zealand\", \"Nepal\", \"Kosovo\", \"Côte d'Ivoire\", \"Switzerland\", \"Colombia\", \"China\", \"Cameroon\", \"Chile\", \"N. Cyprus\", \"Canada\", \"Congo\", \"Central African Rep.\", \"Dem. Rep. Congo\", \"Czech Rep.\", \"Cyprus\", \"Costa Rica\", \"Cuba\", \"Swaziland\", \"Syria\", \"Kyrgyzstan\", \"Kenya\", \"S. Sudan\", \"Suriname\", \"Cambodia\", \"El Salvador\", \"Slovakia\", \"Korea\", \"Slovenia\", \"Dem. Rep. Korea\", \"Kuwait\", \"Senegal\", \"Sierra Leone\", \"Kazakhstan\", \"Saudi Arabia\", \"Sweden\", \"Sudan\", \"Dominican Rep.\", \"Djibouti\", \"Denmark\", \"Germany\", \"Yemen\", \"Algeria\", \"United States\", \"Uruguay\", \"Lebanon\", \"Lao PDR\", \"Taiwan\", \"Trinidad and Tobago\", \"Turkey\", \"Sri Lanka\", \"Latvia\", \"Lithuania\", \"Luxembourg\", \"Liberia\", \"Lesotho\", \"Thailand\", \"Fr. S. Antarctic Lands\", \"Togo\", \"Chad\", \"Libya\", \"United Arab Emirates\", \"Venezuela\", \"Afghanistan\", \"Iraq\", \"Iceland\", \"Iran\", \"Armenia\", \"Albania\", \"Angola\", \"Argentina\", \"Australia\", \"Austria\", \"India\", \"Tanzania\", \"Azerbaijan\", \"Ireland\", \"Indonesia\", \"Ukraine\", \"Qatar\", \"Mozambique\"]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"settings.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/settings.jsx                                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault({\n  name: \"IBOL\",\n  logo: \"https://s3.amazonaws.com/ibol-app-media/logo.png\",\n  altLogo: \"https://s3.amazonaws.com/ibol-app-media/logo-alt.png\",\n  social: {\n    facebook: \"\",\n    twitter: \"\"\n  },\n  email: {\n    noReply: \"no-reply@viralizing.me\"\n  },\n  support: {\n    email: \"support@viralizing.me\"\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"accountInvites.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/accountInvites.jsx                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nSocialAccountsInvites = new Meteor.Collection(\"accountsInvites\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/accounts.jsx                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nSocialAccounts = new Meteor.Collection(\"accounts\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"advertising.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/advertising.jsx                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAdvertising = new Meteor.Collection(\"advertising\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"campaignInvites.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/campaignInvites.jsx                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCampaignInvites = new Meteor.Collection(\"campaignInvites\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"campaigns.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/campaigns.jsx                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCampaigns = new Meteor.Collection(\"campaigns\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"invites.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/invites.jsx                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nInvites = new Meteor.Collection(\"invites\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"payments.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/payments.jsx                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nPayments = new Meteor.Collection(\"payments\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"posts.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/posts.jsx                                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nPosts = new Meteor.Collection(\"posts\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reports.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/reports.jsx                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nReports = new Meteor.Collection(\"reports\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"team-attack.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collections/team-attack.jsx                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTeamAttack = new Meteor.Collection(\"teamAttack\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"notifications\":{\"notifications.jsx\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// notifications/notifications.jsx                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nHerald.addCourier('appNotifications', {\n  media: {\n    onsite: {\n      onRun: function () {\n        console.log(\"NOTIFICATION_RUN\");\n        return this.run();\n      } //Send notifications to client, with no custom configuration\n\n    }\n  },\n  //will be a function on the collection instance, returned from find()\n  message: function () {\n    return 'There is a new post: \"' + this.data.post.name + '\"';\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"graphql.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/graphql.jsx                                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet createApolloServer;\nmodule.watch(require(\"meteor/apollo\"), {\n  createApolloServer(v) {\n    createApolloServer = v;\n  }\n\n}, 0);\nlet merge;\nmodule.watch(require(\"lodash\"), {\n  merge(v) {\n    merge = v;\n  }\n\n}, 1);\nlet schema;\nmodule.watch(require(\"../imports/server/schemas/schema\"), {\n  default(v) {\n    schema = v;\n  }\n\n}, 2);\ncreateApolloServer({\n  schema\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/main.js                                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"../imports/server/bundle.jsx\"));\nmodule.watch(require(\"../imports/modules/bundles/server.jsx\"));\n//23xcuCrdu2RP9EgvUccf9vBL9\n//aHR0cHM6Ly90d2l0dGVyLmNvbS9yZWdpbmFiaXRh\n//aHR0cHM6Ly90d2l0dGVyLmNvbS9jYW1pY29ydG14P2xhbmc9ZW4\n//aHR0cHM6Ly9zY29udGVudC5mbWV4Ny0xLmZuYS5mYmNkbi5uZXQvdi90MS4wLTkvMTc5OTIyNDBfMjI4NDU0MDY2ODQzNzIxMV81NjE2MDE5NTc4NjIwOTMwMjg4X24uanBnP29oPTVjZDY2MjYyMDA2MjkwMzY0MDhkZDFiZWZjNzk5YjQxJm9lPTU5OUM2NTYy\nMeteor.startup(function () {\n  SyncedCron.start();\n\n  Meteor.users._ensureIndex({\n    \"services.facebook.id\": 1,\n    \"services.instagram.id\": 1,\n    \"services.google.id\": 1,\n    \"services.twitter.id\": 1\n  }, {\n    name: \"usersIndex\"\n  }); //Teams._ensureIndex({ userId: 1 });\n  //Collection.rawCollection.createIndex({ userId: 1 });\n\n\n  SocialAccounts._ensureIndex({\n    \"_id\": 1,\n    \"network\": 1,\n    \"manager\": 1,\n    \"owner\": 1,\n    \"shares\": 1,\n    \"connection.id\": 1,\n    \"information.gender\": 1,\n    \"information.birthDate\": 1,\n    \"information.country\": 1,\n    \"audience.age\": 1,\n    \"audience.gender\": 1,\n    \"audience.nrssg\": 1,\n    \"audience.countries\": 1,\n    \"audience.cities\": 1,\n    \"audience.languages\": 1,\n    \"statistics.followers\": 1,\n    \"pricing.post\": 1,\n    \"pricing.photos.profile\": 1,\n    \"pricing.photos.cover\": 1,\n    \"pricing.noPost.hour\": 1,\n    \"pricing.noPost.day\": 1,\n    \"pricing.share\": 1\n  }, {\n    name: \"accountsIndex\"\n  });\n\n  Campaigns._ensureIndex({\n    \"_id\": 1,\n    \"owner\": 1,\n    \"manager\": 1,\n    \"status\": 1,\n    \"information.dateStart\": 1,\n    \"information.dateEnd\": 1\n  }, {\n    name: \"campaignsIndex\"\n  });\n\n  TeamAttack._ensureIndex({\n    \"_id\": 1,\n    \"owner\": 1,\n    \"members\": 1\n  }, {\n    name: \"teamAttackIndex\"\n  });\n\n  Posts._ensureIndex({\n    \"_id\": 1,\n    \"status\": 1,\n    \"type\": 1,\n    \"date\": 1,\n    \"campaign\": 1,\n    \"announcement\": 1,\n    \"isPaid\": 1,\n    \"account\": 1,\n    \"owner\": 1\n  }, {\n    name: \"postsIndex\"\n  });\n\n  let services = Meteor.settings.private.networks;\n\n  let configure = function () {\n    if (services) {\n      for (let service in services) {\n        ServiceConfiguration.configurations.upsert({\n          service: service\n        }, {\n          $set: Object.assign({}, services[service], {\n            \"loginStyle\": \"popup\"\n          })\n        });\n      }\n    }\n  };\n\n  configure();\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\nrequire(\"/collections/accountInvites.jsx\");\nrequire(\"/collections/accounts.jsx\");\nrequire(\"/collections/advertising.jsx\");\nrequire(\"/collections/campaignInvites.jsx\");\nrequire(\"/collections/campaigns.jsx\");\nrequire(\"/collections/invites.jsx\");\nrequire(\"/collections/payments.jsx\");\nrequire(\"/collections/posts.jsx\");\nrequire(\"/collections/reports.jsx\");\nrequire(\"/collections/team-attack.jsx\");\nrequire(\"/notifications/notifications.jsx\");\nrequire(\"/server/graphql.jsx\");\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/modules/campaigns/server/cron-jobs/actions/invites-scheduled.jsx","imports/modules/campaigns/server/cron-jobs/actions/posts-scheduled.jsx","imports/modules/campaigns/server/cron-jobs/invites.jsx","imports/modules/campaigns/server/cron-jobs/posts.jsx","imports/modules/campaigns/server/bundle.jsx","imports/modules/campaigns/server/image-upload.jsx","imports/modules/campaigns/server/methods.jsx","imports/modules/facebook/server/marketing/ad/bundle.jsx","imports/modules/facebook/server/marketing/ad/create.jsx","imports/modules/facebook/server/marketing/ad/delete.jsx","imports/modules/facebook/server/marketing/ad/from-adset.jsx","imports/modules/facebook/server/marketing/ad/list.jsx","imports/modules/facebook/server/marketing/ad/read.jsx","imports/modules/facebook/server/marketing/ad-accounts/bundle.jsx","imports/modules/facebook/server/marketing/ad-accounts/list.jsx","imports/modules/facebook/server/marketing/ad-accounts/read.jsx","imports/modules/facebook/server/marketing/ad-creative/bundle.jsx","imports/modules/facebook/server/marketing/ad-creative/create.jsx","imports/modules/facebook/server/marketing/ad-creative/delete.jsx","imports/modules/facebook/server/marketing/ad-creative/from-ad.jsx","imports/modules/facebook/server/marketing/ad-creative/list.jsx","imports/modules/facebook/server/marketing/ad-creative/read.jsx","imports/modules/facebook/server/marketing/ad-sets/bundle.jsx","imports/modules/facebook/server/marketing/ad-sets/create.jsx","imports/modules/facebook/server/marketing/ad-sets/delete.jsx","imports/modules/facebook/server/marketing/ad-sets/from-campaign.jsx","imports/modules/facebook/server/marketing/ad-sets/list.jsx","imports/modules/facebook/server/marketing/ad-sets/read.jsx","imports/modules/facebook/server/marketing/campaign/audience_size.jsx","imports/modules/facebook/server/marketing/campaign/bundle.jsx","imports/modules/facebook/server/marketing/campaign/create.jsx","imports/modules/facebook/server/marketing/campaign/delete.jsx","imports/modules/facebook/server/marketing/campaign/delivery_estimate.jsx","imports/modules/facebook/server/marketing/campaign/list.jsx","imports/modules/facebook/server/marketing/campaign/read.jsx","imports/modules/facebook/server/marketing/campaign/targeting-fields.jsx","imports/modules/facebook/server/marketing/images/bundle.jsx","imports/modules/facebook/server/marketing/images/create.jsx","imports/modules/facebook/server/marketing/bundle.jsx","imports/modules/facebook/server/account-stats.jsx","imports/modules/facebook/server/bundle.jsx","imports/modules/facebook/server/connection.jsx","imports/modules/facebook/server/cover-profile-photo.jsx","imports/modules/facebook/server/pages-list.jsx","imports/modules/facebook/server/post-create.jsx","imports/modules/facebook/server/share-post.jsx","imports/modules/google/server/adwords/ad-groups/bundle.jsx","imports/modules/google/server/adwords/ad-groups/create.jsx","imports/modules/google/server/adwords/ad-groups/delete.jsx","imports/modules/google/server/adwords/ad-groups/list.jsx","imports/modules/google/server/adwords/ad-groups/read.jsx","imports/modules/google/server/adwords/campaign/bundle.jsx","imports/modules/google/server/adwords/campaign/create.jsx","imports/modules/google/server/adwords/campaign/delete.jsx","imports/modules/google/server/adwords/campaign/list.jsx","imports/modules/google/server/adwords/campaign/read.jsx","imports/modules/google/server/adwords/bundle.jsx","imports/modules/google/server/adwords/connection.jsx","imports/modules/google/server/bundle.jsx","imports/modules/google/server/connection.jsx","imports/modules/google/server/search.jsx","imports/modules/twitter/server/ads/accounts/bundle.jsx","imports/modules/twitter/server/ads/accounts/list.jsx","imports/modules/twitter/server/ads/campaign/bundle.jsx","imports/modules/twitter/server/ads/campaign/create.jsx","imports/modules/twitter/server/ads/campaign/delete.jsx","imports/modules/twitter/server/ads/campaign/list.jsx","imports/modules/twitter/server/ads/campaign/read.jsx","imports/modules/twitter/server/ads/line-item/bundle.jsx","imports/modules/twitter/server/ads/bundle.jsx","imports/modules/twitter/server/ads/connection.jsx","imports/modules/twitter/server/account-stats.jsx","imports/modules/twitter/server/bundle.jsx","imports/modules/twitter/server/connection.jsx","imports/modules/twitter/server/cover-profile-photo.jsx","imports/modules/twitter/server/interactions.jsx","imports/modules/twitter/server/post-create.jsx","imports/modules/twitter/server/search.jsx","imports/modules/twitter/server/trending.jsx","imports/modules/core/server/users/bundle.jsx","imports/modules/core/server/users/methods.jsx","imports/modules/core/server/users/native-auth.jsx","imports/modules/core/server/users/on-creation.jsx","imports/modules/core/server/users/onLogin.jsx","imports/modules/core/server/users/schema.jsx","imports/modules/core/server/bundle.jsx","imports/modules/core/server/notifications.jsx","imports/modules/core/server/rss-feed.jsx","imports/modules/stripe/server/core/bundle.jsx","imports/modules/stripe/server/core/charges.jsx","imports/modules/stripe/server/core/customers.jsx","imports/modules/stripe/server/core/refunds.jsx","imports/modules/stripe/server/core/transfers.jsx","imports/modules/stripe/server/payment-methods/bank-accounts.jsx","imports/modules/stripe/server/payment-methods/bundle.jsx","imports/modules/stripe/server/payment-methods/cards.jsx","imports/modules/stripe/server/subscriptions/bundle.jsx","imports/modules/stripe/server/subscriptions/coupons.jsx","imports/modules/stripe/server/subscriptions/discounts.jsx","imports/modules/stripe/server/subscriptions/invoice-items.jsx","imports/modules/stripe/server/subscriptions/invoices.jsx","imports/modules/stripe/server/subscriptions/plans.jsx","imports/modules/stripe/server/subscriptions/subscription-items.jsx","imports/modules/stripe/server/subscriptions/subscriptions.jsx","imports/modules/stripe/server/bundle.jsx","imports/modules/stripe/server/connection.jsx","imports/modules/accounts/server/bundle.jsx","imports/modules/accounts/server/fake-accounts.jsx","imports/modules/accounts/server/image-upload.jsx","imports/modules/accounts/server/invites.jsx","imports/modules/accounts/server/methods.jsx","imports/modules/accounts/server/social-connect.jsx","imports/modules/advertising/server/bundle.jsx","imports/modules/advertising/server/file-upload.jsx","imports/modules/advertising/server/methods.jsx","imports/modules/agenda/server/bundle.jsx","imports/modules/agenda/server/image-upload.jsx","imports/modules/agenda/server/methods.jsx","imports/modules/google-plus/server/bundle.jsx","imports/modules/google-plus/server/connection.jsx","imports/modules/google-plus/server/post-create.jsx","imports/modules/instagram/server/account-stats.jsx","imports/modules/instagram/server/bundle.jsx","imports/modules/instagram/server/connection.jsx","imports/modules/instagram/server/post-create.jsx","imports/modules/instagram/server/search.jsx","imports/modules/paypal/server/bundle.jsx","imports/modules/paypal/server/connection.jsx","imports/modules/paypal/server/payouts.jsx","imports/modules/reporter/server/bundle.jsx","imports/modules/reporter/server/methods.jsx","imports/modules/statement/server/bundle.jsx","imports/modules/statement/server/methods.jsx","imports/modules/statement/server/upload.jsx","imports/modules/teamattack/server/bundle.jsx","imports/modules/teamattack/server/methods.jsx","imports/modules/bundles/server.jsx","imports/server/schemas/account-invites/definitions/account-invites.jsx","imports/server/schemas/account-invites/definitions/bundle.jsx","imports/server/schemas/account-invites/resolvers/account-invites.jsx","imports/server/schemas/account-invites/resolvers/bundle.jsx","imports/server/schemas/account-invites/bundle.jsx","imports/server/schemas/account-invites/schema.jsx","imports/server/schemas/accounts/definitions/account.jsx","imports/server/schemas/accounts/definitions/bundle.jsx","imports/server/schemas/accounts/definitions/facebook-pages.jsx","imports/server/schemas/accounts/resolvers/accounts.jsx","imports/server/schemas/accounts/resolvers/bundle.jsx","imports/server/schemas/accounts/bundle.jsx","imports/server/schemas/accounts/schema.jsx","imports/server/schemas/advertising/definitions/advertising.jsx","imports/server/schemas/advertising/definitions/bundle.jsx","imports/server/schemas/advertising/resolvers/advertising.jsx","imports/server/schemas/advertising/resolvers/bundle.jsx","imports/server/schemas/advertising/bundle.jsx","imports/server/schemas/campaign/definitions/bundle.jsx","imports/server/schemas/campaign/definitions/campaign.jsx","imports/server/schemas/campaign/resolvers/bundle.jsx","imports/server/schemas/campaign/resolvers/campaign.jsx","imports/server/schemas/campaign/bundle.jsx","imports/server/schemas/campaign/schema.jsx","imports/server/schemas/campaign-invites/definitions/bundle.jsx","imports/server/schemas/campaign-invites/definitions/campaign-invites.jsx","imports/server/schemas/campaign-invites/resolvers/bundle.jsx","imports/server/schemas/campaign-invites/resolvers/campaign-invites.jsx","imports/server/schemas/campaign-invites/bundle.jsx","imports/server/schemas/events/definitions/bundle.jsx","imports/server/schemas/events/definitions/events.jsx","imports/server/schemas/events/resolvers/bundle.jsx","imports/server/schemas/events/resolvers/events.jsx","imports/server/schemas/events/bundle.jsx","imports/server/schemas/facebook-ads/definitions/bundle.jsx","imports/server/schemas/facebook-ads/definitions/facebook.jsx","imports/server/schemas/facebook-ads/resolvers/bundle.jsx","imports/server/schemas/facebook-ads/resolvers/facebook.jsx","imports/server/schemas/facebook-ads/bundle.jsx","imports/server/schemas/invites/definitions/bundle.jsx","imports/server/schemas/invites/definitions/invites.jsx","imports/server/schemas/invites/resolvers/bundle.jsx","imports/server/schemas/invites/resolvers/invites.jsx","imports/server/schemas/invites/bundle.jsx","imports/server/schemas/invites/schema.jsx","imports/server/schemas/news/definitions/bundle.jsx","imports/server/schemas/news/definitions/news.jsx","imports/server/schemas/news/resolvers/bundle.jsx","imports/server/schemas/news/resolvers/news.jsx","imports/server/schemas/news/bundle.jsx","imports/server/schemas/payments/definitions/bundle.jsx","imports/server/schemas/payments/definitions/payments.jsx","imports/server/schemas/payments/resolvers/bundle.jsx","imports/server/schemas/payments/resolvers/payments.jsx","imports/server/schemas/payments/bundle.jsx","imports/server/schemas/payments/schema.jsx","imports/server/schemas/posts/definitions/bundle.jsx","imports/server/schemas/posts/definitions/posts.jsx","imports/server/schemas/posts/resolvers/bundle.jsx","imports/server/schemas/posts/resolvers/posts.jsx","imports/server/schemas/posts/bundle.jsx","imports/server/schemas/posts/schema.jsx","imports/server/schemas/reports/definitions/bundle.jsx","imports/server/schemas/reports/definitions/reports.jsx","imports/server/schemas/reports/resolvers/bundle.jsx","imports/server/schemas/reports/resolvers/reports.jsx","imports/server/schemas/reports/bundle.jsx","imports/server/schemas/reports/schema.jsx","imports/server/schemas/search/definitions/bundle.jsx","imports/server/schemas/search/definitions/search.jsx","imports/server/schemas/search/resolvers/bundle.jsx","imports/server/schemas/search/resolvers/search.jsx","imports/server/schemas/search/bundle.jsx","imports/server/schemas/team-attack/definitions/bundle.jsx","imports/server/schemas/team-attack/definitions/team-attack.jsx","imports/server/schemas/team-attack/resolvers/bundle.jsx","imports/server/schemas/team-attack/resolvers/team-attack.jsx","imports/server/schemas/team-attack/bundle.jsx","imports/server/schemas/team-attack/schema.jsx","imports/server/schemas/users/definitions/bundle.jsx","imports/server/schemas/users/definitions/users.jsx","imports/server/schemas/users/resolvers/bundle.jsx","imports/server/schemas/users/resolvers/users.jsx","imports/server/schemas/users/bundle.jsx","imports/server/schemas/bundle.jsx","imports/server/schemas/query.jsx","imports/server/schemas/schema.jsx","imports/constants/countries.jsx","imports/settings.jsx","collections/accountInvites.jsx","collections/accounts.jsx","collections/advertising.jsx","collections/campaignInvites.jsx","collections/campaigns.jsx","collections/invites.jsx","collections/payments.jsx","collections/posts.jsx","collections/reports.jsx","collections/team-attack.jsx","notifications/notifications.jsx","server/graphql.jsx","server/main.js"],"names":["Meteor","module","watch","require","v","methods","invites","Invites","find","status","schedules","forEach","invite","accounts","SocialAccounts","_id","$in","members","fields","fetch","data","message","campaign","isPaid","date","deadline","media","hashtags","push","call","owner","update","$set","currentTime","moment","second","toDate","dateCeil","add","query","$lte","posts","Posts","accountIDs","map","p","account","network","connection","length","post","filter","a","method","error","SyncedCron","name","schedule","parser","text","job","uuid","default","Slingshot","createDirective","S3Storage","bucket","acl","authorize","userId","Error","maxSize","allowedFileTypes","key","file","re","fileExt","exec","v4","Email","Settings","CampaignsSchema","InviteSchema","user","newCampaign","Object","assign","manager","dateStart","dateEnd","brands","information","b","Campaigns","insert","dbCampaign","findOne","removeTypeNames","obj","keys","k","newInvite","influencers","teamAttacks","campaignID","writes","userName","profile","action","proposal","objective","unblock","subject","html","emails","address","send","from","email","noReply","to","FacebookConnection","accountID","adAccount","adSetID","creativeID","Ad","Facebook","accessToken","client","wrapAsync","napi","e","adID","res","adAccountID","split","AdCreative","console","log","adCreativeID","options","AdSetexample","validObj","String","Date","targeting","user_device","campaign_id","AdAccount","adlabels","budget_rebalance_flag","buying_type","buyingType","promoted_object","spend_cap","Number","spendCap","JSON","parse","error_user_msg","targeting_spec","user_os","err","imageData","Image","bytes","userID","likesPerPage","type","syncFB","lastPost","getPosts","until","params","limit","result","id","lastPostCreation","created_time","paging","next","getPageLikes","day","nextDay","setDate","getDate","pretty","since","toJSON","slice","metric","values","value","first","last","comments","likes","shares","x","summary","total_count","count","commentsPerPost","likesPerPost","sharesPerPost","engagement","fan_count","profileLikes","postsPerDay","Math","abs","diff","isNaN","Infinity","FacebookApiException","token","appId","settings","private","networks","facebook","appSecret","secret","version","exportDefault","request","defaults","encoding","pageID","coverURL","callback","fbID","api","albumID","album","url","cover","success","picture","check","postData","postMessage","postImage","get","response","body","statusCode","caption","post_id","location","lat","long","display_coordinates","link","Errro","AdWordsConnection","XML2JS","AdWords","idToken","adGroupService","getService","adGroup","operator","operand","format","biddingStrategyConfiguration","biddingStrategyType","biddingStrategySource","contentBidCriterionTypeGroup","campaignId","urlCustomParameters","parameters","doReplace","adGroupServiceClient","mutate","adGroupRes","operations","parseString","faultstring","TwitterConnection","Twitter","accessTokenSecret","delete","Adwords","serviceSelector","ordering","field","sortOrder","startIndex","numberResults","campaignService","budgetService","budget","amount","microAmount","startDate","endDate","budgetId","positiveGeoTargetType","advertisingChannelType","networkSetting","targetGoogleSearch","targetSearchNetwork","targetContentNetwork","biddingScheme","enhancedCpcEnabled","budgetClient","campaigClient","budgetRes","campaignRes","developerToken","google","AdWordsToken","userAgent","clientCustomerId","client_id","client_secret","access_token","refresh_token","AdwordsUser","GoogleSearch","GoogleSearchConnection","searchApiKey","cx","syncClient","build","q","start","num","TwitterAdsAPI","consumer_key","twitter","consumerKey","consumer_secret","access_token_secret","sandbox","api_version","screenName","getTweets","max_id","screen_name","include_rts","exclude_replies","lastTweet","retweets","favorites","retweet_count","favorite_count","retweetsPerPost","favoritesPerPost","followers_count","followers","following","friends_count","statuses_count","created_at","access_token_key","encode","decode","string","image","tweet","banner","tweetID","media_ids","media_id_string","$exists","woeid","trends","places","promoted","place","index","trendings","trend","promoted_content","md5","Schema","users_create_account","password","plan","source","defaultUser","accountData","Accounts","createUser","users_update_profile","users","stauts","users_change_password","change","setPassword","users_check_password","digest","algorithm","_checkPassword","userData","flags","flag","Boolean","service","impSvc","set","identity","newUser","services","verified","onCreateUser","isSocial","socialProfile","lname","avatar","serviceData","serviceName","first_name","last_name","given_name","family_name","profile_image_url_https","instagram","full_name","profile_picture","lastName","onLogin","loginObj","currentUser","dbUser","currentProfile","lastSeen","loginCount","isSuspended","phone","notifications","browser","address1","address2","city","state","zipCode","country","score","stripe","zendesk","mixpanel","subscription","mainPlan","hasShared","askedForCard","hasUpgraded","askedProfileData","prizes","login","_100","_1000","_10000","courier","title","description","Herald","createNotification","Feed","jsdom","syncFeed","syncDom","env","__PATH__","match","dom","content","author","document","getElementsByTagName","article","src","StripeConnection","Match","currency","application_fee","Maybe","capture","destination","ObjectIncluding","transfer_group","on_behalf_of","metadata","receipt_email","shipping","customer","charges","create","chargeID","fraud_details","line1","lin2","postal_code","carrier","tracking_number","retrieve","statement_descriptor","created","gt","gte","lt","lte","ending_before","object","starting_after","list","account_balance","business_vat_id","coupon","customers","stripeRes","default_source","del","cards","charge","reason","refund_application_fee","reverse_transfer","refunds","refundID","source_transaction","source_type","transfers","transferID","OneOf","account_number","account_holder_name","account_holder_type","routing_number","createSource","updateCard","retrieveSource","deleteSource","amounts","verification_method","verifySource","listSources","exp_month","exp_year","number","address_city","address_country","address_line1","address_line2","address_state","address_zip","cvc","default_for_currency","cardID","retrieveCard","deleteCard","listCards","duration","Where","duration_in_months","amount_off","percent_off","months","max_redemptions","redeem_by","coupons","couponID","deleteDiscount","subscriptionID","subscriptions","discountable","invoice","invoiceItems","tax_percent","invoices","invoiceID","closed","forgiven","subscription_items","deleted","quantity","subscription_plan","subscription_prorate","subscription_proration_date","subscription_quantity","subscription_tax_percent","subscription_trial_end","retrieveLines","retrieveUpcoming","pay","interval","interval_count","trial_period_days","plans","planID","items","application_fee_percent","prorate","trial_end","proration_date","Stripe","StripeConneciton","secretKey","faker","Countries","_","isoLangs","languages","pop","orderBy","l","code","randomizer","array","qty","newArray","i","floor","random","splice","active","firstName","gender","birthDate","subtract","maritalStatus","forbiddenSubjects","sexualOrientation","language","lorem","words","categories","specialties","urls","brand","influencer","getPrice","pricing","profilePicture","coverPhoto","noPostHour","noPostDay","share","partnership","ambassador","tags","grous","groups","getRandomNumber","multiplier","statistics","newInviteID","SocialAccountsInvites","dbInvite","remove","accountName","findUserByEmail","sent","newProfile","lang","profileID","dbProfile","support","username","updated","pages","pageData","page","indexOf","pageIDs","parent","matchPage","fbId","category","specialty","fbPages","OAuthEncryption","Package","makePascalCased","word","toUpperCase","toLowerCase","addOauthService","oauth","credentialToken","credentialSecret","OAuth","retrieveCredential","dbSocialAccount","has","addLoginService","IDs","errors","creative","ad","processedFile","hashImage","images","hash","account_id","image_hash","link_url","object_story_spec","creativeRes","adset_id","creative_id","adRes","UrlShorter","HTTP","PostSchema","urlRegEx","RegExp","getMonth","Array","isArray","every","hashtag","postIDs","newPost","lastDate","accountPosition","minutesOffset","longUrl","GoogleConnection","plus","OAuth2","auth","oauth2Client","setCredentials","library","Profiles","activities","people","headers","InstagramConnection","syncUser","user_self","syncPosts","user_self_media_recent","samplePost","counts","followed_by","follows","use","paypal","PaypalConnection","configure","mode","clientId","sender_batch_id","toString","substring","create_payout_json","payout","newReport","Reports","report","dbReport","payments","round","paymentMethod","last4","Payments","teamAttack","newTeamAttack","TeamAttack","dbTeamAttack","m","AccountInvite","accountInvites","Query","accountInvite","root","args","context","inviteID","merge","definitions","resolvers","User","Account","AccountGallery","AccountGalleryFolder","AccountStatistics","AccountAudienceTarget","AccountAudienceObjectives","AccountAudience","Connection","AccountSettings","AccountsSettingsType","AccountInformation","AccountConceptSubjects","AccountPricing","AccountPricingPhotos","AccountPricingNoPost","RangeQuery","FBPage","accountsOwnSearch","$or","$ne","regex","$and","$regex","accountsByTag","tag","accountFBPages","PagesIDs","dbPages","campaignsCount","suspended","audience","targets","conquer","objectives","increaseFollowers","increaseViews","increaseShares","increaseEngagement","increaseLikes","increaseTrafficHours","reachNewMarkets","increaseSpeaking","increasePlays","increaseWebsiteTraffic","positionTarget","keepTarget","presence","positionNewMarkets","gallery","videos","Campaign","Advertising","advertising","CampaignGallery","CampaignGalleryFolder","CampaignInformation","CampaignInformationObjectives","CampaignInformationHashtags","CampaignMessage","campaignsOwn","messages","campaignInvites","CampaignInvite","campaignInvite","CampaignInvites","events","Event","eventsOwn","campaigns","allDay","end","preview","all","c","eventsCampaign","filters","eventsAccount","FacebookAccount","FacebookAccountMoney","FacebookAccountBusiness","FacebookAccountEndAdvertiser","FacebookCampaign","FacebookCampaignStatus","FacebookAdSet","FacebookAdSetTarget","FacebookAdSetTargetGeoLocations","FacebookAdSetPromotedObject","FacebookAdSetStatus","FacebookAdSetRecommendation","FacebookAdSetMoney","FacebookAdSetMoneyBudget","FacebookAd","FacebookAdStatus","FacebookAdCreative","FacebookAdCreativeObject","FacebookAudience","FacebookAdsCampaignAudienceEstimateTargetingSpecCountries","FacebookAdsCampaignAudienceEstimateTargetingSpec","FacebookAdsCampaignsAudienceEstimate","FacebookDeliveryEstimateBind_Est","FacebookDeliveryEstimateDaily_out","FacebookDeliveryEstimate","FacebookAdsCampaignsDeliveryEstimateGeolocations","FacebookAdsCampaignsDeliveryEstimateTargeting_Spec","FacebookAdsCampaignsDeliveryEstimate","facebookAdAccounts","socialAccountID","money","spent","balance","endAdvertiser","end_advertiser","end_advertiser_name","business","facebookAdsCampaign","ibolAccount","configured","configured_status","effective","effective_status","updated_time","start_time","stop_time","adsets","adSets","facebookAdsCampaigns","facebookAdsCampaignsAdSets","billingEvent","billing_event","goal","optimization_goal","end_time","autoBid","is_autobid","avgPrizePaceing","is_average_price_pacing","daily","daily_budget","lifetime","lifetime_budget","remaining","budget_remaining","recommendations","impressions","lifetime_imps","promotedObject","page_id","facebook_positions","age_max","age_min","geo_locations","countries","locationTypes","location_types","publisher_platforms","platforms","r","blame_field","confidence","importance","facebookAdsCampaignsAdSetAds","ads","adSet","facebookAdsCampaignsAdSetAd","reviewFeedback","ad_review_feedback","global","join","adset","adcreatives","facebookAdsCampaignsAudienceEstimate","facebookAdsCampaignsDeliveryEstimate","delivery_es","account_status","amount_spent","target","age","max","min","geoLocations","creatives","image_url","ctaType","call_to_action_type","InviteMessage","InviteNetworks","Invite","invitesCampaign","createdAt","updatedAt","invitesAvailable","useHashtag","news","News","getNews","path","blog","n","Payment","PaymentMethod","getMonthDateRange","year","month","endOf","$gt","$lt","paymentsOwn","usersQuery","userIDs","u","results","payment","PostAccount","PostData","Post","postsOwn","postsInvite","fullProfile","reports","Report","ReportItem","ReportItemSource","reportsOwn","reportId","search","SearchUser","SearchMedia","SearchItem","TwitterTrendingPlace","TwitterTrends","newItem","item","snippet","statuses","entities","media_url_https","entityMedia","extended_entities","video_info","video","variants","woeidPlaces","twitterTrends","parentid","placeType","volume","tweet_volume","teamAttacksOwn","accountsTeamAttack","action_type","results_order","influencer_gender","influencer_age","influencer_country","influencer_followers","audience_gender","audience_age","audience_nrssg","audience_country","influencer_networks","getBounds","bounds","validator","sort","queryValues","brackets","bracket","minValue","maxValue","team","StripeCoupon","UserCoupon","StripeCard","StripeBankAccount","StripeSubscriptionPlan","StripeSubscription","StripeCharge","StripeInvoice","StripeUser","ZendeskComment","ZendeskUser","ZendeskTicket","UserSupport","UserEmail","UserProfile","MixpanelEventProperties","MixpanelEvent","distinct_id","time","properties","$browser","$current_url","referrer","$initial_referrer","defaultCard","sources","s","banks","bank","bank_name","periodEnd","current_period_end","periodStart","current_period_start","trialStart","trialEnd","trial_start","intervalCount","refunded","refundedAmount","amount_refunded","captured","dispute","failureCode","failureMessage","failure_message","paid","amountDue","amount_due","attempts","attempt_count","nextAttempt","next_payment_attempt","discount","startingBalance","starting_balance","endingBalance","ending_balance","forgive","period_end","period_start","subtotal","tax","taxPercent","total","tickets","t","assignee","assignee_id","collaborators","collaborator_ids","updated_at","priority","requester","requester_id","satisfaction","satisfaction_rating","ticket","role","author_id","channel","via","comment","export","typeDefs","Users","Events","Search","AccountInvites","FacebookAds","makeExecutableSchema","logo","altLogo","social","Collection","addCourier","onsite","onRun","run","createApolloServer","schema","startup","_ensureIndex","ServiceConfiguration","configurations","upsert"],"mappings":"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","file":"/app.js","sourcesContent":["import {Meteor} from \"meteor/meteor\";\n//console.log(\"Invites-Scheduled\");\nMeteor.methods({\n    \"invites-scheduled-run\": function () {\n        let invites = Invites.find({status: \"scheduled\"});\n        let schedules = [];\n        invites.forEach(function (invite) {\n            let accounts = SocialAccounts.find({\n                _id: {$in: invite.members}\n            }, {\n                fields: {\n                    \"_id\": 1,\n                    \"information.name\": 1,\n                    \"information.lastName\": 1,\n                    \"information.avatar\": 1,\n                    \"network\": 1\n                }\n            }).fetch();\n            let data = {\n                message: invite.message.message,\n                accounts,\n                status: \"pending\",\n                campaign: invite.campaign,\n                invite: invite._id,\n                isPaid: true,\n                date: invite.date,\n                deadline: invite.deadline,\n                media: invite.message.media,\n                hashtags: invite.message.hashtags\n            };\n            schedules.push(data);\n            Meteor.call(\"posts-scheduler\", data, invite.owner);\n            Invites.update(invite._id, {$set: {status: \"sent\"}});\n        });\n        return {data: schedules};\n    }\n});","import {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"posts-scheduled-run\": function () {\n        let currentTime = moment().second(0).toDate(),\n            dateCeil = moment(currentTime).add(4, \"minutes\").toDate();\n        let query = {\n            status: \"scheduled\",\n            date: {$lte: dateCeil}\n        };\n        let posts = Posts.find(query).fetch();\n        let accountIDs = posts.map((p) => p.account._id);\n        let accounts = SocialAccounts.find({\n            _id: {$in: accountIDs}\n        }, {\n            fields: {\n                network: 1,\n                _id: 1,\n                connection: 1\n            }\n        }).fetch();\n\n        if (posts.length === 0) {\n            //console.log(\"NO_POSTS_FOUND_TO_RUN\");\n        }\n        //console.log(\"POSTS_RUN_TIME_FROM:\", currentTime, \"_TO_\", dateCeil, \"_FOUND:\", posts.length, \"_POSTS\");\n        posts.forEach(function (post) {\n            let account = accounts.filter((a) => a._id === post.account._id)[0];\n            if (account) {\n                let method = \"\";\n                switch (account.network) {\n                    case \"facebook\":\n                        method = \"facebook-post-create\";\n                        break;\n                    case \"twitter\":\n                        method = \"twitter-post-create\";\n                        break;\n                    case \"instagram\":\n                        method = \"instagram-post-create\";\n                        break;\n                    default:\n                        throw new Meteor.error(500, \"Invalid Social Network\");\n                }\n                post.data.date = post.date;\n                Meteor.call(method, account.connection, post.data, function () {\n                    //console.log(\"SOCIAL_MEDIA_POST_SUCCESFUL\");\n                    Posts.update({_id: post._id}, {$set: {status: \"published\"}})\n                });\n            } else {\n                //TODO: Send Email to acknowledge error in dev.\n                //console.log(\"[ERROR]: POSTING ERROR: NO ACCOUNT MARCH\", post._id);\n            }\n        });\n        return posts;\n    }\n});","\n\nSyncedCron.add({\n    name: \"Run Invites Actions\",\n    schedule: function(parser) {\n        return parser.text(\"every 1 minutes\");\n    },\n    job: function() {\n        //Meteor.call(\"invites-scheduled-run\");\n        return true;\n    }\n});\n\n//Add CronJob every day for","//console.log(\"EVENT_CRON\");\n\nSyncedCron.add({\n    name: \"Run Post Actions\",\n    schedule: function(parser) {\n        return parser.text(\"every 5 minutes\");\n    },\n    job: function() {\n        Meteor.call(\"posts-scheduled-run\");\n        return true;\n    }\n});\n\n//Add CronJob every day for","import \"./methods\";\nimport \"./cron-jobs/posts\";\nimport \"./cron-jobs/invites\";\nimport \"./cron-jobs/actions/posts-scheduled\";\nimport \"./cron-jobs/actions/invites-scheduled\";\nimport \"./image-upload\";","import uuid from \"uuid\";\n\nSlingshot.createDirective(\"campaign-image-upload\", Slingshot.S3Storage, {\n    bucket: \"ibol-campaigns-media\",\n    acl: \"public-read\",\n    authorize: function () {\n        //Deny uploads if user is not logged in.\n        if (!this.userId) {\n            var message = \"Please login before posting files\";\n            throw new Meteor.Error(\"Login Required\", message);\n        }\n\n        return true;\n    },\n    maxSize: 10 * 1024 * 1024, // 10 MB (use null for unlimited).\n    allowedFileTypes: [\"image/png\", \"image/jpeg\", \"image/gif\"],\n    key: function (file) {\n        let re = /(?:\\.([^.]+))?$/;\n        let fileExt = re.exec(file.name)[1];\n\n        return Meteor.userId() + \"/\" + uuid.v4() + \".\" + fileExt;\n    }\n});","import {Meteor} from \"meteor/meteor\";\nimport {Email} from 'meteor/email';\nimport Settings from \"../../../settings\";\nimport CampaignsSchema from \"../../../server/schemas/campaign/schema\";\nimport InviteSchema from \"../../../server/schemas/invites/schema\";\n\nMeteor.methods({\n    \"campaigns-crate\": function (data) {\n       // console.log(\"CAMPAIGNS_CREATE_BEFORE\", data);\n        let user = Meteor.user();\n\n        let newCampaign = Object.assign({}, CampaignsSchema, {\n            owner: user._id,\n            manager: user._id\n        });\n\n        let {name, dateStart, dateEnd, brands} = data;\n\n        newCampaign.information = Object.assign({}, newCampaign.information, {\n            name,\n            dateStart,\n            dateEnd,\n            brands:brands.map((b)=>b._id)\n        });\n\n        //console.log(\"CAMPAIGNS_CREATE_INSERT\", newCampaign, data);\n\n        return Campaigns.insert(newCampaign);\n    },\n    \"campaigns-save\": function (campaign) {\n        const user = Meteor.user();\n        let dbCampaign = Campaigns.findOne({_id: campaign._id});\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        campaign.owner = campaign.owner._id;\n        campaign.manager = campaign.manager._id;\n        if (campaign.information.brands) {\n            campaign.information.brands = campaign.information.brands.map((b)=>b._id);\n        }\n\n        removeTypeNames(campaign);\n\n        return Campaigns.update(campaign._id, {$set: Object.assign({}, dbCampaign, campaign)});\n    },\n    \"invite-create\": function (invite) {\n        //console.log(\"INVITE_CREATE\");\n        let user = Meteor.user();\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        let newInvite = Object.assign({}, InviteSchema, invite, {\n            owner: user._id\n        });\n        newInvite.campaign = newInvite.campaign._id;\n        newInvite.influencers = newInvite.influencers.map((a) => a._id);\n\n        removeTypeNames(newInvite);\n\n        return Invites.insert(newInvite);\n    },\n    \"invite-update\": function (invite) {\n        const user = Meteor.user();\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        invite.influencers = invite.influencers.map((a) => a._id);\n        invite.teamAttacks = invite.teamAttacks.map((a) => a._id);\n\n        removeTypeNames(invite);\n        return Invites.update(invite._id, {$set: invite});\n    },\n    \"invite-save-multiple\": function (invites, campaignID) {\n        let writes = [];\n        invites.forEach((invite) => {\n            invite.campaign = campaignID;\n            writes.push(Meteor.call(\"invite-update\", invite));\n        });\n        return writes;\n    },\n    \"campaign-objective-proposal\": function(campaignID, data){\n        //console.log(\"campaign-objective-proposal\", campaignID, data);\n\n        let user=Meteor.user();\n        let userName = user.profile.name;\n\n        let action=\"Objetivo de Campaña\";\n        let proposal=data.objective;\n\n        this.unblock();\n        let subject = \"Se ha sugerido un nuevo \"+action;\n        let html = ((userName?userName:\"El usuario\")+\" (\" + user.emails[0].address + \" - \"+user._id+\")\") + \" ha sugerido un nuevo \"+action+\": \"+proposal+\".\";\n\n        Email.send({\n            from: Settings.email.noReply,\n            to: \"hello@viralizing.me\",\n            subject,\n            html\n        });\n    }\n});\n\n","import \"./create\";\nimport \"./delete\";\nimport \"./list\";\nimport \"./read\";\nimport  \"./from-adset\";","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-ads-create\": function (accountID, adAccount, adSetID, creativeID, Ad) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        /*\n        let Ad={\n            name: \"Test AdCreative \"+moment().format(\"DD/MM/YYYY h:m\"),\n            adset_id:adSetID,\n            creative: {creative_id:creativeID},\n            status: \"ACTIVE\" //ACTIVE, PAUSED, DELETED, ARCHIVED\n        };*/\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        try{\n            return client(`${adAccount}/ads`, \"post\", Ad);\n        }catch(e){\n            return e\n        }\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-ads-delete\": function (accountID, adID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adID}/`, \"delete\");\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-ads-from-adset\": function (accountID, adSetID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adSetID}/ads`,{fields: [\"account_id\",\"title\",\"actor_id\",\"body\",\"branded_content_sponsor_page_id\",\"call_to_action_type\",\"id\",\"image_crops\",\"image_hash\",\"image_url\",\"link_url\",\"name\",\"adlabels\",\"applink_treatment\",\"object_id\",\"object_story_id\",\"object_type\",\"configured_status\",\"effective_status\",\"status\"]});\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-ads-list\": function (accountID, adAccount) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adAccount}/ads`,{fields: [\"account_id\",\"actor_id\",\"adlabels\",\"body\",\"title\",\"call_to_action_type\",\"id\",\"image_crops\",\"image_hash\",\"image_url\",\"link_og_id\",\"link_url\"]});\n        return res.data;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-ads-read\": function (accountID, adID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adID}/`,{fields: [\"account_id\",\"campaign\",\"campaign_id\",\"ad_review_feedback\",\"adlabels\",\"adset\",\"adset_id\",\"bid_amount\",\"bid_info\",\"bid_type\",\"configured_status\",\"conversion_specs\",\"created_time\",\"creative\",\"effective_status\",\"id\",\"adcreatives\",\"name\",\"recommendations\",\"source_ad\",\"source_ad_id\",\"status\",\"tracking_specs\",\"updated_time\",\"insights\",\"leads\"]});\n\n        return res\n    }\n});","import \"./list\";\nimport \"./read\";","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adAccounts-list\": function (accountID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(\"me/adaccounts\",{fields: [\"name\",\"account_status\",\"business\",\"account_id\",\"id\",\"partner\",\"balance\",\"currency\",\"end_advertiser\",\"end_advertiser_name\",\"created_time\",\"amount_spent\"]});\n        return res.data;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adAccounts-read\": function (accountID, adAccountID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        if(adAccountID.split(\"_\").length===1){\n            adAccountID=\"act_\"+adAccountID;\n        }\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adAccountID}/`,{fields: [\"business_name\",\"account_id\",\"account_status\",\"business\",\"balance\",\"business_city\",\"business_country_code\",\"business_state\",\"business_street\",\"business_street2\",\"business_zip\",\"can_create_brand_lift_study\",\"capabilities\",\"created_time\",\"currency\",\"disable_reason\",\"end_advertiser\",\"end_advertiser_name\",\"failed_delivery_checks\",\"funding_source\",\"funding_source_details\",\"has_migrated_permissions\",\"id\",\"age\",\"amount_spent\"]});\n        return res;\n    }\n});","import \"./create\";\nimport \"./delete\";\nimport \"./list\";\nimport \"./read\";\nimport \"./from-ad\";","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adCreative-create\": function (accountID, adAccount, AdCreative) {\n        console.log(\"fb-marketing-adCreative-create\", accountID, adAccount);\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        /*let AdCreative = {\n            title: \"Test AdCreative \" + moment().format(\"DD/MM/YYYY h:m\"),\n            account_id: adAccount,\n            body: \"Another! This is a test creative body\",\n            image_url: \"https://ibol-website.s3.amazonaws.com/wp-content//uploads/2017/02/z0nvqfroqwa-denys-nevozhai.jpg\",\n            link_url: \"https://www.facebook.com/ibolviralizing/\",\n            //object_id: \"369756380077148\",\n            object_story_spec: {\n                \"link_data\": {\n                    \"call_to_action\": {\n                        \"type\": \"SIGN_UP\",\n                        \"value\": {\"link\": \"https://www.facebook.com/ibolviralizing/\"}\n                    },\n                    \"link\": \"https://www.facebook.com/ibolviralizing/\",\n                    \"message\": \"try it out\"\n                },\n                \"page_id\": \"369756380077148\",\n                \"instagram_actor_id\": \"\"\n            }\n        };*/\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        try{\n            return res = client(`${adAccount}/adcreatives`, \"post\", AdCreative);\n        }catch(e){\n            return e;\n        }\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adCreative-delete\": function (accountID, adCreativeID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adCreativeID}/`, \"delete\");\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adCreative-from-ad\": function (accountID, adID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adID}/adcreatives`,{fields: [\"title\",\"account_id\",\"actor_id\",\"body\",\"branded_content_sponsor_page_id\",\"call_to_action_type\",\"id\",\"image_crops\",\"image_hash\",\"image_url\",\"link_url\",\"name\",\"adlabels\",\"applink_treatment\",\"object_id\",\"object_story_id\",\"object_type\"]});\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adCreative-list\": function (accountID, adAccount) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adAccount}/adcreatives`,{fields: [\"account_id\",\"actor_id\",\"adlabels\",\"body\",\"title\",\"call_to_action_type\",\"id\",\"image_crops\",\"image_hash\",\"image_url\",\"link_og_id\",\"link_url\"]});\n        return res.data;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adCreative-read\": function (accountID, adCreativeID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adCreativeID}/`,{fields: [\"account_id\",\"actor_id\",\"body\",\"branded_content_sponsor_page_id\",\"call_to_action_type\",\"id\",\"image_crops\",\"image_hash\",\"image_url\",\"link_url\",\"name\",\"adlabels\",\"applink_treatment\",\"object_id\",\"object_story_id\",\"object_type\"]});\n        return res;\n    }\n});","import \"./create\";\nimport \"./delete\";\nimport \"./list\";\nimport \"./read\";\nimport \"./from-campaign\";","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adsets-create\": function (accountID, adAccount, options) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let AdSetexample={\n                \"name\":\"My New Ad Set\",\n                \"optimization_goal\": \"REACH\",\n                \"adLabels\":[\"sad\",\"das\"],\n                \"daily_budget\": 2000,\n                \"bid_amount\": 2,\n                \"start_time\": \"2018-09-12 23:59:56-07:00\",\n                \"end_time\": \"2018-09-15 23:59:56-07:00\",\n                \"billing_event\":\"IMPRESSIONS\",\n                \"campaign_id\": \"23842849843970485\",\n                \"status\": \"PAUSED\",\n                \"targeting\":{\n                    \"user_device\": [\"Galaxy S6\",\"One m9\"], \n                    \"user_os\": [\"android\"],\n                    \"geo_locations\": {\"countries\": [\"US\"]},\n                    \"publisher_platforms\": [\"facebook\"]\n                }\n            };\n            const validObj = {\n    \"name\":\"My date tesdasfttt \"+ String(new Date()),\n    \"adLabels\":[\"sad\",\"das\"],\n    \"daily_budget\": 2000,\n    \"bid_amount\": 2,\n    \"start_time\": \"22-06-2018 12:00\",\n    \"end_time\": \"26-06-2018 12:00\",\n    \"billing_event\":\"IMPRESSIONS\",\n    \"campaign_id\": \"23842849843970485\",\n    \"status\": \"PAUSED\",\n    \"targeting\":{\n        \"user_device\": [\"Galaxy S6\",\"One m9\"], \n        \"user_os\": [\"android\"],\n        \"geo_locations\": {\"countries\": [\"US\"]},\n        \"publisher_platforms\": [\"facebook\"]\n    }};\n    /* these fields are the problem when requesting with the API */\n    options.targeting.user_device = validObj.targeting.user_device;\n    options.campaign_id = validObj.campaign_id;\n    /*options = {...options, ...validObj}*/\n    //options.targeting = validObj.targeting;\n            console.log(accountID, adAccount)\n            console.log('ADSETS CREATE', options)\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        try{\n            let res = client(`${adAccount}/adsets`, \"post\", options);\n           return res;\n        } catch (e){\n            console.log(e)\n            return {\n                status: 'error',\n                error: e\n            }\n        }\n       \n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adsets-delete\": function (accountID, adSetID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adSetID}/`, \"delete\");\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adsets-from-campaign\": function (accountID, campaignID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${campaignID}/adsets`,{fields: [\"name\",\"account_id\",\"adlabels\",\"adset_schedule\",\"attribution_spec\",\"bid_amount\",\"bid_info\",\"billing_event\",\"budget_remaining\",\"campaign\",\"campaign_id\",\"configured_status\",\"created_time\",\"creative_sequence\",\"daily_budget\",\"effective_status\",\"end_time\",\"frequency_control_specs\",\"id\",\"is_autobid\",\"is_average_price_pacing\",\"lifetime_budget\",\"lifetime_imps\",\"optimization_goal\",\"pacing_type\",\"promoted_object\",\"recommendations\",\"recurring_budget_semantics\",\"rf_prediction_id\",\"rtb_flag\",\"source_adset\",\"source_adset_id\",\"start_time\",\"status\",\"targeting\",\"time_based_ad_rotation_id_blocks\",\"time_based_ad_rotation_intervals\",\"updated_time\"]});\n        return res.data;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adsets-list\": function (accountID, adAccount) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adAccount}/adsets`,{fields: [\"name\",\"account_id\",\"adlabels\",\"adset_schedule\",\"attribution_spec\",\"bid_amount\",\"bid_info\",\"billing_event\",\"budget_remaining\",\"campaign\",\"campaign_id\",\"configured_status\",\"created_time\",\"creative_sequence\",\"daily_budget\",\"effective_status\",\"end_time\",\"frequency_cap\",\"frequency_cap_reset_period\",\"frequency_control_specs\",\"id\",\"is_autobid\",\"is_average_price_pacing\",\"lifetime_budget\",\"lifetime_frequency_cap\",\"lifetime_imps\",\"optimization_goal\",\"pacing_type\",\"promoted_object\",\"recommendations\",\"recurring_budget_semantics\",\"rf_prediction_id\",\"rtb_flag\",\"source_adset\",\"source_adset_id\",\"start_time\",\"status\",\"targeting\",\"time_based_ad_rotation_id_blocks\",\"time_based_ad_rotation_intervals\",\"updated_time\"]});\n        return res.data;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-adsets-read\": function (accountID, adSetID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adSetID}/`,{fields: [\"adlabels\",\"adset_schedule\",\"attribution_spec\",\"bid_amount\",\"bid_info\",\"billing_event\",\"budget_remaining\",\"campaign\",\"campaign_id\",\"configured_status\",\"created_time\",\"creative_sequence\",\"daily_budget\",\"effective_status\",\"end_time\",\"frequency_cap\",\"frequency_cap_reset_period\",\"frequency_control_specs\",\"id\",\"is_autobid\",\"lifetime_budget\",\"is_average_price_pacing\",\"lifetime_frequency_cap\",\"lifetime_imps\",\"name\",\"optimization_goal\",\"pacing_type\",\"promoted_object\",\"recommendations\",\"recurring_budget_semantics\",\"rf_prediction_id\",\"rtb_flag\",\"source_adset\",\"source_adset_id\",\"start_time\",\"status\",\"targeting\",\"time_based_ad_rotation_id_blocks\",\"time_based_ad_rotation_intervals\",\"updated_time\",\"use_new_app_click\",\"account_id\"]});\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-campaigns-audience\": function (accountID, AdAccount, data) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n    \tconsole.log('fb-marketing-campaigns-audience', accountID, AdAccount, data)\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res =  client(`${AdAccount}/reachestimate`, data);\n\n        return res;\n    }\n});","import \"./create\";\nimport \"./delete\";\nimport \"./list\";\nimport \"./read\";\nimport \"./audience_size\";\nimport \"./delivery_estimate\";\nimport \"./targeting-fields\";","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-campaign-create\": function (accountID, adAccount, data) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let campaign={\n            name: data.name,\n            adlabels:[],\n            budget_rebalance_flag:true,\n            buying_type: data.buyingType, //AUCTION OR RESERVED, FIXED_CPM\n            promoted_object: null, //OBJECT ID\n            spend_cap: Number(data.spendCap)*100,\n            status: \"PAUSED\", //PAUSED OR ACTIVE\n            objective: data.objective //APP_INSTALLS, BRAND_AWARENESS, CONVERSIONS, EVENT_RESPONSES, LEAD_GENERATION, LINK_CLICKS, LOCAL_AWARENESS, OFFER_CLAIMS, PAGE_LIKES, POST_ENGAGEMENT, PRODUCT_CATALOG_SALES, REACH, VIDEO_VIEWS\n        };\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        try{\n            return client(`${adAccount}/campaigns`, \"post\", campaign);\n        }catch(e){\n            console.log(\"ERROR\", e);\n            return {error: JSON.parse(e.message).error.error_user_msg}\n        }\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-campaign-delete\": function (accountID, campaignID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${campaignID}/`, \"delete\");\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-campaigns-delivery-estimate\": function (accountID, AdAccount, data) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        data.targeting_spec.user_device = data.targeting_spec.user_device.filter(e=>e);\n        data.targeting_spec.user_os = data.targeting_spec.user_os.filter(e=>e);\n    \tconsole.log('fb-marketing-campaigns-delivery_estimate', accountID, AdAccount, data)\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res =  client(`${AdAccount}/delivery_estimate`, data);\n\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-campaigns-list\": function (accountID, adAccount) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adAccount}/campaigns`,{fields: [\"configured_status\",\"effective_status\",\"status\",\"start_time\",\"stop_time\",\"updated_time\",\"created_time\",\"spend_cap\",\"objective\",\"buying_type\",\"name\"]});\n        return res.data;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-campaigns-read\": function (accountID, campaignID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        console.log(\"fb-marketing-campaigns-read\", accountID, campaignID);\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        Facebook.napi(`${campaignID}/`,{fields: [\"account_id\",\"created_time\",\"configured_status\",\"can_use_spend_cap\",\"can_create_brand_lift_study\",\"buying_type\",\"budget_rebalance_flag\",\"boosted_object_id\",\"effective_status\",\"name\",\"source_campaign\",\"status\",\"updated_time\",\"start_time\",\"stop_time\",\"ad_studies\",\"ads\",\"spend_cap\",\"objective\",\"adsets\"]}, function(err,res){\n            console.log(\"FACEBOOO\", err,res);\n        });\n        let res = client(`${campaignID}/`,{fields: [\"account_id\",\"created_time\",\"configured_status\",\"can_use_spend_cap\",\"can_create_brand_lift_study\",\"buying_type\",\"budget_rebalance_flag\",\"boosted_object_id\",\"effective_status\",\"name\",\"source_campaign\",\"status\",\"updated_time\",\"start_time\",\"stop_time\",\"ad_studies\",\"ads\",\"spend_cap\",\"objective\",\"adsets\"]});\n\n        return res;\n    }\n});","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-targeting-fields\": function (accountID, data) {\n        console.log('ACCOUNT_ID', accountID);\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        console.log(\"fb-marketing-targeting-fields\", accountID, data);\n\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res =  client(`/search`, data);\n\n        return res;\n    }\n});\n","import \"./create\";","import FacebookConnection from \"../../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"fb-marketing-images-create\": function (accountID, adAccountID, imageData) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n\n        let Image={\n            bytes: imageData\n        };\n        let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n        let res = client(`${adAccountID}/adimages`, \"post\", Image);\n        return res;\n    }\n});","import \"./ad-accounts/bundle\";\nimport \"./campaign/bundle\";\nimport \"./ad-sets/bundle\";\nimport \"./ad-creative/bundle\";\nimport \"./ad/bundle\";\nimport \"./images/bundle\";\n","import FacebookConnection from \"./connection\";\n\nMeteor.methods({\n    \"facebook-account-stats\": function (userID, profile) {\n        if (!profile) {\n            profile = SocialAccounts.findOne({\"network\": \"facebook\"});\n        }\n\n        if (!profile) {\n            throw new Meteor.Error(\"There's no matching profile\");\n        }\n\n        let connection = profile.connection;\n        let client = FacebookConnection(connection.accessToken);\n\n        if (profile) {\n            let posts = [];\n            let fields = [];\n            let likesPerPage=null;\n            if (profile.type === \"fanPage\") {\n                fields = [\"fan_count\"];\n            }\n\n            let syncFB = Meteor.wrapAsync(client.napi, client);\n\n            let user = syncFB(userID, {fields});\n\n            let lastPost = null;\n\n            let getPosts = function (until) {\n                let query = userID + \"/feed\";\n                let params = {\n                    limit: 100,\n                    fields: [\"id\", \"message\", \"picture\", \"link\", \"shares\", \"created_time\", \"comments.limit(1).summary(true)\", \"likes.limit(1).summary(true)\"]\n                };\n\n                if (until) {\n                    params.until = until;\n                }\n\n                let result = syncFB(query, params);\n\n                if (lastPost) {\n                    if (lastPost.id === result.data[result.data.length - 1].id) {\n                        return;\n                    }\n                }\n\n                posts = [...posts, ...result.data];\n                lastPost = result.data[result.data.length - 1];\n\n                let lastPostCreation = new Date(result.data[result.data.length - 1].created_time);\n\n                if (result.data.length > 1 && result.paging.next) {\n                    getPosts(Number(lastPostCreation) / 1000);\n                }\n            };\n\n            let getPageLikes = function (until) {\n                let day = new Date();\n                var nextDay = new Date(day);\n                    nextDay.setDate(day.getDate()+1);\n\n                let query = userID + \"/insights\";\n                let params = {\n                    pretty:0,\n                    since:day.toJSON().slice(0,10),\n                    until:nextDay.toJSON().slice(0,10),\n                    metric:\"page_fans\"\n                    \n                };\n\n                let result = syncFB(query, params);\n                console.log(result);\n\n                if(result.data && result.data[0]){\n                    return result.data.values[0].value;\n                } else {\n                    return null;\n                }\n            };\n\n            getPosts();\n           \n\n            const first = posts[0];\n            const last = posts[posts.length - 1];\n\n            let comments = 0;\n            let likes = 0;\n            let shares = 0;\n\n            for (const x of posts) {\n                if (x.comments) {\n                    comments += x.comments.summary.total_count;\n                }\n                if (x.likes) {\n                    likes += x.likes.summary.total_count;\n                }\n                if (x.shares) {\n                    shares += x.shares.count;\n                }\n            }\n\n            let result = {\n                comments,\n                commentsPerPost: comments / posts.length,\n                likes,\n                likesPerPost: likes / posts.length,\n                shares,\n                sharesPerPost: shares / posts.length,\n                engagement: ((comments + likes + shares) / posts.length) / user.fan_count,\n                profileLikes: getPageLikes(),\n                posts: posts.length,\n                postsPerDay: (posts.length / (Math.abs((moment(first.created_time)).diff(moment(new Date(last.created_time)), \"days\"))))\n            };\n\n            if (user.fan_count) {\n                result.profileLikes = user.fan_count;\n            }\n\n            Object.keys(result).forEach((key) => {\n                if (Number.isNaN(result[key])) {\n                    result[key] = 0;\n                }\n            });\n\n            if (result.postsPerDay === Infinity) {\n                result.postsPerDay = 0;\n            }\n\n            return result\n\n        }\n    }\n});","import \"./post-create\";\nimport \"./account-stats\";\nimport './cover-profile-photo';\nimport \"./pages-list\";\nimport \"./marketing/bundle\";\nimport \"./share-post\";\nimport \"./analytics/insights\";","import {Facebook, FacebookApiException} from \"fb\";\n\nlet FacebookConnection = function (token) {\n    return new Facebook({\n        appId: Meteor.settings.private.networks.facebook.appId,\n        appSecret: Meteor.settings.private.networks.facebook.secret,\n        accessToken: token,\n        version: 'v3.0'\n    });\n};\n\nexport default FacebookConnection;\n","import FacebookConnection from \"./connection\";\n\nlet request = require('request').defaults({encoding: null});\n\nMeteor.methods({\n\t/*coverURL = idPhoto already uploaded*/\n\t/* Meteor.call('facebook-update-cover-photo','pageID',IDphoto,(err,res)=>{console.log(err,res)}); */\n    \"facebook-update-cover-photo\": function (pageID, coverURL, callback) {\n    \tlet account = SocialAccounts.findOne({_id: pageID});\n        let connection = account.connection;\n        console.log('Connetition Data', connection);\n        let client = FacebookConnection(connection.accessToken);\n        const fbID = connection.id;\n\n        if (client) {\n        \tclient.api(`${fbID}/albums`, {fields: ['name','id']}, function(res){\n        \t\tconsole.log('album',res);\n        \t\tconst albumID = res.data.filter((album) => album.name === 'Cover Photos')[0].id;\n        \t\tconsole.log('Cover Photos ID',albumID);\n        \t\tclient.api(`${albumID}/photos`, 'post', {\n\t               url: coverURL,\n\t            }, function (res) {\n               \t\tconsole.log('Cover Response',res);\n\t            });\n        \t});\n            return client.api('/'+fbID, \"post\", {\n                                cover: coverURL,\n                            }, function (res) {\n                                if (!res || res.error) {\n                                    console.log(!res ? 'error occurred' : res.error);\n                                    return;\n                                }\n                                console.log('success: ' + res.success);\n                                if (callback) {\n                                    callback();\n                                }\n                            });\n        }\n    },\n    /*coverURL = page URL*/\n    /* Meteor.call('facebook-update-profile-photo','pageID','coverURL',(err,res)=>{console.log(err,res)}); */\n    \"facebook-update-profile-photo\": function (pageID, coverURL, callback) {\n    \tlet account = SocialAccounts.findOne({_id: pageID});\n        let connection = account.connection;\n        console.log('Connetition Data', connection);\n        let client = FacebookConnection(connection.accessToken);\n        const fbID = connection.id;\n\n        if (client) {\n        \tclient.api(`${fbID}/albums`, {fields: ['name','id']}, function(res){\n        \t\tconsole.log('album',res);\n        \t\tconst albumID = res.data.filter((album) => album.name === 'Profile Pictures')[0].id;\n        \t\tconsole.log('Cover Photos ID',albumID);\n        \t\tclient.api(`${albumID}/photos`, 'post', {\n\t               url: coverURL,\n\t            }, function (res) {\n               \t\tconsole.log('Cover Response',res);\n\t            });\n        \t});\n            return client.api('/'+fbID+'/picture', \"post\", {\n                                picture: coverURL,\n                            }, function (res) {\n                                if (!res || res.error) {\n                                    console.log(!res ? 'error occurred' : res.error);\n                                    return;\n                                }\n                                console.log('success: ' + res.success);\n                                if (callback) {\n                                    callback();\n                                }\n                            });\n        }\n    }\n});","import FacebookConnection from \"./connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\n\nMeteor.methods({\n    \"facebook-pages-list\": function (accountID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Facebook = FacebookConnection(connection.accessToken);\n        if (Facebook) {\n            let client = Meteor.wrapAsync(Facebook.napi, Facebook);\n            let res = client(\"me/accounts\", {fields: [\"id\", \"name\", \"category\", \"picture\", \"access_token\", \"link\", \"verification_status\", \"cover\"]});\n            console.log(\"FACEBOOK-PAGES\",res)\n            return res;\n        }\n    }\n});","import FacebookConnection from \"./connection\";\n\nlet request = require('request').defaults({encoding: null});\n\nMeteor.methods({\n    \"facebook-post-create\": function (connection, postData, callback) {\n        let client = FacebookConnection(connection.accessToken);\n\n        if (client) {\n            let postMessage = function (post) {\n                    return client.api(\"me/feed\", \"post\", {message: post.status}, function (res) {\n                        if (!res || res.error) {\n                            console.log(!res ? \"error occurred\" : res.error);\n                            return;\n                        }\n                        console.log('Post Id: ' + res.id);\n                        if (callback) {\n                            callback();\n                        }\n                    });\n                },\n                postImage = function (post) {\n                    return request.get(post.media, function (error, response, body) {\n                        if (!error && response.statusCode == 200) {\n                            return client.api(\"me/photos\", \"post\", {\n                                url: post.media,\n                                caption: post.status\n                            }, function (res) {\n                                if (!res || res.error) {\n                                    console.log(!res ? 'error occurred' : res.error);\n                                    return;\n                                }\n                                console.log('Post Id: ' + res.post_id);\n                                if (callback) {\n                                    callback();\n                                }\n                            });\n                        }\n                    });\n                };\n\n\n            /*console.log(\"FACEBOOK_POST_DATE:\", post.date, \"_CURRENT_TIME:\", new Date());*/\n            let message = {\n                status: postData.message //+ \"Scheduled at: \" + moment(post.date).format(\"h:m A\") + \" Posted at: \" + moment(new Date()).format(\"h:m A\")\n            };\n\n            if (postData.location) {\n                message.lat = postData.location[0];\n                message.long = postData.location[1];\n                message.display_coordinates = true;\n            }\n            if (postData.media) {\n                message.media = postData.media;\n            }\n\n            let query;\n\n            if (message.media) {\n                query = postImage(message);\n            } else {\n                query = postMessage(message);\n            }\n\n            return query;\n        }\n    }\n});\n","import FacebookConnection from \"./connection\";\nimport {check} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\n\nMeteor.methods({\n\t\"facebook-share-post\": function (pageID, link, callback) {\n\t\tcheck(pageID, String);\n\t\tthrow new Meteor.Errro(500,'Page ID not available');\n    \tlet account = SocialAccounts.findOne({_id: pageID});\n        let connection = account.connection;\n\n        let client = FacebookConnection(connection.accessToken);\n        const fbID = connection.id;\n\n        if (client) {\n        \treturn client.api(`${fbID}/feed`, 'post', {link: link }, function(res){\n        \t\tif (!res || res.error) {\n                    console.log(!res ? 'error occurred' : res.error);\n                    return;\n                }\n                if (callback) {\n                    callback();\n                }\n        \t\tconsole.log('response: ',link);\n\n        \t});\n        }\n\t}\n});\n","import \"./create\";\nimport \"./delete\";\nimport \"./list\";\nimport \"./read\";","import AdWordsConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport XML2JS from \"xml2js\";\n\nMeteor.methods({\n    \"google-adwords-adGroup-create\": function (accountID, data) {\n        //console.log(\"google-adwords-adGroup-create\", accountID);\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n        let adGroupService = AdWords.getService('AdGroupService', 'v201708');\n\n\n        let adGroup = {\n            operator: \"ADD\",\n            operand: {\n                name: \"Test AdGroup \" + moment(new Date()).format(\"DD/MM/YYYY hh:mm:ss A\"),\n                biddingStrategyConfiguration: {\n                    biddingStrategyType: \"ENHANCED_CPC\",\n                    biddingStrategySource: \"CAMPAIGN\"\n                },\n                contentBidCriterionTypeGroup: \"KEYWORD\",\n                campaignId: 934093898,\n                /*campaign: {\n                    campaignId: \"934093898\"\n                },\n                status: \"PAUSED\",*/\n                urlCustomParameters: {\n                    parameters: [],\n                    doReplace: false\n                }/*,\n                settings: {\n                    \"xsi:type\": \"TargetingSetting\",\n                    details: [\n                        {\n                            criterionTypeGroup: \"KEYWORD\",\n                            targetAll: true\n                        }\n                    ]\n                }*/\n            }\n        };\n\n\n        /*campaignService.get({serviceSelector}, (error, result) => {\n            console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n        });*/\n\n        //let res= await campaignService.get({serviceSelector});\n\n        let adGroupServiceClient = Meteor.wrapAsync(adGroupService.mutate, adGroupService);\n\n        try {\n            let adGroupRes = adGroupServiceClient({operations: adGroup});\n            //console.log(\"SYNC_RES\", adGroupRes);\n            return adGroupRes\n        } catch (e) {\n            //console.log(\"ERROR\", typeof e.body, e);\n            let parser = Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n            return parser(e.body)[\"soap:Envelope\"][\"soap:Body\"][0][\"soap:Fault\"][0].faultstring[0]\n        }\n    }\n});","import TwitterConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"google-adwords-adGroup-delete\": function (accountID, adAccount, campaignID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        let campaign={};\n\n        let client = Meteor.wrapAsync(Twitter.delete, Facebook);\n        try{\n            return client(`${adAccount}/campaigns`, campaign);\n        }catch(e){\n            //console.log(\"ERROR\", e);\n            return e\n        }\n    }\n});","import AdWordsConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport Adwords from 'node-adwords';\nimport XML2JS from \"xml2js\";\n\nMeteor.methods({\n     \"google-adwords-adGroup-list\": function (accountID) {\n        console.log(\"google-adwords-adGroup-list\", accountID);\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n        let adGroupService = AdWords.getService('AdGroupService', 'v201708');\n\n        let serviceSelector = {\n            fields: ['Id', 'Name', 'Status', 'AdGroupType', 'CampaignId', 'CampaignName'],\n            ordering: [{field: 'Name', sortOrder: 'ASCENDING'}],\n            paging: {startIndex: 0, numberResults: 50}\n        };\n\n\n        /*campaignService.get({serviceSelector}, (error, result) => {\n            console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n        });*/\n\n        //let res= await campaignService.get({serviceSelector});\n\n         console.log(\"adGroupService\",adGroupService);\n\n        let client = Meteor.wrapAsync(adGroupService.get, adGroupService);\n\n        try{\n            let res=client({serviceSelector});\n            console.log(\"SYNC_RES\", res );\n            return res\n        }catch(e){\n            console.log(\"ERROR\", typeof e.body, e);\n            let parser=Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n            return parser(e.body)\n        }\n    }\n});","import AdWordsConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport Adwords from 'node-adwords';\nimport XML2JS from \"xml2js\";\n\nMeteor.methods({\n    \"google-adwords-adGroup-get\": function (accountID) {\n        //console.log(\"google-adwords-campaign-list\", accountID);\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n        let campaignService = AdWords.getService('CampaignService', 'v201708');\n\n        let serviceSelector = {\n            fields: ['Id', 'Name', 'Status', 'StartDate', 'EndDate'],\n            ordering: [{field: 'Name', sortOrder: 'ASCENDING'}],\n            paging: {startIndex: 0, numberResults: 50}\n        };\n\n\n        /*campaignService.get({serviceSelector}, (error, result) => {\n            console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n        });*/\n\n        //let res= await campaignService.get({serviceSelector});\n\n        let client = Meteor.wrapAsync(campaignService.get, campaignService);\n\n        try{\n            let res=client({serviceSelector});\n            //console.log(\"SYNC_RES\", res );\n            return res\n        }catch(e){\n            //console.log(\"ERROR\", typeof e.body, e);\n            let parser=Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n            return parser(e.body)\n        }\n    }\n});","import \"./create\";\nimport \"./delete\";\nimport \"./list\";\nimport \"./read\";","import AdWordsConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport Adwords from 'node-adwords';\nimport XML2JS from \"xml2js\";\n\nMeteor.methods({\n    \"google-adwords-campaign-create\": function (accountID, data) {\n        console.log(\"google-adwords-campaign-create\", accountID);\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n        let campaignService = AdWords.getService('CampaignService', 'v201708');\n        let budgetService = AdWords.getService('BudgetService', 'v201708');\n\n        let budget = {\n            operator: \"ADD\",\n            operand: {\n                name: \"Test Budget \"+moment(new Date()).format(\"DD/MM/YYYY hh:mm:ss A\"),\n                amount: {\n                    microAmount: \"50000000\"\n                }\n            }\n        };\n\n        let campaign = {\n            operator: \"ADD\",\n            operand: {\n                name: \"Test Campaign \"+moment(new Date()).format(\"DD/MM/YYYY hh:mm:ss A\"),\n                status: \"PAUSED\",\n                startDate: \"20170921\",\n                endDate: \"20371230\",\n                budget: {\n                    budgetId: \"\"\n                },\n                settings: {\n                    \"xsi:type\": \"GeoTargetTypeSetting\",\n                    positiveGeoTargetType: \"DONT_CARE\"\n                },\n                advertisingChannelType: \"SEARCH\",\n                networkSetting: {\n                    targetGoogleSearch: true,\n                    targetSearchNetwork: true,\n                    targetContentNetwork: false\n                },\n                biddingStrategyConfiguration: {\n                    biddingScheme: {\n                        \"xsi:type\": \"ManualCpcBiddingScheme\",\n                        enhancedCpcEnabled: false\n                    }\n                }\n            }\n        };\n\n\n        /*campaignService.get({serviceSelector}, (error, result) => {\n            console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n        });*/\n\n        //let res= await campaignService.get({serviceSelector});\n\n        let budgetClient = Meteor.wrapAsync(budgetService.mutate, budgetService);\n        let campaigClient = Meteor.wrapAsync(campaignService.mutate, campaignService);\n\n        try{\n            let budgetRes=budgetClient({operations:budget});\n            campaign.operand.budget.budgetId=budgetRes.value[0].budgetId;\n            let campaignRes=campaigClient({operations: campaign});\n            console.log(\"SYNC_RES\", campaignRes );\n            return campaignRes\n        }catch(e){\n            console.log(\"ERROR\", typeof e.body, e);\n            let parser=Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n            return parser(e.body)[\"soap:Envelope\"][\"soap:Body\"][0][\"soap:Fault\"][0].faultstring[0]\n        }\n    }\n});","import TwitterConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"google-adwords-campaign-delete\": function (accountID, adAccount, campaignID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        let campaign={};\n\n        let client = Meteor.wrapAsync(Twitter.delete, Facebook);\n        try{\n            return client(`${adAccount}/campaigns`, campaign);\n        }catch(e){\n            console.log(\"ERROR\", e);\n            return e\n        }\n    }\n});","import AdWordsConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport Adwords from 'node-adwords';\nimport XML2JS from \"xml2js\";\n\nMeteor.methods({\n     \"google-adwords-campaign-list\": function (accountID) {\n        //console.log(\"google-adwords-campaign-list\", accountID);\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n        let campaignService = AdWords.getService('CampaignService', 'v201708');\n\n        let serviceSelector = {\n            fields: ['Id', 'Name', 'Status', 'StartDate', 'EndDate'],\n            ordering: [{field: 'Name', sortOrder: 'ASCENDING'}],\n            paging: {startIndex: 0, numberResults: 50}\n        };\n\n\n        /*campaignService.get({serviceSelector}, (error, result) => {\n            console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n        });*/\n\n        //let res= await campaignService.get({serviceSelector});\n\n        let client = Meteor.wrapAsync(campaignService.get, campaignService);\n\n        try{\n            let res=client({serviceSelector});\n            console.log(\"SYNC_RES\", res );\n            return res\n        }catch(e){\n            console.log(\"ERROR\", typeof e.body, e);\n            let parser=Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n            return parser(e.body)\n        }\n    }\n});","import AdWordsConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport Adwords from 'node-adwords';\nimport XML2JS from \"xml2js\";\n\nMeteor.methods({\n    \"google-adwords-campaign-get\": function (accountID) {\n        console.log(\"google-adwords-campaign-list\", accountID);\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let AdWords = AdWordsConnection(connection.idToken, connection.accessToken);\n        let campaignService = AdWords.getService('CampaignService', 'v201708');\n\n        let serviceSelector = {\n            fields: ['Id', 'Name', 'Status', 'StartDate', 'EndDate'],\n            ordering: [{field: 'Name', sortOrder: 'ASCENDING'}],\n            paging: {startIndex: 0, numberResults: 50}\n        };\n\n\n        /*campaignService.get({serviceSelector}, (error, result) => {\n            console.log(\"ADWORDS_CAMPAIGN\",error, typeof result, result);\n        });*/\n\n        //let res= await campaignService.get({serviceSelector});\n\n        let client = Meteor.wrapAsync(campaignService.get, campaignService);\n\n        try{\n            let res=client({serviceSelector});\n            //console.log(\"SYNC_RES\", res );\n            return res\n        }catch(e){\n            //console.log(\"ERROR\", typeof e.body, e);\n            let parser=Meteor.wrapAsync(XML2JS.parseString, XML2JS);\n            return parser(e.body)\n        }\n    }\n});","import \"./campaign/bundle\";\nimport \"./ad-groups/bundle\";","import Adwords from 'node-adwords';\n\n\nlet AdWordsConnection = function (key, secret) {\n    let connection={\n        developerToken: Meteor.settings.private.networks.google.AdWordsToken, //your adwords developerToken\n        userAgent: 'IBOL', //any company name\n        clientCustomerId: '856-177-2452',//'530-908-7582', //the Adwords Account id (e.g. 123-123-123)\n        client_id: \"666001639290-4ockfbrs6nruqfds6jkugk1g8mctffe2.apps.googleusercontent.com\", //this is the api console client_id\n        client_secret: \"xmMAWuSkSv99ENIjVCHNTUf9\",\n        access_token: secret,\n        refresh_token: secret\n    };\n    //console.log(\"ADWORDS_CONNECTION\", connection);\n    return new Adwords.AdwordsUser(connection);\n};\n\nexport default AdWordsConnection;","import \"./connection\";\nimport \"./search\";\nimport \"./adwords/bundle\";","import GoogleSearch from \"google-search\";\n\nlet GoogleSearchConnection = function () {\n    return new GoogleSearch({\n        key: Meteor.settings.private.networks.google.searchApiKey,\n        cx:  \"001142422321320148592:ikfvsltk4bw\"\n    });\n};\n\nexport default GoogleSearchConnection;","import GoogleSearchConnection from \"./connection\";\n\nMeteor.methods({\n    \"google-search\":function(query){\n        let client = GoogleSearchConnection();\n        let syncClient = Meteor.wrapAsync(client.build, client);\n        return syncClient({\n            q: query,\n            start: 5,\n            num: 10 // Number of search results to return between 1 and 10, inclusive\n        })\n    }\n});","import \"./list\";","import TwitterConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"twt-ads-accounts-list\": function (accountID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        Twitter.get(`accounts`, {}, function(err,res){\n            console.log(\"ACOCUNTS\", err,res);\n        });\n\n        let client = Meteor.wrapAsync(Twitter.get, Facebook);\n        try{\n            return client(`accounts`);\n        }catch(e){\n            //console.log(\"ERROR\", e);\n            return e\n        }\n    }\n});","import \"./create\";\nimport \"./delete\";\nimport \"./list\";\nimport \"./read\";","import TwitterConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"twt-ads-campaign-create\": function (accountID, adAccount, data) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        let campaign={};\n\n        let client = Meteor.wrapAsync(Twitter.post, Facebook);\n        try{\n            return client(`${adAccount}/campaigns`, campaign);\n        }catch(e){\n            //console.log(\"ERROR\", e);\n            return e\n        }\n    }\n});","import TwitterConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"twt-ads-campaign-delete\": function (accountID, adAccount, campaignID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        let campaign={};\n\n        let client = Meteor.wrapAsync(Twitter.delete, Facebook);\n        try{\n            return client(`${adAccount}/campaigns`, campaign);\n        }catch(e){\n            //console.log(\"ERROR\", e);\n            return e\n        }\n    }\n});","import TwitterConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"twt-ads-campaign-list\": function (accountID, adAccount, campaignID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        let campaign={};\n\n        let client = Meteor.wrapAsync(Twitter.get, Facebook);\n        try{\n            return client(`${adAccount}/campaigns`, campaign);\n        }catch(e){\n            //console.log(\"ERROR\", e);\n            return e\n        }\n    }\n});","import TwitterConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"twt-ads-campaign-get\": function (accountID, adAccount, campaignID) {\n        let account = SocialAccounts.findOne({_id: accountID});\n        let connection = account.connection;\n        let Twitter = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        let campaign={};\n\n        let client = Meteor.wrapAsync(Twitter.get, Facebook);\n        try{\n            return client(`${adAccount}/campaigns`, campaign);\n        }catch(e){\n            //console.log(\"ERROR\", e);\n            return e\n        }\n    }\n});","import \"./create\";\nimport \"./delete\";\nimport \"./list\";\nimport \"./read\";","import \"./campaign/bundle\";\nimport \"./line-item/bundle\";\nimport \"./accounts/bundle\";","import TwitterAdsAPI from \"twitter-ads\";\n\nlet TwitterConnection = function (key, secret) {\n    //console.log(\"TWITTER_ADS_Connection\", key, secret);\n    return new TwitterAdsAPI({\n        consumer_key: Meteor.settings.private.networks.twitter.consumerKey,\n        consumer_secret: Meteor.settings.private.networks.twitter.secret,\n        access_token: key,\n        access_token_secret: secret,\n        sandbox: true, // defaults to true\n        api_version: '2'\n    });\n};\n\nexport default TwitterConnection;","import TwitterConnection from \"./connection\";\n\nMeteor.methods({\n    \"twitter-account-stats\": function (screenName, profile) {\n        if(!profile){\n            profile = SocialAccounts.findOne({\"network\": \"twitter\"});\n        }\n\n        if (!profile) {\n            throw new Meteor.Error(\"There's no matching profile\");\n            return;\n        }\n\n        let connection = profile.connection,\n            client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        if (profile) {\n            let posts = [];\n\n            let syncClient = Meteor.wrapAsync(client.get, client),\n                getTweets = function (max_id) {\n                    let query = {\n                        screen_name: screenName,\n                        count: 200,\n                        include_rts: 0,\n                        exclude_replies: 1\n                    };\n                    if (max_id) {\n                        query.max_id = max_id;\n                    }\n\n                    let result = syncClient(\"statuses/user_timeline\", query),\n                        lastTweet = result[(result.length - 1)];\n                    posts = [...posts, ...result];\n\n                    if (lastTweet) {\n                        if (max_id) {\n                            if (max_id !== lastTweet.id) {\n                                getTweets(lastTweet.id);\n                            }\n                        } else {\n                            getTweets(lastTweet.id);\n                        }\n                    }\n                };\n\n            getTweets();\n\n            const first = posts[0];\n            const last = posts[posts.length - 1];\n\n            let retweets = 0;\n            let favorites = 0;\n\n            for (const x of posts) {\n                retweets += x.retweet_count;\n                favorites += x.favorite_count;\n            }\n\n            let user = posts[0].user;\n\n            let result = {\n                retweets,\n                retweetsPerPost: retweets / posts.length,\n                favorites,\n                favoritesPerPost: favorites / posts.length,\n                engagement: ((retweets + favorites) / posts.length) / user.followers_count,\n                followers: user.followers_count,\n                following: user.friends_count,\n                posts: user.statuses_count,\n                postsPerDay: (posts.length / (Math.abs((moment(new Date(first.created_at)).diff(moment(new Date(last.created_at)), \"days\")))))\n            };\n\n            Object.keys(result).forEach((key) => {\n                if (Number.isNaN(result[key])) {\n                    result[key] = 0;\n                }\n            });\n\n            if(result.postsPerDay===Infinity){\n                result.postsPerDay=0;\n            }\n\n            return result\n        }\n    }\n});\n","import \"./post-create\";\nimport \"./account-stats\";\nimport \"./search\";\nimport \"./trending\";\nimport \"./ads/bundle\";\nimport \"./cover-profile-photo\";\nimport \"./interactions\";","import Twitter from \"twitter\";\n\nlet TwitterConnection = function (key, secret) {\n    return new Twitter({\n        consumer_key: Meteor.settings.private.networks.twitter.consumerKey,\n        consumer_secret: Meteor.settings.private.networks.twitter.secret,\n        access_token_key: key,\n        access_token_secret: secret\n    });\n};\n\nexport default TwitterConnection;","import TwitterConnection from \"./connection\";\nimport {encode, decode} from 'node-base64-image';\n\n\nMeteor.methods({\n\t\"twitter-update-profile-photo\": function (connection, coverURL, callback) {\n\t\tif (typeof(connection) === 'string') {\n\t\t\tlet account = SocialAccounts.findOne({_id: connection})\n\t\t\tconnection = account.connection\n\t\t}\n\t\tconsole.log(connection)\n\t\tlet client = TwitterConnection(connection.accessToken, connection.accessTokenSecret)\n\n\t\tif (client) {\n\t\t\treturn encode(coverURL, {string: true}, function (err, image) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('Error: ' + err)\n\t\t\t\t}\n\t\t\t\t//console.log('image: ',res)\n\t\t\t\treturn client.post('account/update_profile_image', {image}, function (error, tweet, response) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tconsole.log('Error: ', error)\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(tweet)\n\t\t\t\t\tif (callback) {\n\t\t\t\t\t\tcallback()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t},\n\n\t\"twitter-update-cover-photo\": function (connection, coverURL, callback) {\n\t\tif (typeof(connection) === 'string') {\n\t\t\tlet account = SocialAccounts.findOne({_id: connection})\n\t\t\tconnection = account.connection\n\t\t}\n\t\tconsole.log(connection)\n\t\tlet client = TwitterConnection(connection.accessToken, connection.accessTokenSecret)\n\n\t\tif (client) {\n\t\t\treturn encode(coverURL, {string: true}, function (err, banner) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('Error: ' + err)\n\t\t\t\t}\n\t\t\t\t//console.log('image: ',res)\n\t\t\t\treturn client.post('account/update_profile_banner', {banner}, function (error, tweet, response) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tconsole.log('Error: ', error)\n\t\t\t\t\t}\n\t\t\t\t\tif (callback) {\n\t\t\t\t\t\tcallback()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t},\n});\n","import TwitterConnection from \"./connection\";\nimport {encode, decode} from 'node-base64-image';\n\n\nMeteor.methods({\n\t\"twitter-follow-profile\": function (connection, screen_name, callback) {\n\t\tif (typeof(connection) === 'string') {\n\t\t\tlet account = SocialAccounts.findOne({_id: connection})\n\t\t\tconnection = account.connection\n\t\t}\n\t\tconsole.log(connection)\n\t\tlet client = TwitterConnection(connection.accessToken, connection.accessTokenSecret)\n\n\t\tif (client) {\n\t\t\treturn client.post('friendships/create', {screen_name}, function (error, tweet, response) {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.log('Error: ', error)\n\t\t\t\t}\n\t\t\t\tconsole.log(tweet)\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback()\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t\"twitter-unfollow-profile\": function (connection, screen_name, callback) {\n\t\tif (typeof(connection) === 'string') {\n\t\t\tlet account = SocialAccounts.findOne({_id: connection})\n\t\t\tconnection = account.connection\n\t\t}\n\t\tconsole.log(connection)\n\t\tlet client = TwitterConnection(connection.accessToken, connection.accessTokenSecret)\n\n\t\tif (client) {\n\t\t\treturn client.post('friendships/destroy', {screen_name}, function (error, tweet, response) {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.log('Error: ', error)\n\t\t\t\t}\n\t\t\t\tconsole.log(tweet)\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback()\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t\"twitter-retweet\": function (connection, id, callback) {\n\t\tif (typeof(connection) === 'string') {\n\t\t\tlet account = SocialAccounts.findOne({_id: connection})\n\t\t\tconnection = account.connection\n\t\t}\n\t\tconsole.log(connection)\n\t\tlet client = TwitterConnection(connection.accessToken, connection.accessTokenSecret)\n\n\t\tif (client) {\n\t\t\treturn client.post('statuses/retweet', {id}, function (error, tweet, response) {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.log('Error: ', error)\n\t\t\t\t}\n\t\t\t\tconsole.log(tweet)\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback()\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t\"twitter-like\": function (connection, id, callback) {\n\t\tif (typeof(connection) === 'string') {\n\t\t\tlet account = SocialAccounts.findOne({_id: connection})\n\t\t\tconnection = account.connection\n\t\t}\n\t\tconsole.log(connection)\n\t\tlet client = TwitterConnection(connection.accessToken, connection.accessTokenSecret)\n\n\t\tif (client) {\n\t\t\treturn client.post('favorites/create', {id}, function (error, tweet, response) {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.log('Error: ', error)\n\t\t\t\t}\n\t\t\t\tconsole.log(tweet)\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback()\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n});\n","import TwitterConnection from \"./connection\";\n\nlet request = require('request').defaults({encoding: null});\n\nMeteor.methods({\n    \"twitter-post-create\": function (connection, post, callback) {\n        if(typeof(connection) === 'string'){\n            let account = SocialAccounts.findOne({_id: connection});\n            connection = account.connection;\n        }\n        const tweetID = connection.id;\n        let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        if (client) {\n            /*console.log(\"TWITTER_CLIENT\",client.post);*/\n            let postMessage = function (post) {\n                    return client.post('statuses/update', post, function (error, tweet, response) {\n                        if (error) {\n                            throw new Meteor.Error(\"Twitter: Failed to Post\", error);\n                        }\n                        if (callback) {\n                            callback();\n                        }\n                    });\n                },\n                postImage = function (post) {\n                    request.get(post.media, function (error, response, body) {\n                        if (!error && response.statusCode == 200) {\n\n                            client.post('media/upload', {media: body}, function (error, media, response) {\n\n                                if (error) {\n                                    console.log(error);\n                                    return new Meteor.Error(\"Twitter: Failed to Upload Media\");\n                                }\n                                if (!error) {\n                                    post.media_ids = media.media_id_string;\n                                    delete post.media;\n\n                                    return postMessage(post);\n                                }\n                            });\n                        }\n                    });\n                };\n\n            console.log(\"TWITTER_POST_DATE:\", post.date, \"_CURRENT_TIME:\", new Date());\n            let message = {\n                status: post.message// + \"Scheduled at: \" + moment(post.date).format(\"h:m A\") + \" Posted at: \" + moment(new Date()).format(\"h:m A\")\n            };\n\n            if (post.location) {\n                message.lat = post.location[0];\n                message.long = post.location[1];\n                message.display_coordinates = true;\n            }\n            if (post.media) {\n                message.media = post.media;\n            }\n\n            let query;\n\n            if (message.media) {\n                query = postImage(message);\n            } else {\n                query = postMessage(message);\n            }\n\n            return query;\n        }\n    }\n});\n","import {Meteor} from 'meteor/meteor';\nimport TwitterConnection from \"./connection\";\n\nMeteor.methods({\n    \"twitter-search\": function (query) {\n        let account = SocialAccounts.findOne({\n            network: \"twitter\",\n            connection: { $exists: true }\n        });\n        let connection = account.connection;\n        /*connection={\n            accessToken:\"825526971505446912-BKiaP4KjYkYFfMCmYDc2AkLZjpcLkV0\",\n            accessTokenSecret:\"UZXTVYOiaIgh50kaDxNFRSx9wbAzWF67ndT9UFvcWurto\"\n        }*/\n        let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n        let syncClient = Meteor.wrapAsync(client.get, client);\n        return syncClient(\"search/tweets\", {q: query, count: 100});\n    }\n});","import TwitterConnection from \"./connection\";\n\nMeteor.methods({\n    \"twitter-trends-available\": function () {\n        let account = SocialAccounts.findOne({\n            network: \"twitter\",\n            connection: {$exists: true}\n        });\n        let connection = account.connection;\n\n        let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        if (client) {\n            let syncClient = Meteor.wrapAsync(client.get, client);\n            return syncClient('trends/available');\n        }\n    },\n    \"twitter-trends-place\": function (woeid) {\n        let account = SocialAccounts.findOne({\n            network: \"twitter\",\n            connection: {$exists: true}\n        });\n        let connection = account.connection;\n\n        let client = TwitterConnection(connection.accessToken, connection.accessTokenSecret);\n\n        if (client) {\n            let syncClient = Meteor.wrapAsync(client.get, client);\n            try{\n                return syncClient('trends/place', {id: woeid});\n            }catch (e){\n                return [{trends:[]}];\n            }\n        }\n    },\n    \"twitter-find-promoted-trending\": function () {\n        let places = Meteor.call(\"twitter-trends-available\");\n\n        let promoted = [];\n        places.forEach((place, index) => {\n            if(index>70) return;\n            let trendings = Meteor.call(\"twitter-trends-place\", place.woeid);\n            trendings.forEach((trend) => {\n                if (trend.promoted_content) {\n                    promoted.push(trend);\n                }\n            });\n        });\n        return promoted;\n    }\n});","import './methods';\nimport \"./onLogin\";\nimport \"./on-creation\";\nimport './native-auth';\n","import {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport md5 from \"md5\";\nimport Schema from \"./schema\";\n\nMeteor.methods({\n    users_create_account: function (email, password, plan, source) {\n        let defaultUser = Schema;\n\n        if (source && source.type) {\n            defaultUser.source = source;\n        }\n\n        let accountData = Accounts.createUser({\n            email: email,\n            password: password,\n            profile: defaultUser.profile\n        });\n\n        /*\n         if(typeof(accountData)===\"string\"){\n         console.log(\"Create Stripe ID\");\n         Meteor.call('payments_customer_create',accountData,plan);\n         }*/\n\n        return accountData\n    },\n    users_update_profile: function (profile) {\n        Meteor.users.update(Meteor.userId(), {$set: {profile: profile}});\n        return {\n            stauts: \"success\"\n        }\n    },\n    users_change_password: function (userID, password) {\n        return false;\n        let change = Accounts.setPassword(userID, password);\n\n        return {\n            stauts: \"success\"\n        }\n    },\n    users_check_password: function (digest) {\n        check(digest, String);\n\n        if (this.userId) {\n            let user = Meteor.user();\n            let password = {digest: digest, algorithm: 'sha-256'};\n            let result = Accounts._checkPassword(user, password);\n            return result.error == null;\n        } else {\n            return false;\n        }\n    },\n    \"users-get-flags\": function () {\n        let user = Meteor.user();\n        let userData = Meteor.users.findOne({_id: user._id}, {fields: {flags: 1}});\n        return userData.flags;\n    },\n    \"users-update-flag\": function (flag, value) {\n        check(flag, String);\n        check(value, Boolean);\n        let user = Meteor.user();\n        if (!user) {\n            throw new Meteor.Error(500, \"Use Doesn't Exist\");\n        }\n        let flags = Object.assign({}, user.flags);\n        flags[flag] = value;\n        Meteor.users.update({_id: user._id}, {$set: {flags}})\n    },\n    \"users-update-modal-profile\": function (data) {\n        let user = Meteor.user();\n        if (!user) {\n            throw new Meteor.Error(500, \"Use Doesn't Exist\");\n        }\n        let profile = Object.assign({}, user.profile, data);\n        Meteor.users.update({_id: user._id}, {$set: {profile}})\n    }\n});\n","import {Meteor} from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nMeteor.methods({\n\t'native-authentication': (service, data)=>{\n\t\t// Check service is a string\n\t\tcheck(service, String);\n\t\t// Check data is an object\n\t\tcheck(data, Object);\n\t\tconsole.log('SERVICE', service);\n\t\tconsole.log('DATA', data);\n\t\t// Initialize query object\n\t\tconst query = {};\n\t\t// Set query for service\n\t\tquery[`services[${service}].id`] = data.id;\n\t\t// Find matching account\n\t\tconst user = Meteor.users.findOne(query);\n\t\t// If match found\n\t\tif(user){\n\t\t\t// Return Token for login\n\t\t\treturn Accounts.impSvc.set(user._id);\n\t\t}\n\t\t// Create Identity Object\n\t\tconst identity ={};\n\n\t\tconst newUser = {\n\t\t\tservices: {},\n\t\t\tprofile: { name: identity.name },\n\t\t\temails: [{\n\t\t\t\taddress: identity.email,\n\t\t\t\tverified: true\n\t\t\t}]\n\t\t};\n\t\t// Set Oauth service data\n\t\tnewUser.services[service] = data;\n\t\t// Insert new user data\n\t\tuserId = Meteor.users.insert(newUser);\n\t\t// Return Token for login\n\t\treturn Accounts.impSvc.set(userId);\n\t}\n});\n","\nAccounts.onCreateUser(function(options, user) {\n\n    //console.log(\"USER_CREATE\", user);\n    let isSocial=false;\n    let socialProfile={\n            name:null,\n            lname:null,\n            email:null,\n            avatar:null\n        },\n        serviceData,\n        serviceName;\n    if(user.services){\n\n        if(user.services.facebook){\n            serviceName=\"facebook\";\n            isSocial=true;\n            serviceData=user.services.facebook;\n            socialProfile.name=serviceData.first_name;\n            socialProfile.lname=serviceData.last_name;\n            socialProfile.email=serviceData.email;\n            socialProfile.avatar=\"http://graph.facebook.com/\"+serviceData.id+\"/picture/?type=large\";\n        }\n        if(user.services.google){\n            serviceName=\"google\";\n            isSocial=true;\n            serviceData=user.services.google;\n            socialProfile.name=serviceData.given_name;\n            socialProfile.lname=serviceData.family_name;\n            socialProfile.email=serviceData.email;\n            socialProfile.avatar=serviceData.picture;\n        }\n\n        if(user.services.twitter){\n            serviceName=\"twitter\";\n            isSocial=true;\n            serviceData=user.services.twitter;\n            socialProfile.name=serviceData.screenName;\n            socialProfile.avatar=serviceData.profile_image_url_https;\n        }\n\n        if(user.services.instagram){\n            serviceName=\"instagram\";\n            isSocial=true;\n            serviceData=user.services.instagram;\n            socialProfile.name=serviceData.full_name;\n            socialProfile.avatar=serviceData.profile_picture;\n        }\n    }\n\n\n    if(!user.profile){\n        user.profile={};\n    }\n\n    if(isSocial){\n        user.profile.name=socialProfile.name;\n        user.profile.lastName=socialProfile.lname;\n        user.profile.avatar=socialProfile.avatar;\n\n        //Insert Email\n        if(socialProfile.email){\n            let email = {\n                address: socialProfile.email,\n                verified: true\n            };\n            user.emails = [email];\n        }\n\n        //TODO: REVIEW THIS\n        /*Meteor.call(\"profile-create\", user, {\n            serviceName,\n            serviceData\n        })*/\n    }\n\n\n    return user;\n});\n","import {Meteor} from \"meteor/meteor\";\nimport {Accounts} from \"meteor/accounts-base\";\nimport Schema from \"./schema\";\nimport md5 from \"md5\";\n\n\nAccounts.onLogin(function (loginObj) {\n\n    let currentUser = loginObj.user;\n    let dbUser=Meteor.users.findOne({_id:currentUser._id});\n    let currentProfile = currentUser.profile;\n\n\n    let profile = Object.assign({}, Schema.profile, currentProfile);\n    profile.lastSeen = new Date();\n\n    if (!profile.avatar) {\n        profile.avatar = \"https://www.gravatar.com/avatar/\" + md5(currentUser.emails[0].address);\n    }\n\n    if(loginObj.type===\"resume\"){\n        if (profile.loginCount) {\n            profile.loginCount++;\n        } else {\n            profile.loginCount = 1;\n        }\n    }\n\n    let user = Object.assign({}, Schema, dbUser, {profile});\n\n    Meteor.users.update(user._id, user);\n\n    return true\n});","\nexport default {\n    isSuspended: false,\n    profile: {\n        avatar: null,\n        name: null,\n        lastName: null,\n        phone: null,\n        profile: null,\n        settings: {\n            notifications: {\n                browser: true,\n                email: false\n            }\n        },\n        address: {\n            address1: null,\n            address2: null,\n            city: null,\n            state: null,\n            zipCode: null,\n            country: null\n        },\n        loginCount: 0,\n        score: 0\n    },\n    stripe: {\n        id: null\n    },\n    zendesk: {\n        id: null\n    },\n    mixpanel: {\n        id: null\n    },\n    subscription: {\n        mainPlan: null\n    },\n    source: {\n        type: null,\n        id: null\n    },\n    flags: {\n        hasShared: false,\n        askedForCard: false,\n        hasUpgraded: false,\n        askedProfileData: false,\n        prizes: {\n            login: {\n                _100: false,\n                _1000: false,\n                _10000: false\n            }\n        }\n    }\n};","import \"./notifications\";\nimport \"./rss-feed\";\nimport \"./users/bundle\";","import {Meteor} from 'meteor/meteor';\n\nMeteor.methods({\n    \"notifications-create\": function (userID, data) {\n        //console.log(\"NOTIFICATIONS_CRATE\");\n        let params = {\n            courier: 'appNotifications', //required\n            data: { //optional and whatever you need\n                type: \"info\",\n                title: data.title,\n                description: data.description\n            }\n        };\n        if (data.url) {\n            params.url = data.url;\n        }\n\n        return Herald.createNotification(userID, params);\n    }\n});","import {Meteor} from \"meteor/meteor\";\nimport Feed from \"feed-read-parser\";\nimport jsdom from \"jsdom\";\n\nMeteor.methods({\n    \"rss-feed\": function(url){\n        let syncFeed=Meteor.wrapAsync(Feed);\n        let syncDom=Meteor.wrapAsync(jsdom.env,jsdom);\n        return syncFeed(url).map(a=>{\n            let __PATH__=a.link.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[0];\n            let dom=syncDom(a.content);\n            let {author, title, link} = a;\n            let image=dom.document.getElementsByTagName(\"img\")[0];\n            let article={\n                author,\n                title,\n                link,\n                image: image?image.src:\"http://viralizing.me/wp-content//uploads/2017/03/60fa9bmxvpe-redd-angelo-uai-258x145.jpg\"\n            };\n            return article;\n        });\n    }\n});\n","import \"./customers\";\nimport \"./charges\";\nimport \"./refunds\";\nimport \"./transfers\";","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_charges_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n        }\n        check(user, Object);\n        check(data, {\n            amount: Number,\n            currency: String,\n            application_fee: Match.Maybe(Number),\n            capture: Match.Maybe(Boolean),\n            description: Match.Maybe(String),\n            destination: Match.Maybe(Match.ObjectIncluding({\n                account: Match.Maybe(Object),\n                amount: Match.Maybe(Number)\n            })),\n            transfer_group: Match.Maybe(String),\n            on_behalf_of: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            receipt_email: Match.Maybe(String),\n            shipping: Match.Maybe(Object),\n            customer: Match.Maybe(String),\n            source: Match.Maybe(String)\n        });\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (user && user.emails[0]) {\n            data.receipt_email = user.emails[0].address;\n        }\n\n        if (!data.source) {\n            if (!user.stripe.id) {\n                throw new Meteor.Error(500, \"[Stripe Charges] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n            }\n            data.customer = user.stripe.id;\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.create, client.charges);\n\n        return method(data);\n    },\n    \"stripe_charges_update\": function (chargeID, data) {\n        if (!chargeID) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe User Data Provided\");\n        }\n\n        check(chargeID, String);\n        check(data, {\n            description: Match.Maybe(String),\n            fraud_details: Match.Maybe(Object),\n            metadata: Match.Maybe(Object),\n            receipt_email: Match.Maybe(String),\n            destination: Match.Maybe(Match.ObjectIncluding({\n                address: Match.Maybe(Match.ObjectIncluding({\n                    line1: String,\n                    city: Match.Maybe(String),\n                    country: Match.Maybe(String),\n                    lin2: Match.Maybe(String),\n                    postal_code: Match.Maybe(String),\n                    state: Match.Maybe(String)\n                })),\n                name: String,\n                carrier: Match.Maybe(String),\n                phone: Match.Maybe(String),\n                tracking_number: Match.Maybe(String)\n            })),\n            transfer_group: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.update, client.charges);\n\n        return method(chargeID, data);\n    },\n    \"stripe_charges_get\": function (chargeID) {\n        if (!chargeID) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n        }\n\n        check(chargeID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.retrieve, client.charges);\n\n        return method(chargeID);\n    },\n    \"stripe_charges_capture\": function (chargeID, data) {\n        if (!chargeID) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Stripe Charge ID Provided\");\n        }\n\n        check(chargeID, String);\n        check(data,{\n            amount: Match.Maybe(Number),\n            application_fee: Match.Maybe(Number),\n            receipt_email: Match.Maybe(String),\n            statement_descriptor: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.capture, client.charges);\n\n        return method(chargeID,data);\n    },\n    \"stripe_charges_list\": function (query) {\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Charges] - No Query Provided\");\n        }\n\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            customer: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            source: Match.Maybe(Match.ObjectIncluding({\n                object: Match.Maybe(String)\n            })),\n            starting_after: Match.Maybe(String),\n            transfer_group: Match.Maybe(String)\n        });\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.charges.list, client.charges);\n        return method(query);\n    }\n});","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_customers_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n        }\n        check(user, Object);\n        check(data, {\n            account_balance: Match.Maybe(Number),\n            business_vat_id: Match.Maybe(String),\n            coupon: Match.Maybe(String),\n            description: Match.Maybe(String),\n            email: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            shipping: Match.Maybe(Object),\n            source: Match.Maybe(Object)\n        });\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - User (\" + user._id + \") already has a Stripe account.\");\n        }\n\n        if (user && user.emails[0]) {\n            data.email = user.emails[0].address;\n        }\n\n        if (user && user.profile) {\n            data.description = (user.profile.name || \"\") + \" \" + (user.profile.lastName || \"\") + \"-[\" + user._id + \"]\";\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.create, client.customers);\n\n        let stripeRes = method(data);\n\n        Meteor.users.update({_id: user._id}, {$set: {stripe: Object.assign({}, user.stripe, {id: stripeRes.id})}});\n\n        return stripeRes;\n    },\n    \"stripe_customers_update\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Stripe User Data Provided\");\n        }\n\n        check(user, Object);\n        check(data, {\n            account_balance: Match.Maybe(Number),\n            business_vat_id: Match.Maybe(String),\n            coupon: Match.Maybe(String),\n            default_source: Match.Maybe(String),\n            description: Match.Maybe(String),\n            email: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            shipping: Match.Maybe(Object),\n            source: Match.Maybe(Object)\n        });\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (user && user.emails[0]) {\n            data.email = user.emails[0].address;\n        }\n\n        if (!data.description && user && user.profile) {\n            data.description = (user.profile.name || \"\") + \" \" + (user.profile.lastName || \"\") + \" - [\" + user._id + \"]\";\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.update, client.customers);\n\n        let stripeRes = method(user.stripe.id, data);\n\n        return stripeRes;\n    },\n    \"stripe_customers_get\": function (user) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n\n        check(user, Object);\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user || !user.stripe || !user.stripe.id) {\n            Meteor.call(\"stripe_customers_create\",user,{});\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user || !user.stripe || !user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - User or Stripe data doesn't exist.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.retrieve, client.customers);\n\n        return method(user.stripe.id);\n    },\n    \"stripe_customers_delete\": function (user) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n\n        check(user, Object);\n\n        if (!user.emails[0] || !user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user || !user.stripe || !user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - User or Stripe data doesn't exist.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.del, client.customers);\n\n        Meteor.users.update({_id: user._id}, {$set: {stripe: {id: null, cards: []}}});\n\n        return method(user.stripe.id);\n    },\n    \"stripe_customers_list\": function (query) {\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Query Provided\");\n        }\n\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.list, client.customers);\n        return method(query);\n    }\n});","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_refunds_create\": function (data) {\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Refunds] - No Refund Data Provided\");\n        }\n        check(data, {\n            charge: String,\n            amount: Match.Maybe(Number),\n            metadata: Match.Maybe(Object),\n            reason: Match.Maybe(String),\n            refund_application_fee: Match.Maybe(String),\n            reverse_transfer: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.refunds.create, client.refunds);\n\n        return method(data);\n    },\n    \"stripe_refunds_update\": function (refundID, data) {\n        if (!refundID) {\n            throw new Meteor.Error(500, \"[Stripe Refunds] - No Stripe Refund ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Refunds] - No Stripe Refund Data Provided\");\n        }\n\n        check(refundID, String);\n        check(data, {\n            metadata: Match.Maybe(Object)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.refunds.update, client.refunds);\n\n        return method(refundID, data);\n    },\n    \"stripe_refunds_get\": function (refundID) {\n        if (!refundID) {\n            throw new Meteor.Error(500, \"[Stripe Refunds] - No Stripe Refund ID Provided\");\n        }\n\n        check(refundID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.refunds.retrieve, client.refunds);\n\n        return method(refundID);\n    },\n    \"stripe_refunds_list\": function (query) {\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Refunds] - No Query Provided\");\n        }\n\n        check(query, {\n            charge: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.refunds.list, client.refunds);\n        return method(query);\n    }\n});","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_transfers_create\": function (data) {\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Transfer Data Provided\");\n        }\n        check(data, {\n            amount: Number,\n            application_fee: Match.Maybe(Number),\n            currency: String,\n            destination: String,\n            description: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            source_transaction: Match.Maybe(String),\n            statement_descriptor: Match.Maybe(String),\n            source_type: Match.Maybe(String),\n            method: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.transfers.create, client.transfers);\n\n        return method(data);\n    },\n    \"stripe_transfers_update\": function (transferID, data) {\n        if (!transferID) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer Data Provided\");\n        }\n\n        check(transferID, String);\n        check(data, {\n            description: Match.Maybe(String),\n            metadata: Match.Maybe(Object)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.transfers.update, client.transfers);\n\n        return method(transferID, data);\n    },\n    \"stripe_transfers_get\": function (transferID) {\n        if (!transferID) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Stripe Transfer ID Provided\");\n        }\n\n        check(transferID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.transfers.retrieve, client.transfers);\n\n        return method(transferID);\n    },\n    \"stripe_transfers_list\": function (query) {\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Transfers] - No Query Provided\");\n        }\n\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            date: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            destination: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String),\n            status: Match.Maybe(String),\n            transfer_group: Match.Maybe(String)\n        });\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.transfers.list, client.transfers);\n        return method(query);\n    }\n});","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_bank_accounts_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe User Data Provided\");\n        }\n        check(user, Object);\n        check(data, {\n            source: Match.OneOf(String, Match.ObjectIncluding({\n                object: String,\n                account_number: String,\n                country: String,\n                currency: String,\n                account_holder_name: String,\n                account_holder_type: String,\n                routing_number: String\n            })),\n            metadata: Match.Maybe(Object)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.createSource, client.customers);\n\n        return method(user.stripe.id, data);\n    },\n    \"stripe_bank_accounts_update\": function (user, accountID, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!accountID) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account Data Provided\");\n        }\n\n        check(user, Object);\n        check(accountID, String);\n        check(data, {\n            account_holder_name: Match.Maybe(String),\n            account_holder_type: Match.Maybe(String),\n            metadata: Match.Maybe(Object)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.updateCard, client.customers);\n\n        return method(user.stripe.id, accountID, data);\n    },\n    \"stripe_bank_accounts_get\": function (user, accountID) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!accountID) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n        }\n\n        check(user, Object);\n        check(accountID, String);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.retrieveSource, client.customers);\n\n        return method(user.stripe.id, accountID);\n    },\n    \"stripe_bank_accounts_delete\": function (user, accountID) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!accountID) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n        }\n\n        check(user, Object);\n        check(accountID, String);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.deleteSource, client.customers);\n\n        return method(user.stripe.id, accountID);\n    },\n    \"stripe_bank_accounts_verify\": function (user, accountID, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!accountID) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe Bank Account ID Provided\");\n        }\n\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Stripe User Data Provided\");\n        }\n\n        check(user, Object);\n        check(accountID, String);\n        check(data, {\n            amounts: [Number],\n            verification_method: Match.Maybe(Object)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.verifySource, client.customers);\n\n        return method(user.stripe.id, accountID, data);\n    },\n    \"stripe_bank_accounts_list\": function (user, query) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Application User Provided\");\n        }\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - No Query Provided\");\n        }\n\n        check(user, Object);\n        check(query, {\n            object: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Bank Accounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        query.object = \"bank_account\";\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.listSources, client.customers);\n        return method(user.stripe.id, query);\n    }\n});","import \"./bank-accounts\";\nimport \"./cards\";","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_cards_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Stripe Card Data Provided\");\n        }\n        check(user, Object);\n        check(data, {\n            source: Match.OneOf(String, Match.ObjectIncluding({\n                object: String,\n                exp_month: Number,\n                exp_year: Number,\n                number: Number,\n                address_city: Match.Maybe(String),\n                address_country: Match.Maybe(String),\n                address_line1: Match.Maybe(String),\n                address_line2: Match.Maybe(String),\n                address_state: Match.Maybe(String),\n                address_zip: Match.Maybe(String),\n                currency: Match.Maybe(Object),\n                cvc: String,\n                default_for_currency: Match.Maybe(String),\n                metadata: Match.Maybe(Object),\n                name: Match.Maybe(String)\n            })),\n            metadata: Match.Maybe(Object)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.createSource, client.customers);\n\n        return method(user.stripe.id, data);\n    },\n    \"stripe_cards_update\": function (user, cardID, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n        }\n        if (!cardID) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Stripe Card ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Stripe Card Data Provided\");\n        }\n\n        check(user, Object);\n        check(cardID, String);\n        check(data, {\n            address_city: Match.Maybe(String),\n            address_country: Match.Maybe(String),\n            address_line1: Match.Maybe(String),\n            address_line2: Match.Maybe(String),\n            address_state: Match.Maybe(String),\n            address_zip: Match.Maybe(String),\n            exp_month: Match.Maybe(Number),\n            exp_year: Match.Maybe(Number),\n            metadata: Match.Maybe(Object),\n            name: Match.Maybe(String)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.updateCard, client.customers);\n\n        return method(user.stripe.id, cardID, data);\n    },\n    \"stripe_cards_get\": function (user, cardID) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n        }\n        if (!cardID) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Stripe Card ID Provided\");\n        }\n\n        check(user, Object);\n        check(cardID, String);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.retrieveCard, client.customers);\n\n        return method(user.stripe.id, cardID);\n    },\n    \"stripe_cards_delete\": function (user, cardID) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n        }\n        if (!cardID) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Card Account ID Provided\");\n        }\n\n        check(user, Object);\n        check(cardID, String);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.deleteCard, client.customers);\n\n        return method(user.stripe.id, cardID);\n    },\n    \"stripe_cards_list\": function (user, query) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Application User Provided\");\n        }\n        if (!query) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - No Query Provided\");\n        }\n\n        check(user, Object);\n        check(query, {\n            object: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.listCards, client.customers);\n        return method(user.stripe.id, query);\n    }\n});","import \"./coupons\";\nimport \"./discounts\";\nimport \"./invoices\";\nimport \"./invoice-items\";\nimport \"./plans\";\nimport \"./subscriptions\";\nimport \"./subscription-items\";","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_coupons_create\": function (data) {\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Coupons] - No Stripe Coupon Data Provided\");\n        }\n        check(data, {\n            id: Match.Maybe(String),\n            duration: Match.Where(function(duration){\n                check(duration,String);\n                if(duration===\"repeating\" && !data.duration_in_months){\n                    throw new Error(\"duration_in_months must be set when duration is repeating\");\n                }\n                if((!data.amount_off && !data.percent_off) || (data.amount_off && data.percent_off)){\n                    throw new Error(\"Either percent_off or amount_off must be set\");\n                }\n                if(data.amount_off && !data.currency){\n                    throw new Error(\"Currency must be set when amount_off is used\");\n                }\n                return true;\n            }),\n            amount_off: Match.Maybe(Match.Where(function (amount) {\n                if (data.percent_off) {\n                    return true;\n                }\n                check(amount, Number);\n                return true\n            })),\n            currency: Match.Maybe(Match.Where(function (currency) {\n                if (data.amount_off) {\n                    check(currency, String);\n                    return true;\n                }\n                return true\n            })),\n            duration_in_months: Match.Maybe(Match.Where(function (months) {\n                if (data.duration===\"repeating\") {\n                    check(months, Number);\n                    return true;\n                }\n                return true\n            })),\n            max_redemptions: Match.Maybe(Number),\n            metadata: Match.Maybe(Object),\n            percent_off: Match.Maybe(Match.Where(function (amount) {\n                if (data.amount_off) {\n                    return true;\n                }\n                check(amount, Number);\n                return true\n            })),\n            redeem_by: Match.Maybe(Number)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.coupons.create, client.coupons);\n\n        return method(data);\n    },\n    \"stripe_coupons_update\": function (couponID, data) {\n        if (!couponID) {\n            throw new Meteor.Error(500, \"[Stripe Coupons] - No Stripe Coupon ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Coupons] - No Stripe Coupon Data Provided\");\n        }\n\n        check(couponID, String);\n        check(data, {\n            metadata: Match.Maybe(Object)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.coupons.update, client.coupons);\n\n        return method(couponID, data);\n    },\n    \"stripe_coupons_get\": function (couponID) {\n        if (!couponID) {\n            throw new Meteor.Error(500, \"[Stripe Coupons] - No Stripe Coupon ID Provided\");\n        }\n\n        check(couponID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.coupons.retrieve, client.coupons);\n\n        return method(couponID);\n    },\n    \"stripe_coupons_delete\": function (couponID) {\n        if (!couponID) {\n            throw new Meteor.Error(500, \"[Stripe Coupons] - No Coupon ID Provided\");\n        }\n\n        check(couponID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.coupons.del, client.coupons);\n\n        return method(couponID);\n    },\n    \"stripe_coupons_list\": function (query) {\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.coupons.list, client.coupons);\n        return method(query);\n    }\n});","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_discounts_delete_from_customer\": function (user) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Discounts] - No Application User Provided\");\n        }\n\n        check(user, Object);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Discounts] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.customers.deleteDiscount, client.customers);\n\n        return method(user.stripe.id);\n    },\n    \"stripe_discounts_delete_from_subscription\": function (subscriptionID) {\n        if (!subscriptionID) {\n            throw new Meteor.Error(500, \"[Stripe Discounts] - No Subscription ID Provided\");\n        }\n\n        check(subscriptionID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.subscriptions.deleteDiscount, client.subscriptions);\n\n        return method(subscriptionID);\n    }\n});","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_invoice_items_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Stripe Invoice Item Data Provided\");\n        }\n        check(user, Object);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Invoice Items] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        data.customer = user.stripe.id;\n\n        check(data, {\n            amount: Number,\n            currency: String,\n            customer: String,\n            description: Match.Maybe(String),\n            discountable: Match.Maybe(Boolean),\n            invoice: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            subscription: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoiceItems.create, client.invoiceItems);\n\n        return method(data);\n    },\n    \"stripe_invoice_items_update\": function (subscriptionID, data) {\n        if (!subscriptionID) {\n            throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Stripe Invoice Item ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Stripe Invoice Item Data Provided\");\n        }\n\n        check(subscriptionID, String);\n        check(data, {\n            amount: Number,\n            description: Match.Maybe(String),\n            discountable: Match.Maybe(Boolean),\n            metadata: Match.Maybe(Object)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoiceItems.update, client.invoiceItems);\n\n        return method(subscriptionID, data);\n    },\n    \"stripe_invoice_items_get\": function (subscriptionID) {\n        if (!subscriptionID) {\n            throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Stripe Invoice Item ID Provided\");\n        }\n\n        check(subscriptionID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoiceItems.retrieve, client.invoiceItems);\n\n        return method(subscriptionID);\n    },\n    \"stripe_invoice_items_delete\": function (subscriptionID) {\n        if (!subscriptionID) {\n            throw new Meteor.Error(500, \"[Stripe Invoice Items] - No Invoice Item ID Provided\");\n        }\n\n        check(subscriptionID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoiceItems.del, client.invoiceItems);\n\n        return method(subscriptionID);\n    },\n    \"stripe_invoice_items_list\": function (query) {\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            customer: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoiceItems.list, client.invoiceItems);\n        return method(query);\n    }\n});","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_invoices_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice Data Provided\");\n        }\n        check(user, Object);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        data.customer = user.stripe.id;\n\n        check(data, {\n            customer: String,\n            application_fee: Match.Maybe(String),\n            description: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            statement_descriptor: Match.Maybe(String),\n            subscription: Match.Maybe(String),\n            tax_percent: Match.Maybe(Number)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.create, client.invoices);\n\n        return method(data);\n    },\n    \"stripe_invoices_update\": function (invoiceID, data) {\n        if (!invoiceID) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice Data Provided\");\n        }\n\n        check(invoiceID, String);\n        check(data, {\n            application_fee: Match.Maybe(String),\n            closed: Match.Maybe(Boolean),\n            description: Match.Maybe(String),\n            forgiven: Match.Maybe(Boolean),\n            metadata: Match.Maybe(Object),\n            statement_descriptor: Match.Maybe(String),\n            subscription: Match.Maybe(String),\n            tax_percent: Match.Maybe(Number),\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.update, client.invoices);\n\n        return method(invoiceID, data);\n    },\n    \"stripe_invoices_get\": function (invoiceID) {\n        if (!invoiceID) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n        }\n\n        check(invoiceID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.retrieve, client.invoices);\n\n        return method(invoiceID);\n    },\n    \"stripe_invoices_get_items\": function (invoiceID, query) {\n        if (!invoiceID) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n        }\n\n        check(invoiceID, String);\n        check(query, {\n            coupon: Match.Maybe(String),\n            customer: Match.Maybe(String),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String),\n            subscription: Match.Maybe(String),\n            subscription_items: Match.Maybe(Match.ObjectIncluding({\n                id: Match.Maybe(String),\n                deleted: Match.Maybe(String),\n                plan: Match.Maybe(String),\n                quantity: Match.Maybe(String)\n            })),\n            subscription_plan: Match.Maybe(String),\n            subscription_prorate: Match.Maybe(String),\n            subscription_proration_date: Match.Maybe(String),\n            subscription_quantity: Match.Maybe(String),\n            subscription_tax_percent: Match.Maybe(String),\n            subscription_trial_end: Match.Maybe(String)\n\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.retrieveLines, client.invoices);\n\n        return method(invoiceID);\n    },\n    \"stripe_invoices_get_upcoming\": function (user, query) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Application User Provided\");\n        }\n\n        check(user, Object);\n        check(query, {\n            coupon: Match.Maybe(String),\n            subscription: Match.Maybe(String),\n            subscription_items: Match.Maybe(Match.ObjectIncluding({\n                id: Match.Maybe(String),\n                deleted: Match.Maybe(String),\n                plan: Match.Maybe(String),\n                quantity: Match.Maybe(String)\n            })),\n            subscription_plan: Match.Maybe(String),\n            subscription_prorate: Match.Maybe(String),\n            subscription_proration_date: Match.Maybe(String),\n            subscription_quantity: Match.Maybe(String),\n            subscription_tax_percent: Match.Maybe(String),\n            subscription_trial_end: Match.Maybe(String)\n        });\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.retrieveUpcoming, client.invoices);\n\n        return method(user.stripe.id, query);\n    },\n    \"stripe_invoices_pay\": function (invoiceID) {\n        if (!invoiceID) {\n            throw new Meteor.Error(500, \"[Stripe Invoices] - No Stripe Invoice ID Provided\");\n        }\n\n        check(invoiceID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.pay, client.invoices);\n\n        return method(invoiceID);\n    },\n    \"stripe_invoices_list\": function (query) {\n        check(query, {\n            customer: Match.Maybe(String),\n            date: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.invoices.list, client.invoices);\n        return method(query);\n    }\n});","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_plans_create\": function (data) {\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Plans] - No Stripe Plan Data Provided\");\n        }\n        check(data, {\n            id: String,\n            amount: Number,\n            currency: String,\n            interval: String,\n            name: String,\n            interval_count: Match.Maybe(String),\n            metadata: Match.Maybe(Object),\n            statement_descriptor: Match.Maybe(String),\n            trial_period_days: Match.Maybe(Number)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.plans.create, client.plans);\n\n        return method(data);\n    },\n    \"stripe_plans_update\": function (planID, data) {\n        if (!planID) {\n            throw new Meteor.Error(500, \"[Stripe Plans] - No Stripe Plan ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Plans] - No Stripe Plan Data Provided\");\n        }\n\n        check(planID, String);\n        check(data, {\n            metadata: Match.Maybe(Object),\n            name: Match.Maybe(String),\n            statement_descriptor: Match.Maybe(String),\n            trial_period_days: Match.Maybe(Number)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.plans.update, client.plans);\n\n        return method(planID, data);\n    },\n    \"stripe_plans_get\": function (planID) {\n        if (!planID) {\n            throw new Meteor.Error(500, \"[Stripe Plans] - No Stripe Plan ID Provided\");\n        }\n\n        check(planID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.plans.retrieve, client.plans);\n\n        return method(planID);\n    },\n    \"stripe_plans_delete\": function (planID) {\n        if (!planID) {\n            throw new Meteor.Error(500, \"[Stripe Plans] - No Plan ID Provided\");\n        }\n\n        check(planID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.plans.del, client.plans);\n\n        return method(planID);\n    },\n    \"stripe_plans_list\": function (query) {\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.plans.list, client.plans);\n        return method(query);\n    }\n});","//TODO: Subscription Items","import StripeConnection from \"../connection\";\nimport {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport {Match} from \"meteor/check\";\n\nMeteor.methods({\n    \"stripe_subscriptions_create\": function (user, data) {\n        if (!user) {\n            throw new Meteor.Error(500, \"[Stripe Customers] - No Application User Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Stripe Subscription Data Provided\");\n        }\n        check(user, Object);\n\n        if (!user.stripe) {\n            user = Meteor.users.findOne({_id: user._id});\n        }\n\n        if (!user.stripe.id) {\n            throw new Meteor.Error(500, \"[Stripe Cards] - User (\" + user._id + \") does not have a Stripe ID & no source defined.\");\n        }\n\n        data.customer = user.stripe.id;\n\n        check(data, {\n            customer: Match.Where(function (customer) {\n                check(customer, String);\n                if ((!data.items && !data.plan) || (data.items && data.plan)) {\n                    throw new Meteor.Error(500, \"[Stripe Subscriptions] - Either Items or Plan must be provided\");\n                }\n                if (data.items && data.items.length === 0) {\n                    throw new Meteor.Error(500, \"[Stripe Subscriptions] - Items must have at least 1 plan\");\n                }\n                return true;\n            }),\n            application_fee_percent: Match.Maybe(String),\n            coupon: Match.Maybe(String),\n            items: Match.Maybe([Match.ObjectIncluding({\n                plan: String,\n                quantity: Match.Maybe(Number)\n            })]),\n            metadata: Match.Maybe(Object),\n            plan: Match.Maybe(String),\n            prorate: Match.Maybe(String),\n            quantity: Match.Maybe(Number),\n            source: Match.Maybe(String),\n            tax_percent: Match.Maybe(Number),\n            trial_end: Match.Maybe(Number),\n            trial_period_days: Match.Maybe(Number)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.subscriptions.create, client.subscriptions);\n\n        return method(data);\n    },\n    \"stripe_subscriptions_update\": function (subscriptionID, data) {\n        if (!subscriptionID) {\n            throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Stripe Subscription ID Provided\");\n        }\n        if (!data) {\n            throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Stripe Subscription Data Provided\");\n        }\n\n        check(subscriptionID, String);\n        check(data, {\n            application_fee_percent: Match.Maybe(String),\n            coupon: Match.Maybe(String),\n            items: Match.Maybe([Match.ObjectIncluding({\n                plan: String,\n                quantity: Match.Maybe(Number)\n            })]),\n            metadata: Match.Maybe(Object),\n            plan: Match.Maybe(String),\n            prorate: Match.Maybe(String),\n            proration_date: Match.Maybe(String),\n            quantity: Match.Maybe(Number),\n            source: Match.Maybe(String),\n            tax_percent: Match.Maybe(Number),\n            trial_end: Match.Maybe(Number)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.subscriptions.update, client.subscriptions);\n\n        return method(subscriptionID, data);\n    },\n    \"stripe_subscriptions_get\": function (subscriptionID) {\n        if (!subscriptionID) {\n            throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Stripe Subscription ID Provided\");\n        }\n\n        check(subscriptionID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.subscriptions.retrieve, client.subscriptions);\n\n        return method(subscriptionID);\n    },\n    \"stripe_subscriptions_delete\": function (subscriptionID) {\n        if (!subscriptionID) {\n            throw new Meteor.Error(500, \"[Stripe Subscriptions] - No Subscription ID Provided\");\n        }\n\n        check(subscriptionID, String);\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.subscriptions.del, client.subscriptions);\n\n        return method(subscriptionID);\n    },\n    \"stripe_subscriptions_list\": function (query) {\n        check(query, {\n            created: Match.Maybe(Match.ObjectIncluding({\n                gt: Match.Maybe(String),\n                gte: Match.Maybe(String),\n                lt: Match.Maybe(String),\n                lte: Match.Maybe(String)\n            })),\n            ending_before: Match.Maybe(String),\n            limit: Match.Maybe(Number),\n            starting_after: Match.Maybe(String)\n        });\n\n        let client = StripeConnection();\n        let method = Meteor.wrapAsync(client.subscriptions.list, client.subscriptions);\n        return method(query);\n    }\n});","import \"./core/bundle\";\nimport \"./payment-methods/bundle\";\nimport \"./subscriptions/bundle\";","import Stripe from 'stripe';\n\nlet StripeConneciton = function () {\n    let client = Stripe(Meteor.settings.private.stripe.secretKey);\n    return client\n};\n\nexport default StripeConneciton;","import \"./social-connect\";\nimport \"./methods\";\nimport \"./image-upload\";\nimport \"./invites\";\nimport \"./fake-accounts\";","import {Meteor} from 'meteor/meteor';\nimport Schema from \"../../../server/schemas/accounts/schema\";\nimport faker from \"faker\";\nimport Countries from \"../../../constants/countries\";\nimport _ from \"lodash\";\n\n\nconst isoLangs = {\n    \"ab\": {\"name\": \"Abkhaz\", \"code\": \"ab\", \"native\": \"аҧсуа\", \"icon\": \"flag-icon-ru\"},\n    \"aa\": {\"name\": \"Afar\", \"code\": \"aa\", \"native\": \"Afaraf\", \"icon\": \"flag-icon-et\"},\n    \"af\": {\"name\": \"Afrikaans\", \"code\": \"af\", \"native\": \"Afrikaans\", \"icon\": \"flag-icon-za\"},\n    \"ak\": {\"name\": \"Akan\", \"code\": \"ak\", \"native\": \"Akan\", \"icon\": \"flag-icon-gh\"},\n    \"sq\": {\"name\": \"Albanian\", \"code\": \"sq\", \"native\": \"Shqip\", \"icon\": \"flag-icon-al\"},\n    \"am\": {\"name\": \"Amharic\", \"code\": \"am\", \"native\": \"አማርኛ\", \"icon\": \"flag-icon-et\"},\n    \"ar\": {\"name\": \"Arabic\", \"code\": \"ar\", \"native\": \"العربية\", \"icon\": \"flag-icon-sa\"},\n    \"an\": {\"name\": \"Aragonese\", \"code\": \"an\", \"native\": \"Aragonés\", \"icon\": \"flag-icon-es\"},\n    \"hy\": {\"name\": \"Armenian\", \"code\": \"hy\", \"native\": \"Հայերեն\", \"icon\": \"flag-icon-am\"},\n    \"as\": {\"name\": \"Assamese\", \"code\": \"as\", \"native\": \"অসমীয়া\", \"icon\": \"flag-icon-in\"},\n    \"av\": {\"name\": \"Avaric\", \"code\": \"av\", \"native\": \"авар мацӀ, магӀарул мацӀ\", \"icon\": \"flag-icon-ru\"},\n    \"ay\": {\"name\": \"Aymara\", \"code\": \"ay\", \"native\": \"aymar aru\", \"icon\": \"flag-icon-cl\"},\n    \"az\": {\"name\": \"Azerbaijani\", \"code\": \"az\", \"native\": \"azərbaycan dili\", \"icon\": \"flag-icon-az\"},\n    \"bm\": {\"name\": \"Bambara\", \"code\": \"bm\", \"native\": \"Bamanankan\", \"icon\": \"flag-icon-ml\"},\n    \"ba\": {\"name\": \"Bashkir\", \"code\": \"ba\", \"native\": \"башҡорт теле\", \"icon\": \"flag-icon-ru\"},\n    \"eu\": {\"name\": \"Basque\", \"code\": \"eu\", \"native\": \"Euskara, euskera\", \"icon\": \"flag-icon-es\"},\n    \"be\": {\"name\": \"Belarusian\", \"code\": \"be\", \"native\": \"Беларуская\", \"icon\": \"flag-icon-by\"},\n    \"bn\": {\"name\": \"Bengali\", \"code\": \"bn\", \"native\": \"বাংলা\", \"icon\": \"flag-icon-in\"},\n    \"bh\": {\"name\": \"Bihari\", \"code\": \"bh\", \"native\": \"भोजपुरी\", \"icon\": \"flag-icon-in\"},\n    \"bi\": {\"name\": \"Bislama\", \"code\": \"bi\", \"native\": \"Bislama\", \"icon\": \"flag-icon-vu\"},\n    \"bs\": {\"name\": \"Bosnian\", \"code\": \"bs\", \"native\": \"Bosanski jezik\", \"icon\": \"flag-icon-ba\"},\n    \"br\": {\"name\": \"Breton\", \"code\": \"br\", \"native\": \"Brezhoneg\", \"icon\": \"flag-icon-fr\"},\n    \"bg\": {\"name\": \"Bulgarian\", \"code\": \"bg\", \"native\": \"български език\", \"icon\": \"flag-icon-bg\"},\n    \"my\": {\"name\": \"Burmese\", \"code\": \"my\", \"native\": \"ဗမာစာ\", \"icon\": \"flag-icon-mm\"},\n    \"ca\": {\"name\": \"Catalan\", \"code\": \"ca\", \"native\": \"Català\", \"icon\": \"flag-icon-ad\"},\n    \"ch\": {\"name\": \"Chamorro\", \"code\": \"ch\", \"native\": \"Chamoru\", \"icon\": \"flag-icon-gu\"},\n    \"ce\": {\"name\": \"Chechen\", \"code\": \"ce\", \"native\": \"нохчийн мотт\", \"icon\": \"flag-icon-ru\"},\n    \"ny\": {\"name\": \"Chichewa\", \"code\": \"ny\", \"native\": \"ChiCheŵa\", \"icon\": \"flag-icon-mw\"},\n    \"zh\": {\"name\": \"Chinese\", \"code\": \"zh\", \"native\": \"中文\", \"icon\": \"flag-icon-cn\"},\n    \"cv\": {\"name\": \"Chuvash\", \"code\": \"cv\", \"native\": \"чӑваш чӗлхи\", \"icon\": \"flag-icon-ru\"},\n    \"kw\": {\"name\": \"Cornish\", \"code\": \"kw\", \"native\": \"Kernewek\", \"icon\": \"flag-icon-gb\"},\n    \"co\": {\"name\": \"Corsican\", \"code\": \"co\", \"native\": \"Corsu, lingua corsa\", \"icon\": \"flag-icon-fr\"},\n    \"cr\": {\"name\": \"Cree\", \"code\": \"cr\", \"native\": \"ᓀᐦᐃᔭᐍᐏᐣ\", \"icon\": \"flag-icon-ca\"},\n    \"hr\": {\"name\": \"Croatian\", \"code\": \"hr\", \"native\": \"Hrvatski\", \"icon\": \"flag-icon-hr\"},\n    \"cs\": {\"name\": \"Czech\", \"code\": \"cs\", \"native\": \"česky, čeština\", \"icon\": \"flag-icon-cz\"},\n    \"da\": {\"name\": \"Danish\", \"code\": \"da\", \"native\": \"Dansk\", \"icon\": \"flag-icon-dk\"},\n    \"dv\": {\"name\": \"Divehi\", \"code\": \"dv\", \"native\": \"ދިވެހި\", \"icon\": \"flag-icon-mv\"},\n    \"nl\": {\"name\": \"Dutch\", \"code\": \"nl\", \"native\": \"Nederlands, Vlaams\", \"icon\": \"flag-icon-nl\"},\n    \"en\": {\"name\": \"English\", \"code\": \"en\", \"native\": \"English\", \"icon\": \"flag-icon-us\"},\n    \"et\": {\"name\": \"Estonian\", \"code\": \"et\", \"native\": \"Eesti, eesti keel\", \"icon\": \"flag-icon-ee\"},\n    \"ee\": {\"name\": \"Ewe\", \"code\": \"ee\", \"native\": \"Eʋegbe\", \"icon\": \"flag-icon-gh\"},\n    \"fo\": {\"name\": \"Faroese\", \"code\": \"fo\", \"native\": \"føroyskt\", \"icon\": \"flag-icon-dk\"},\n    \"fj\": {\"name\": \"Fijian\", \"code\": \"fj\", \"native\": \"vosa Vakaviti\", \"icon\": \"flag-icon-fj\"},\n    \"fi\": {\"name\": \"Finnish\", \"code\": \"fi\", \"native\": \"suomi, suomen kieli\", \"icon\": \"flag-icon-fi\"},\n    \"fr\": {\"name\": \"French\", \"code\": \"fr\", \"native\": \"français\", \"icon\": \"flag-icon-fr\"},\n    \"gl\": {\"name\": \"Galician\", \"code\": \"gl\", \"native\": \"Galego\", \"icon\": \"flag-icon-es\"},\n    \"ka\": {\"name\": \"Georgian\", \"code\": \"ka\", \"native\": \"ქართული\", \"icon\": \"flag-icon-ge\"},\n    \"de\": {\"name\": \"German\", \"code\": \"de\", \"native\": \"Deutsch\", \"icon\": \"flag-icon-de\"},\n    \"el\": {\"name\": \"Greek\", \"code\": \"el\", \"native\": \"Ελληνικά\", \"icon\": \"flag-icon-gr\"},\n    \"gn\": {\"name\": \"Guaraní\", \"code\": \"gn\", \"native\": \"Avañeẽ\", \"icon\": \"flag-icon-py\"},\n    \"gu\": {\"name\": \"Gujarati\", \"code\": \"gu\", \"native\": \"ગુજરાતી\", \"icon\": \"flag-icon-in\"},\n    \"ht\": {\"name\": \"Haitian\", \"code\": \"ht\", \"native\": \"Kreyòl ayisyen\", \"icon\": \"flag-icon-ht\"},\n    \"ha\": {\"name\": \"Hausa\", \"code\": \"ha\", \"native\": \"Hausa, هَوُسَ\", \"icon\": \"flag-icon-ng\"},\n    \"he\": {\"name\": \"Hebrew\", \"code\": \"he\", \"native\": \"עברית\", \"icon\": \"flag-icon-il\"},\n    \"hi\": {\"name\": \"Hindi\", \"code\": \"hi\", \"native\": \"हिन्दी, हिंदी\", \"icon\": \"flag-icon-in\"},\n    \"ho\": {\"name\": \"Hiri Motu\", \"code\": \"ho\", \"native\": \"Hiri Motu\", \"icon\": \"flag-icon-pg\"},\n    \"hu\": {\"name\": \"Hungarian\", \"code\": \"hu\", \"native\": \"Magyar\", \"icon\": \"flag-icon-hu\"},\n    \"id\": {\"name\": \"Indonesian\", \"code\": \"id\", \"native\": \"Bahasa Indonesia\", \"icon\": \"flag-icon-id\"},\n    \"ga\": {\"name\": \"Irish\", \"code\": \"ga\", \"native\": \"Gaeilge\", \"icon\": \"flag-icon-gb\"},\n    \"ig\": {\"name\": \"Igbo\", \"code\": \"ig\", \"native\": \"Asụsụ Igbo\", \"icon\": \"flag-icon-ng\"},\n    \"ik\": {\"name\": \"Inupiaq\", \"code\": \"ik\", \"native\": \"Iñupiaq, Iñupiatun\", \"icon\": \"flag-icon-us\"},\n    \"is\": {\"name\": \"Icelandic\", \"code\": \"is\", \"native\": \"Íslenska\", \"icon\": \"flag-icon-is\"},\n    \"it\": {\"name\": \"Italian\", \"code\": \"it\", \"native\": \"Italiano\", \"icon\": \"flag-icon-it\"},\n    \"iu\": {\"name\": \"Inuktitut\", \"code\": \"iu\", \"native\": \"ᐃᓄᒃᑎᑐᑦ\", \"icon\": \"flag-icon-ca\"},\n    \"ja\": {\"name\": \"Japanese\", \"code\": \"ja\", \"native\": \"日本語\", \"icon\": \"flag-icon-jp\"},\n    \"jv\": {\"name\": \"Javanese\", \"code\": \"jv\", \"native\": \"basa Jawa\", \"icon\": \"flag-icon-id\"},\n    \"kl\": {\"name\": \"Kalaallisut\", \"code\": \"kl\", \"native\": \"kalaallisut\", \"icon\": \"flag-icon-gl\"},\n    \"kn\": {\"name\": \"Kannada\", \"code\": \"kn\", \"native\": \"ಕನ್ನಡ\", \"icon\": \"flag-icon-in\"},\n    \"kr\": {\"name\": \"Kanuri\", \"code\": \"kr\", \"native\": \"Kanuri\", \"icon\": \"flag-icon-ng\"},\n    \"ks\": {\"name\": \"Kashmiri\", \"code\": \"ks\", \"native\": \"कश्मीरी, كشميري‎\", \"icon\": \"flag-icon-in\"},\n    \"kk\": {\"name\": \"Kazakh\", \"code\": \"kk\", \"native\": \"Қазақ тілі\", \"icon\": \"flag-icon-kz\"},\n    \"km\": {\"name\": \"Khmer\", \"code\": \"km\", \"native\": \"ភាសាខ្មែរ\", \"icon\": \"flag-icon-kh\"},\n    \"ki\": {\"name\": \"Kikuyu\", \"code\": \"ki\", \"native\": \"Gĩkũyũ\", \"icon\": \"flag-icon-ke\"},\n    \"rw\": {\"name\": \"Kinyarwanda\", \"code\": \"rw\", \"native\": \"Ikinyarwanda\", \"icon\": \"flag-icon-rw\"},\n    \"ky\": {\"name\": \"Kirghiz\", \"code\": \"ky\", \"native\": \"кыргыз тили\", \"icon\": \"flag-icon-kg\"},\n    \"kv\": {\"name\": \"Komi\", \"code\": \"kv\", \"native\": \"коми кыв\", \"icon\": \"flag-icon-ru\"},\n    \"kg\": {\"name\": \"Kongo\", \"code\": \"kg\", \"native\": \"KiKongo\", \"icon\": \"flag-icon-cd\"},\n    \"ko\": {\"name\": \"Korean\", \"code\": \"ko\", \"native\": \"한국어\", \"icon\": \"flag-icon-kr\"},\n    \"ku\": {\"name\": \"Kurdish\", \"code\": \"ku\", \"native\": \"كوردی‎\", \"icon\": \"flag-icon-iq\"},\n    \"kj\": {\"name\": \"Kwanyama\", \"code\": \"kj\", \"native\": \"Kuanyama\", \"icon\": \"flag-icon-ao\"},\n    \"lb\": {\"name\": \"Luxembourgish\", \"code\": \"lb\", \"native\": \"Lëtzebuergesch\", \"icon\": \"flag-icon-lu\"},\n    \"lg\": {\"name\": \"Luganda\", \"code\": \"lg\", \"native\": \"Luganda\", \"icon\": \"flag-icon-ug\"},\n    \"li\": {\"name\": \"Limburgish\", \"code\": \"li\", \"native\": \"Limburgs\", \"icon\": \"flag-icon-nl\"},\n    \"ln\": {\"name\": \"Lingala\", \"code\": \"ln\", \"native\": \"Lingála\", \"icon\": \"flag-icon-cd\"},\n    \"lo\": {\"name\": \"Lao\", \"code\": \"lo\", \"native\": \"ພາສາລາວ\", \"icon\": \"flag-icon-la\"},\n    \"lt\": {\"name\": \"Lithuanian\", \"code\": \"lt\", \"native\": \"lietuvių kalba\", \"icon\": \"flag-icon-lt\"},\n    \"lv\": {\"name\": \"Latvian\", \"code\": \"lv\", \"native\": \"latviešu valoda\", \"icon\": \"flag-icon-lv\"},\n    \"gv\": {\"name\": \"Manx\", \"code\": \"gv\", \"native\": \"Gaelg, Gailck\", \"icon\": \"flag-icon-im\"},\n    \"mk\": {\"name\": \"Macedonian\", \"code\": \"mk\", \"native\": \"македонски јазик\", \"icon\": \"flag-icon-mk\"},\n    \"mg\": {\"name\": \"Malagasy\", \"code\": \"mg\", \"native\": \"Malagasy fiteny\", \"icon\": \"flag-icon-mg\"},\n    \"ms\": {\"name\": \"Malay\", \"code\": \"ms\", \"native\": \"بهاس ملايو‎\", \"icon\": \"flag-icon-my\"},\n    \"ml\": {\"name\": \"Malayalam\", \"code\": \"ml\", \"native\": \"മലയാളം\", \"icon\": \"flag-icon-in\"},\n    \"mt\": {\"name\": \"Maltese\", \"code\": \"mt\", \"native\": \"Malti\", \"icon\": \"flag-icon-mt\"},\n    \"mi\": {\"name\": \"Māori\", \"code\": \"mi\", \"native\": \"te reo Māori\", \"icon\": \"flag-icon-nz\"},\n    \"mr\": {\"name\": \"Marathi\", \"code\": \"mr\", \"native\": \"मराठी\", \"icon\": \"flag-icon-in\"},\n    \"mh\": {\"name\": \"Marshallese\", \"code\": \"mh\", \"native\": \"Kajin M̧ajeļ\", \"icon\": \"flag-icon-mh\"},\n    \"mn\": {\"name\": \"Mongolian\", \"code\": \"mn\", \"native\": \"монгол\", \"icon\": \"flag-icon-mn\"},\n    \"na\": {\"name\": \"Nauru\", \"code\": \"na\", \"native\": \"Ekakairũ Naoero\", \"icon\": \"flag-icon-nr\"},\n    \"nv\": {\"name\": \"Navajo\", \"code\": \"nv\", \"native\": \"Diné bizaad, Dinékʼehǰí\", \"icon\": \"flag-icon-us\"},\n    \"nb\": {\"name\": \"Norwegian Bokmål\", \"code\": \"nb\", \"native\": \"Norsk bokmål\", \"icon\": \"flag-icon-no\"},\n    \"nd\": {\"name\": \"North Ndebele\", \"code\": \"nd\", \"native\": \"isiNdebele\", \"icon\": \"flag-icon-zw\"},\n    \"ne\": {\"name\": \"Nepali\", \"code\": \"ne\", \"native\": \"नेपाली\", \"icon\": \"flag-icon-np\"},\n    \"ng\": {\"name\": \"Ndonga\", \"code\": \"ng\", \"native\": \"Owambo\", \"icon\": \"flag-icon-ao\"},\n    \"nn\": {\"name\": \"Norwegian Nynorsk\", \"code\": \"nn\", \"native\": \"Norsk nynorsk\", \"icon\": \"flag-icon-no\"},\n    \"no\": {\"name\": \"Norwegian\", \"code\": \"no\", \"native\": \"Norsk\", \"icon\": \"flag-icon-no\"},\n    \"ii\": {\"name\": \"Nuosu\", \"code\": \"ii\", \"native\": \"ꆈꌠ꒿ Nuosuhxop\", \"icon\": \"flag-icon-cn\"},\n    \"nr\": {\"name\": \"South Ndebele\", \"code\": \"nr\", \"native\": \"isiNdebele\", \"icon\": \"flag-icon-za\"},\n    \"oc\": {\"name\": \"Occitan\", \"code\": \"oc\", \"native\": \"Occitan\", \"icon\": \"flag-icon-es\"},\n    \"oj\": {\"name\": \"Ojibwe\", \"code\": \"oj\", \"native\": \"ᐊᓂᔑᓈᐯᒧᐎᓐ\", \"icon\": \"flag-icon-ca\"},\n    \"om\": {\"name\": \"Oromo\", \"code\": \"om\", \"native\": \"Afaan Oromoo\", \"icon\": \"flag-icon-et\"},\n    \"or\": {\"name\": \"Oriya\", \"code\": \"or\", \"native\": \"ଓଡ଼ିଆ\", \"icon\": \"flag-icon-in\"},\n    \"os\": {\"name\": \"Ossetian\", \"code\": \"os\", \"native\": \"ирон æвзаг\", \"icon\": \"flag-icon-ru\"},\n    \"pa\": {\"name\": \"Panjabi, Punjabi\", \"code\": \"pa\", \"native\": \"ਪੰਜਾਬੀ, پنجابی‎\", \"icon\": \"flag-icon-in\"},\n    \"pi\": {\"name\": \"Pāli\", \"code\": \"pi\", \"native\": \"पाऴि\", \"icon\": \"flag-icon-in\"},\n    \"fa\": {\"name\": \"Persian\", \"code\": \"fa\", \"native\": \"فارسی\", \"icon\": \"flag-icon-ir\"},\n    \"pl\": {\"name\": \"Polish\", \"code\": \"pl\", \"native\": \"polski\", \"icon\": \"flag-icon-pl\"},\n    \"ps\": {\"name\": \"Pashto\", \"code\": \"ps\", \"native\": \"پښتو\", \"icon\": \"flag-icon-af\"},\n    \"pt\": {\"name\": \"Portuguese\", \"code\": \"pt\", \"native\": \"Português\", \"icon\": \"flag-icon-pt\"},\n    \"qu\": {\"name\": \"Quechua\", \"code\": \"qu\", \"native\": \"Runa Simi, Kichwa\", \"icon\": \"flag-icon-ar\"},\n    \"rm\": {\"name\": \"Romansh\", \"code\": \"rm\", \"native\": \"rumantsch grischun\", \"icon\": \"flag-icon-ch\"},\n    \"rn\": {\"name\": \"Kirundi\", \"code\": \"rn\", \"native\": \"kiRundi\", \"icon\": \"flag-icon-bi\"},\n    \"ro\": {\"name\": \"Romanian\", \"code\": \"ro\", \"native\": \"română\", \"icon\": \"flag-icon-ro\"},\n    \"ru\": {\"name\": \"Russian\", \"code\": \"ru\", \"native\": \"русский язык\", \"icon\": \"flag-icon-ru\"},\n    \"sa\": {\"name\": \"Sanskrit\", \"code\": \"sa\", \"native\": \"संस्कृतम्\", \"icon\": \"flag-icon-in\"},\n    \"sc\": {\"name\": \"Sardinian\", \"code\": \"sc\", \"native\": \"sardu\", \"icon\": \"flag-icon-it\"},\n    \"sd\": {\"name\": \"Sindhi\", \"code\": \"sd\", \"native\": \"सिन्धी, سنڌي، سندھی‎\", \"icon\": \"flag-icon-pk\"},\n    \"se\": {\"name\": \"Northern Sami\", \"code\": \"se\", \"native\": \"Davvisámegiella\", \"icon\": \"flag-icon-no\"},\n    \"sm\": {\"name\": \"Samoan\", \"code\": \"sm\", \"native\": \"gagana faa Samoa\", \"icon\": \"flag-icon-ws\"},\n    \"sg\": {\"name\": \"Sango\", \"code\": \"sg\", \"native\": \"yângâ tî sängö\", \"icon\": \"flag-icon-cf\"},\n    \"sr\": {\"name\": \"Serbian\", \"code\": \"sr\", \"native\": \"српски језик\", \"icon\": \"flag-icon-rs\"},\n    \"gd\": {\"name\": \"Gaelic\", \"code\": \"gd\", \"native\": \"Gàidhlig\", \"icon\": \"flag-icon-gb\"},\n    \"sn\": {\"name\": \"Shona\", \"code\": \"sn\", \"native\": \"chiShona\", \"icon\": \"flag-icon-zw\"},\n    \"si\": {\"name\": \"Sinhala\", \"code\": \"si\", \"native\": \"සිංහල\", \"icon\": \"flag-icon-lk\"},\n    \"sk\": {\"name\": \"Slovak\", \"code\": \"sk\", \"native\": \"slovenčina\", \"icon\": \"flag-icon-sk\"},\n    \"sl\": {\"name\": \"Slovene\", \"code\": \"sl\", \"native\": \"slovenščina\", \"icon\": \"flag-icon-si\"},\n    \"so\": {\"name\": \"Somali\", \"code\": \"so\", \"native\": \"Soomaaliga, af Soomaali\", \"icon\": \"flag-icon-so\"},\n    \"st\": {\"name\": \"Southern Sotho\", \"code\": \"st\", \"native\": \"Sesotho\", \"icon\": \"flag-icon-za\"},\n    \"es\": {\"name\": \"Spanish\", \"code\": \"es\", \"native\": \"Español\", \"icon\": \"flag-icon-mx\"},\n    \"su\": {\"name\": \"Sundanese\", \"code\": \"su\", \"native\": \"Basa Sunda\", \"icon\": \"flag-icon-id\"},\n    \"sw\": {\"name\": \"Swahili\", \"code\": \"sw\", \"native\": \"Kiswahili\", \"icon\": \"flag-icon-tz\"},\n    \"ss\": {\"name\": \"Swati\", \"code\": \"ss\", \"native\": \"SiSwati\", \"icon\": \"flag-icon-sz\"},\n    \"sv\": {\"name\": \"Swedish\", \"code\": \"sv\", \"native\": \"svenska\", \"icon\": \"flag-icon-se\"},\n    \"ta\": {\"name\": \"Tamil\", \"code\": \"ta\", \"native\": \"தமிழ்\", \"icon\": \"flag-icon-in\"},\n    \"te\": {\"name\": \"Telugu\", \"code\": \"te\", \"native\": \"తెలుగు\", \"icon\": \"flag-icon-in\"},\n    \"tg\": {\"name\": \"Tajik\", \"code\": \"tg\", \"native\": \"тоҷикӣ, toğikī, تاجیکی‎\", \"icon\": \"flag-icon-tj\"},\n    \"th\": {\"name\": \"Thai\", \"code\": \"th\", \"native\": \"ไทย\", \"icon\": \"flag-icon-th\"},\n    \"ti\": {\"name\": \"Tigrinya\", \"code\": \"ti\", \"native\": \"ትግርኛ\", \"icon\": \"flag-icon-er\"},\n    \"bo\": {\"name\": \"Tibetan Standard, Tibetan, Central\", \"code\": \"bo\", \"native\": \"བོད་ཡིག\", \"icon\": \"flag-icon-cn\"},\n    \"tk\": {\"name\": \"Turkmen\", \"code\": \"tk\", \"native\": \"Türkmen, Түркмен\", \"icon\": \"flag-icon-tm\"},\n    \"tl\": {\"name\": \"Tagalog\", \"code\": \"tl\", \"native\": \"Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔\", \"icon\": \"flag-icon-ph\"},\n    \"tn\": {\"name\": \"Tswana\", \"code\": \"tn\", \"native\": \"Setswana\", \"icon\": \"flag-icon-bw\"},\n    \"to\": {\"name\": \"Tonga (Tonga Islands)\", \"code\": \"to\", \"native\": \"faka Tonga\", \"icon\": \"flag-icon-to\"},\n    \"tr\": {\"name\": \"Turkish\", \"code\": \"tr\", \"native\": \"Türkçe\", \"icon\": \"flag-icon-tr\"},\n    \"ts\": {\"name\": \"Tsonga\", \"code\": \"ts\", \"native\": \"Xitsonga\", \"icon\": \"flag-icon-mz\"},\n    \"tt\": {\"name\": \"Tatar\", \"code\": \"tt\", \"native\": \"татарча, tatarça, تاتارچا‎\", \"icon\": \"flag-icon-ru\"},\n    \"tw\": {\"name\": \"Twi\", \"code\": \"tw\", \"native\": \"Twi\", \"icon\": \"flag-icon-gh\"},\n    \"ty\": {\"name\": \"Tahitian\", \"code\": \"ty\", \"native\": \"Reo Tahiti\", \"icon\": \"flag-icon-pf\"},\n    \"ug\": {\"name\": \"Uighur\", \"code\": \"ug\", \"native\": \"ئۇيغۇرچە‎\", \"icon\": \"flag-icon-cn\"},\n    \"uk\": {\"name\": \"Ukrainian\", \"code\": \"uk\", \"native\": \"українська\", \"icon\": \"flag-icon-ua\"},\n    \"ur\": {\"name\": \"Urdu\", \"code\": \"ur\", \"native\": \"اردو\", \"icon\": \"flag-icon-pk\"},\n    \"uz\": {\"name\": \"Uzbek\", \"code\": \"uz\", \"native\": \"zbek, Ўзбек, أۇزبېك‎\", \"icon\": \"flag-icon-uz\"},\n    \"ve\": {\"name\": \"Venda\", \"code\": \"ve\", \"native\": \"Tshivenḓa\", \"icon\": \"flag-icon-za\"},\n    \"vi\": {\"name\": \"Vietnamese\", \"code\": \"vi\", \"native\": \"Tiếng Việt\", \"icon\": \"flag-icon-vn\"},\n    \"wa\": {\"name\": \"Walloon\", \"code\": \"wa\", \"native\": \"Walon\", \"icon\": \"flag-icon-be\"},\n    \"cy\": {\"name\": \"Welsh\", \"code\": \"cy\", \"native\": \"Cymraeg\", \"icon\": \"flag-icon-gb\"},\n    \"wo\": {\"name\": \"Wolof\", \"code\": \"wo\", \"native\": \"Wollof\", \"icon\": \"flag-icon-sn\"},\n    \"fy\": {\"name\": \"Western Frisian\", \"code\": \"fy\", \"native\": \"Frysk\", \"icon\": \"flag-icon-nl\"},\n    \"xh\": {\"name\": \"Xhosa\", \"code\": \"xh\", \"native\": \"isiXhosa\", \"icon\": \"flag-icon-za\"},\n    \"yi\": {\"name\": \"Yiddish\", \"code\": \"yi\", \"native\": \"ייִדיש\", \"icon\": \"flag-icon-il\"},\n    \"yo\": {\"name\": \"Yoruba\", \"code\": \"yo\", \"native\": \"Yorùbá\", \"icon\": \"flag-icon-bj\"},\n    \"za\": {\"name\": \"Zhuang\", \"code\": \"za\", \"native\": \"Saɯ cueŋƅ, Saw cuengh\", \"icon\": \"flag-icon-cn\"},\n    \"zz\": {\"name\": \"Test\", \"code\": \"zz\", \"native\": \"Test\", \"icon\": \"flag-icon-us\"}\n};\nlet languages=[];\nObject.keys(isoLangs).forEach((key)=>languages.push(isoLangs[key]));\nlanguages.pop(); //REMOVE TEST LANGUAGE\nlanguages=_.orderBy(languages,\"native\").map(l=>l.code);\n\n\nfunction randomizer(array, qty){\n    let length=array.length;\n\n    if(qty && qty>1){\n        if(qty>length) return array;\n        let result=[];\n        let newArray=[...array];\n        for (let i = 0; i < qty; i++) {\n            length=newArray.length;\n            const index=Math.floor(Math.random()*length);\n            newArray.splice(index,1);\n            result.push(array[index]);\n        }\n        return result;\n    }else{\n        const index=Math.floor(Math.random()*length);\n        return array[index];\n    }\n}\n\nMeteor.methods({\n    \"fake-profiles\": function () {\n\n        let index;\n        let result=[];\n        //return faker;\n        for (index = 0; index < 15; index++) {\n            const network = randomizer([\"facebook\", \"twitter\"]);\n            let profile = SocialAccounts.findOne({network});\n           // const fake=faker.Helpers.contextualCard();\n            profile.active=true;\n            //SET INFORMATION DATA\n            profile.information=Object.assign({}, Schema.information, {\n                name: faker.name.firstName(),\n                lastName: faker.name.lastName(),\n                avatar: faker.image.avatar(),\n                gender: randomizer([\"male\", \"female\"]),\n                birthDate: moment().subtract(15+Math.random()*50, 'years').toDate(),\n                country: randomizer(Countries),\n                city: \"\",\n                maritalStatus: \"\",\n                forbiddenSubjects: [],\n                sexualOrientation: \"\",\n                likes: [],\n                language: randomizer(languages),\n                description: faker.lorem.words(30),\n                categories: [],\n                specialties: [],\n                urls: []\n            });\n\n            profile.settings.type.brand = Boolean(Math.floor(Math.random() * 2));\n            profile.settings.type.influencer = Boolean(Math.floor(Math.random() * 2));\n\n            let getPrice=() =>randomizer([Math.floor(Math.random()*3000),\"\"]);\n\n            profile.pricing= Object.assign({}, Schema.pricing, {\n                post: getPrice(),\n                profilePicture:getPrice(),\n                coverPhoto:getPrice(),\n                noPostHour:getPrice(),\n                noPostDay:getPrice(),\n                share: getPrice(),\n                partnership: getPrice(),\n                ambassador: getPrice()\n            });\n\n            const tags = [\n                \"Cantantes\",\n                \"Pop\",\n                \"Rock\",\n                \"Mexico\",\n                \"Artistas\",\n                \"Mujeres\",\n                \"Éxitos\",\n                \"Los 40\",\n                \"Icons\",\n                \"Favoritos\",\n                \"IBOL\",\n                \"Test\"\n            ];\n            profile.grous=randomizer(tags,Math.random()*10);\n            profile.groups.push(\"Fake\");\n\n            let getRandomNumber=function(multiplier){\n                multiplier=multiplier||1;\n                return Math.floor(Math.random()*1000*multiplier)\n            };\n            profile.statistics={\n                retweets: getRandomNumber(),\n                retweetsPerPost: getRandomNumber(Math.random()),\n                favorites: getRandomNumber(),\n                favoritesPerPost: getRandomNumber(Math.random()),\n                comments: getRandomNumber(),\n                commentsPerPost: getRandomNumber(Math.random()),\n                likes: getRandomNumber(),\n                likesPerPost: getRandomNumber(Math.random()),\n                shares: getRandomNumber(),\n                sharesPerPost: getRandomNumber(Math.random()),\n                engagement: Math.random(),\n                followers: getRandomNumber(100),\n                following: getRandomNumber(100),\n                profileLikes: getRandomNumber(),\n                posts: getRandomNumber(),\n                postsPerDay: getRandomNumber(Math.random())\n            };\n\n            delete profile._id;\n\n            SocialAccounts.insert(profile);\n            result.push(profile);\n        }\n        return result;\n    },\n});\n\n\n","import {Meteor} from 'meteor/meteor';\nimport uuid from \"uuid\";\n\nSlingshot.createDirective(\"account-image-upload\", Slingshot.S3Storage, {\n    bucket: \"ibol-accounts-media\",\n    acl: \"public-read\",\n    authorize: function () {\n        //Deny uploads if user is not logged in.\n        if (!this.userId) {\n            var message = \"Please login before posting files\";\n            throw new Meteor.Error(\"Login Required\", message);\n        }\n\n        return true;\n    },\n    maxSize: 10 * 1024 * 1024, // 10 MB (use null for unlimited).\n    allowedFileTypes: [\"image/png\", \"image/jpeg\", \"image/gif\"],\n    key: function (file) {\n        let re = /(?:\\.([^.]+))?$/;\n        let fileExt = re.exec(file.name)[1];\n\n        return Meteor.userId() + \"/\" + uuid.v4() + \".\" + fileExt;\n    }\n});","import {Meteor} from \"meteor/meteor\";\nimport {Email} from \"meteor/email\";\nimport Schema from \"../../../server/schemas/account-invites/schema\";\nimport Settings from \"../../../settings\";\n\nMeteor.methods({\n    \"account-invite-create\": function (invite) {\n        const user = Meteor.user();\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        removeTypeNames(invite);\n\n        let newInvite = Object.assign({}, Schema, {\n            owner: user._id\n        }, invite);\n\n        if (!newInvite.account) {\n            throw new Meteor.Error(500, \"No Account sent on Invite\");\n        }\n\n        let newInviteID = SocialAccountsInvites.insert(newInvite);\n        newInvite._id = newInviteID;\n\n        Meteor.call(\"account-invite-send-email\", newInvite);\n\n        return newInviteID;\n    },\n    \"account-invite-delete\": function (invite, accountID) {\n        let dbInvite = SocialAccountsInvites.findOne({_id: invite._id});\n\n        if (dbInvite.account !== accountID) {\n            throw new Meteor.Error(403, \"Invite doesn't belong to account\");\n        }\n\n        return SocialAccountsInvites.remove({_id: invite._id});\n    },\n    \"account-invite-send-email\": function (invite) {\n        let account = SocialAccounts.findOne({_id: invite.account});\n        let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n\n        let userName = user.profile.name;\n        let accountName = (account.information.name || \"\") + \" \" + (account.information.lastName || \"\");\n\n        let dbUser = Accounts.findUserByEmail(invite.email);\n\n        if (dbUser) {\n            Meteor.call(\"notifications-create\", dbUser._id, {\n                type: \"info\",\n                title: \"Nueva Invitación\",\n                description: \"Has sido invitado a administrar la cuenta de \" + accountName,\n                url: \"http://localhost:3000/accounts/invite/\" + invite._id\n            });\n        }\n\n        this.unblock();\n        let subject = \"Ha sido invitado a administrar una cuenta\";\n        let html = (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" te ha invitado a administrar la cuenta de \" + accountName + \"<br> <a href='http://localhost:3000/accounts/invite/\" + invite._id + \"'>Ver Invitación</a>\";\n        if (invite.type === \"share\") {\n            subject = \"Ha sido invitado a administrar una cuenta\";\n            html = (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" te ha invitado a administrar la cuenta de \" + accountName + \"<br> <a href='http://localhost:3000/accounts/invite/\" + invite._id + \"'>Ver Invitación</a>\";\n        }\n        Email.send({\n            from: Settings.email.noReply,\n            to: invite.email,\n            subject,\n            html\n        });\n\n        return SocialAccountsInvites.update({_id: invite._id}, {\n            $set: {\n                status: \"sent\",\n                sent: new Date()\n            }\n        });\n    },\n    \"account-invite-update-status\": function (invite, status) {\n        //console.log(\"INVITE_UPDATE\", status);\n        let user = Meteor.user();\n        if (status === \"reject\") {\n            return SocialAccountsInvites.update({_id: invite._id}, {\n                $set: {\n                    status: \"rejected\"\n                }\n            });\n        }\n        if (status === \"accept\") {\n            let query = {};\n            if (invite.type === \"share\") {\n                let account = SocialAccounts.findOne({_id: invite.account._id});\n                let shares = account.shares;\n                shares.push(user._id);\n                query = {shares};\n            }\n            if (invite.type === \"manager\") {\n                query = {\n                    manager: user._id\n                };\n            }\n            SocialAccounts.update({_id: invite.account._id}, {$set: query});\n            Meteor.call(\"account-invite-delete\", invite, invite.account._id);\n        }\n    }\n});","import {Meteor} from 'meteor/meteor';\nimport {Email} from 'meteor/email';\nimport Schema from \"../../../server/schemas/accounts/schema\";\nimport Settings from \"../../../settings\";\n\nMeteor.methods({\n    \"profile-create\": function (user, connection) {\n        //console.log(\"PROFILE_CREATE_USER\", user);\n        //console.log(\"PROFILE_CREAATE_CONNECTION\",connection);\n        /*\n         let passPhrase = Meteor.settings.private.aes.passPhrase;\n\n         let encriptValues = function (serviceData) {\n         console.log(\"ENCRIPTION_PROCESS\",Object.keys(serviceData));\n         Object.keys(serviceData).forEach(function(key){\n         let value = serviceData[key];\n         console.log(\"PREVIOUS_VALUE [\" + key + \"]: \", value);\n         value = CryptoJS.AES.encrypt(value.toString(), passPhrase).toString();\n         console.log(\"ENCRYPTED_VALUE [\" + key + \"]: \", value);\n         serviceData[key] = value;\n         });\n         };\n\n         encriptValues(connection.serviceData);\n         */\n        let newProfile = Object.assign({}, Schema, {\n            owner: user._id,\n            manager: user._id,\n            connection: connection.serviceData,\n            network: connection.serviceName\n        });\n\n        console.log(newProfile.network);\n\n        switch (newProfile.network) {\n            case \"facebook\":\n                newProfile.information.name = newProfile.connection.first_name;\n                newProfile.information.lastName = newProfile.connection.last_name;\n                newProfile.information.avatar = \"https://graph.facebook.com/\" + newProfile.connection.id + \"/picture?type=large\";\n                newProfile.information.gender = newProfile.connection.gender;\n                //newProfile.information.languages = [newProfile.connection.locale.split(\"_\")[0]];\n                break;\n            case \"twitter\":\n                newProfile.information.name = newProfile.connection.screenName;\n                newProfile.information.avatar = newProfile.connection.profile_image_url_https;\n                newProfile.information.languages = [newProfile.connection.lang];\n                break;\n            case \"instagram\":\n                newProfile.information.name = newProfile.connection.full_name;\n                newProfile.information.avatar = newProfile.connection.profile_picture;\n                break;\n            case \"google\":\n                newProfile.information.name = newProfile.connection.given_name;\n                newProfile.information.lastName = newProfile.connection.family_name;\n                newProfile.information.avatar = newProfile.connection.picture;\n\n                break;\n            default:\n                throw new Meteor.Error(500, \"Wrong Network\");\n        }\n\n        let profileID = SocialAccounts.insert(newProfile);\n        newProfile._id = profileID;\n\n        if (newProfile.network === 'facebook') {\n            Meteor.call(\"autocreate-pages-related\", profileID);\n        }\n\n        Meteor.call(\"profile-get-stats\", newProfile);\n\n        return profileID;\n    },\n    \"profiles-save\": function (profile) {\n        const user = Meteor.user();\n        let dbProfile = SocialAccounts.findOne({_id: profile._id});\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        //TODO: Change this...\n        profile.owner = profile.owner._id;\n\n        profile.manager = profile.manager._id;\n\n        profile.shares = profile.shares.map((a) => a._id);\n\n        removeTypeNames(profile);\n        return SocialAccounts.update(profile._id, {$set: Object.assign({}, dbProfile, profile)});\n    },\n    \"profiles-mark-delete\": function (profile) {\n        const user = Meteor.user();\n        profile = SocialAccounts.findOne({_id: profile._id});\n        if (profile.owner !== user._id) {\n            throw new Meteor.Error(403, \"Only the owner can delete an account\");\n        }\n        let accountName = (profile.information.name || \"\") + \" \" + (profile.information.lastName || \"\");\n        let userName = user.profile.name;\n\n        SocialAccounts.update(profile._id, {$set: {delete: true, active: false}});\n\n        this.unblock();\n        Email.send({\n            from: \"no-reply@viralizing.me\",\n            to: Settings.support.email,\n            subject: \"Eliminación de Cuenta [\" + (accountName === \" \" ? \"\" : accountName + \" - \") + profile.network + \"]\",\n            html: (userName || \"El usuario (\" + user.emails[0].address + \")\") + \" desea borrar la cuenta \" + accountName + \" (\" + profile._id + \")\"\n        });\n    },\n    \"profiles-restore-delete\": function (profile) {\n        SocialAccounts.update(profile._id, {$set: {delete: true, active: false}});\n    },\n    \"profile-get-stats\": function (profile) {\n        let screenName;\n        let method;\n        if (!profile.connection) {\n            profile = SocialAccounts.findOne({_id: profile._id});\n        }\n        console.log(\"CALL STATISTICS\");\n        switch (profile.network) {\n            case \"facebook\":\n                method = \"facebook-account-stats\";\n                screenName = profile.connection.id;\n                break;\n            case \"twitter\":\n                method = \"twitter-account-stats\";\n                screenName = profile.connection.screenName;\n                break;\n            case \"instagram\":\n                method = \"instagram-account-stats\";\n                screenName = profile.connection.username;\n                break;\n            case \"google\":\n                return;\n            default:\n                throw new Meteor.Error(500, \"Unknown Network\");\n        }\n        let statistics = Meteor.call(method, screenName, profile);\n        statistics.updated = new Date();\n        console.log(\"NEW STATISTICS\",statistics);\n\n        return SocialAccounts.update(profile._id, {$set: {statistics}});\n    },\n    \"connect-facebook-pages\": function(accountID, pages){\n        let user=Meteor.user();\n        let pageData=Meteor.call(\"facebook-pages-list\", accountID);\n        let data=pageData.data.filter((page)=>pages.indexOf(page.id)!==-1);\n        let pageIDs=[];\n        data.forEach((page)=>{\n            page.parent=accountID;\n            page.accessToken=page.access_token;\n            let newProfile = Object.assign({}, Schema, {\n                owner: user._id,\n                manager: user._id,\n                connection: page,\n                network: \"facebook\"\n            });\n            newProfile.information.name = page.name;\n            newProfile.information.avatar = \"https://graph.facebook.com/\" + newProfile.connection.id + \"/picture?type=large\";\n            newProfile.type=\"page\";\n            //pageIDs.push(newProfile);\n            //return;\n            let matchPage = SocialAccounts.findOne({\"connection.id\":page.id});\n            if(matchPage){\n                //Page Added return Error\n                console.log(\"Page Already Exists\", page.id);\n                pageIDs.push({\n                    status: 'Error',\n                    fbId: page.id,\n                    name: page.name\n                });\n            }else{\n                let profileID = SocialAccounts.insert(newProfile);\n                newProfile._id = profileID;\n\n                Meteor.call(\"profile-get-stats\", newProfile);\n                pageIDs.push({\n                    status: 'Success',\n                    id: profileID,\n                    fbId: page.id,\n                    name: page.name\n                });\n            }\n        });\n\n        return pageIDs;\n    },\n    \"account-category-invite-proposal\": function(accountID, data){\n        //console.log(\"account-category-invite-proposal\", accountID, data);\n\n        let user=Meteor.user();\n        let userName = user.profile.name;\n\n        let action=\"Categoria\";\n        let proposal = data.category;\n        if(data.type===\"specialty\") {\n            action=\"Especialidad\";\n            proposal=(data.category?data.category:\"Sin Categoria\")+\" -> \"+data.specialty;\n        }\n\n        this.unblock();\n        let subject = \"Se ha sugerido una nueva \"+action;\n        let html = ((userName?userName:\"El usuario\")+\" (\" + user.emails[0].address + \" - \"+user._id+\")\") + \" ha sugerido una nueva \"+action+\" (\"+proposal+\")\";\n\n        Email.send({\n            from: Settings.email.noReply,\n            to: \"hello@viralizing.me\",\n            subject,\n            html\n        });\n\n    },\n    \"account-target-objective-proposal\":  function(accountID, data){\n        //console.log(\"account-target-objective-proposal\", accountID, data);\n\n        let user=Meteor.user();\n        let userName = user.profile.name;\n\n        let action=\"Meta\";\n        let proposal = data.objective;\n\n        this.unblock();\n        let subject = \"Se ha sugerido una nueva \"+action;\n        let html = ((userName?userName:\"El usuario\")+\" (\" + user.emails[0].address + \" - \"+user._id+\")\") + \" ha sugerido una nueva \"+action+\" (\"+proposal+\")\";\n\n        Email.send({\n            from: Settings.email.noReply,\n            to: \"hello@viralizing.me\",\n            subject,\n            html\n        });\n\n    },\n    \"autocreate-pages-related\": function(profileID){\n        let fbPages=Meteor.call(\"facebook-pages-list\",profileID).data;\n        let pageIDs = fbPages.map(page => page.id);\n        Meteor.call(\"connect-facebook-pages\", profileID, pageIDs);\n    },\n});\n\n","import {check, Match} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\n/////////////////////////////\n// OAuth related functions //\n/////////////////////////////\n\nlet OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\n\nlet makePascalCased = function (word) {\n    return word[0].toUpperCase() + word.slice(1).toLowerCase();\n};\n\nlet addOauthService = function (user, options) {\n    console.log(\"addOauthService\");\n    check(options.oauth, {\n        credentialToken: String,\n        // When an error occurs while retrieving the access token, we store\n        // the error in the pending credentials table, with a secret of\n        // null. The client can call the login method with a secret of null\n        // to retrieve the error.\n        credentialSecret: Match.OneOf(null, String)\n    });\n    // Retrieve the pending credential object\n    let result = OAuth.retrieveCredential(options.oauth.credentialToken, options.oauth.credentialSecret);\n    if (!result) {\n        // OAuth credentialToken is not recognized, which could be either\n        // because the popup was closed by the user before completion, or\n        // some sort of error where the oauth provider didn't talk to our\n        // server correctly and closed the popup somehow.\n        throw new Meteor.Error(\"Social network not connected.\");\n    }\n    if (result instanceof Error) {\n        // We tried to login, but there was a fatal error. Report it back\n        // to the user.\n        throw result;\n    }\n\n    let serviceName = result.serviceName;\n    let serviceData = result.serviceData;\n\n    // Service Must be valid\n    if (serviceName !== \"facebook\" && serviceName !== \"twitter\" && serviceName !== \"instagram\" && serviceName !== \"google\") {\n        throw new Meteor.Error(makePascalCased(serviceName) + \" is not supported\");\n    }\n    // The user must not have used the service already\n    let dbSocialAccount = SocialAccounts.findOne({\"connection.id\": serviceData.id});\n    if (dbSocialAccount) {\n        if (dbSocialAccount.delete) {\n            SocialAccounts.update(dbSocialAccount._id, {$set: {delete: false}});\n            return dbSocialAccount._id;\n        } else {\n            throw new Meteor.Error(\"This \" + makePascalCased(serviceName) + \" account is already connected\");\n        }\n    }\n\n    // The service must provide an `id` field\n    if (!_.has(serviceData, \"id\")) {\n        throw new Meteor.Error(\"Service data for service \" + makePascalCased(serviceName) + \" must include id\");\n    }\n\n    return Meteor.call(\"profile-create\", user, result);\n};\n\n\n//////////////////////////////\n// `addLoginService` method //\n//////////////////////////////\n\nMeteor.methods({\n    addLoginService: function (options) {\n        let user = Meteor.user();\n        // Ensure the user is logged in\n        if (!user) {\n            throw new Meteor.Error(\"Login required\");\n        }\n        // Check arguments\n        check(options, Object);\n\n        // Adding an oauth service\n        if (options.oauth) {\n            return addOauthService(user, options);\n        }\n\n        throw new Meteor.Error(\"Bad request\");\n    }\n});","import \"./file-upload\";\nimport \"./methods\";","import uuid from \"uuid\";\n\nSlingshot.createDirective(\"advertising-image-upload\", Slingshot.S3Storage, {\n    bucket: \"ibol-advertising-media\",\n    acl: \"public-read\",\n    authorize: function () {\n        //Deny uploads if user is not logged in.\n        if (!this.userId) {\n            var message = \"Please login before posting files\";\n            throw new Meteor.Error(\"Login Required\", message);\n        }\n\n        return true;\n    },\n    maxSize: 10 * 1024 * 1024, // 10 MB (use null for unlimited).\n    allowedFileTypes: [\"image/png\", \"image/jpeg\", \"image/gif\"],\n    key: function (file) {\n        let re = /(?:\\.([^.]+))?$/;\n        let fileExt = re.exec(file.name)[1];\n\n        return Meteor.userId() + \"/\" + uuid.v4() + \".\" + fileExt;\n    }\n});","import {Meteor} from \"meteor/meteor\";\n\nMeteor.methods({\n    \"advertising-facebook-create-compound-ad\": function (IDs, data) {\n        let {accountID, adAccountID, adSetID} = IDs;\n        let userID=Meteor.userId();\n        if(!userID) throw new Meteor.Error(401, \"Not allowed\");\n        let errors=[];\n        let {creative, ad}=data;\n\n        let processedFile=creative.image.split(\",\")[1];\n        let image=Meteor.call(\"fb-marketing-images-create\", accountID, adAccountID, processedFile);\n\n\n        let hashImage=image.images.bytes.hash;\n        console.log(\"IMAGE_UPLOAD\", hashImage);\n        creative={\n            title: creative.title,\n            account_id: adAccountID,\n            body: creative.body,\n            //image_url: creative.image,\n            image_hash: hashImage,\n            link_url: creative.link,\n            //object_id: \"369756380077148\",\n            object_story_spec: {\n                \"link_data\": {\n                    image_hash: hashImage,\n                    \"call_to_action\": {\n                        \"type\": \"SIGN_UP\",\n                        \"value\": {\"link\": \"https://www.facebook.com/ibolviralizing/\"}\n                    },\n                    \"link\": \"https://www.facebook.com/ibolviralizing/\",\n                    \"message\": \"try it out\"\n                },\n                \"page_id\": \"369756380077148\",\n                \"instagram_actor_id\": \"\"\n            }\n        };\n\n        let creativeRes=Meteor.call(\"fb-marketing-adCreative-create\", accountID, adAccountID,creative);\n        let creativeID=creativeRes.id;\n        if(!creativeID) errors.push(creativeRes);\n        ad={\n            name: ad.name,\n            adset_id:adSetID,\n            creative: {creative_id:creativeID},\n            status: \"ACTIVE\" //ACTIVE, PAUSED, DELETED, ARCHIVED\n        };\n        let adRes=Meteor.call(\"fb-marketing-ads-create\", accountID, adAccountID, adSetID, creativeID, ad);\n        if(!adRes.id) errors.push(adRes);\n\n        if(errors.length>0) return {errors};\n        return adRes;\n    }\n});","import \"./image-upload\";\nimport \"./methods\";","import uuid from \"uuid\";\n\nSlingshot.createDirective(\"post-image-upload\", Slingshot.S3Storage, {\n    bucket: \"ibol-posts-media\",\n    acl: \"public-read\",\n    authorize: function () {\n        //Deny uploads if user is not logged in.\n        if (!this.userId) {\n            var message = \"Please login before posting files\";\n            throw new Meteor.Error(\"Login Required\", message);\n        }\n\n        return true;\n    },\n    maxSize: 10 * 1024 * 1024, // 10 MB (use null for unlimited).\n    allowedFileTypes: [\"image/png\", \"image/jpeg\", \"image/gif\"],\n    key: function (file) {\n        let re = /(?:\\.([^.]+))?$/;\n        let fileExt = re.exec(file.name)[1];\n\n        return Meteor.userId() + \"/\" + uuid.v4() + \".\" + fileExt;\n    }\n});","import {Meteor} from \"meteor/meteor\";\nimport {check} from \"meteor/check\";\nimport UrlShorter from \"node-url-shorter\";\nimport {HTTP} from \"meteor/http\";\nimport PostSchema from \"../../../server/schemas/posts/schema\";\n\nMeteor.methods({\n    \"posts-scheduler\": function (data, userID) {\n        userID = userID || Meteor.userId();\n        let urlRegEx = new RegExp(\"(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})\");\n        if (!data.message || typeof(data.message) !== \"string\") {\n            throw new Meteor.Error(400, \"Message must be set.\");\n        }\n        if (!data.accounts || data.accounts.length === 0) {\n            throw new Meteor.Error(400, \"Accounts must me selected\");\n        }\n        if (!data.date || typeof data.date.getMonth !== \"function\") {\n            throw new Meteor.Error(400, \"Date is not valid.\");\n        }\n        if (data.deadline && typeof data.date.getMonth !== \"function\") {\n            throw new Meteor.Error(400, \"Deadline is not valid.\");\n        }\n        if (data.location && !Array.isArray(data.location) && data.location.length !== 2 && typeof(data.location[0]) !== \"number\" && typeof(data.location[1]) !== \"number\") {\n            throw new Meteor.Error(400, \"Location is not valid.\");\n        }\n        if (data.media && typeof(data.media) === \"string\" && !data.media.match(urlRegEx)) {\n            throw new Meteor.Error(400, \"Media is not valid.\");\n        }\n        if (data.campaign && typeof(data.campaign) !== \"string\") {\n            throw new Meteor.Error(400, \"Campaign is not valid.\");\n        }\n        if (data.invite && typeof(data.invite) !== \"string\") {\n            throw new Meteor.Error(400, \"Campaign is not valid.\");\n        }\n        if (data.isPaid && typeof(data.isPaid) !== \"boolean\") {\n            throw new Meteor.Error(400, \"isPaid is not valid.\");\n        }\n        if (data.status && typeof(data.status) !== \"string\") {\n            throw new Meteor.Error(400, \"Campaign is not valid.\");\n        }\n        if (data.hashtags && data.hashtags.length !== 0 && data.hashtags.every((e) => typeof(e) !== \"string\")) {\n            throw new Meteor.Error(400, \"Hashtags are not valid.\");\n        }\n\n        if (data.hashtags) {\n            data.hashtags.forEach(function (hashtag) {\n                data.message += \" \" + hashtag;\n            });\n        }\n\n        let postIDs = [];\n        data.accounts.forEach(function (account) {\n            let newPost = Object.assign({}, PostSchema);\n            newPost.owner = userID;\n            newPost.type = \"post\";\n            newPost.date = data.date;\n            newPost.deadline = data.deadline || null;\n            newPost.campaign = data.campaign || null;\n            newPost.invite = data.invite || null;\n            newPost.status = data.status || \"scheduled\";\n            newPost.isPaid = data.isPaid || false;\n            newPost.account = {\n                _id: account._id,\n                name: account.information.name,\n                lastName: account.information.lastName,\n                avatar: account.information.avatar,\n                network: account.network\n            };\n            newPost.data.message = data.message;\n            newPost.data.media = data.media;\n            newPost.data.location = data.location;\n\n            postIDs.push(Posts.insert(newPost));\n        });\n\n        return postIDs;\n    },\n    \"posts-fake-create\": function () {\n        console.log(\"POSTS_FAKE-CALLED\");\n        let accounts = [\n            {\n                \"_id\": \"6eGeKTxGbNuLfjbtk\",\n                \"network\": \"twitter\",\n                \"information\": {\n                    \"avatar\": \"https://pbs.twimg.com/profile_images/826115681946988544/TgOgp2gP_normal.jpg\",\n                    \"lastName\": \"Incorp\",\n                    \"name\": \"Ibol_Inc\"\n                },\n                \"connection\": {\n                    \"id\": \"825526971505446912\",\n                    \"screenName\": \"Ibol_Inc\",\n                    \"accessToken\": \"825526971505446912-BKiaP4KjYkYFfMCmYDc2AkLZjpcLkV0\",\n                    \"accessTokenSecret\": \"UZXTVYOiaIgh50kaDxNFRSx9wbAzWF67ndT9UFvcWurto\",\n                    \"profile_image_url\": \"http://pbs.twimg.com/profile_images/826115681946988544/TgOgp2gP_normal.jpg\",\n                    \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/826115681946988544/TgOgp2gP_normal.jpg\",\n                    \"lang\": \"en\"\n                }\n            }, {\n                \"_id\": \"JTpPdmWj8HHSHE49u\",\n                \"network\": \"facebook\",\n                \"information\": {\n                    \"avatar\": \"https://graph.facebook.com/133170043861498/picture?type=large\",\n                    \"lastName\": \"Incorp\",\n                    \"name\": \"Ibol\"\n                },\n                \"connection\": {\n                    \"accessToken\": \"EAAQ8cdw98pUBAAxD8QsSqdMPJWdZAkpHTHwJTZAVIABQCfMjoCgE51GdSbUGUZAzCDJyWDHaACFUIooFW7c77qLKREuRodIy7TB6KRrFfZBHV5Y8i1TAyGq8CB2uvTOz8kGFwgZBiuPkaQKdhhOYwg1CQrZBwxR1oRKarZCyWtvHgZDZD\",\n                    \"expiresAt\": 1492367978241,\n                    \"id\": \"133170043861498\",\n                    \"name\": \"Ibol Incorp\",\n                    \"first_name\": \"Ibol\",\n                    \"last_name\": \"Incorp\",\n                    \"link\": \"https://www.facebook.com/app_scoped_user_id/133170043861498/\",\n                    \"gender\": \"male\",\n                    \"locale\": \"en_US\",\n                    \"age_range\": {\"min\": 21}\n                }\n            }, {\n                \"_id\": \"pBnZgT5E3x7Cekj8a\",\n                \"network\": \"instagram\",\n                \"information\": {\n                    \"avatar\": \"https://scontent.cdninstagram.com/t51.2885-19/s150x150/16230362_1842733642635953_3112165154159067136_n.jpg\",\n                    \"lastName\": \"\",\n                    \"name\": \"Ibol\"\n                },\n                \"connection\": {\n                    \"bio\": \"\",\n                    \"username\": \"ibol_viralizing\",\n                    \"id\": \"4533566292\",\n                    \"full_name\": \"Ibol\",\n                    \"website\": \"\",\n                    \"profile_picture\": \"https://scontent.cdninstagram.com/t51.2885-19/s150x150/16230362_1842733642635953_3112165154159067136_n.jpg\",\n                    \"accessToken\": \"4533566292.aef68f0.6e138f18196345c596dd6e80d6ab59aa\"\n                }\n            }];\n        let i;\n        let lastDate = new Date();\n        let posts = [];\n\n        for (i = 0; i < 100; i++) {\n            console.log(\"POST_\" + i + \"_INITIATED\", lastDate);\n            let accountPosition = Math.floor(Math.random() * 3);\n            let account = accounts[accountPosition];\n            let newPost = Object.assign({}, PostSchema);\n            let minutesOffset = Math.floor(Math.random() * 3) + 1;\n\n            newPost.owner = Meteor.userId();\n            newPost.type = \"post\";\n            newPost.date = moment(lastDate).add(minutesOffset, \"minutes\").toDate();\n            newPost.status = \"scheduled\";\n            newPost.isPaid = false;\n            newPost.account = {\n                _id: account._id,\n                name: account.information.name,\n                lastName: account.information.lastName,\n                avatar: account.information.avatar,\n                network: account.network\n            };\n            newPost.data.message = \"This is a test message #viralizing\";\n            newPost.data.media = \"https://scontent.fmex7-1.fna.fbcdn.net/v/t31.0-8/16252222_130164834162019_8387112973073187684_o.jpg?oh=7921c404001814ff46dd3ff43601f63b&oe=59306168\";\n\n            lastDate = moment(newPost.date).toDate();\n\n            posts.push(Posts.insert(newPost));\n            console.log(\"POST_\" + i + \"_CREATED\");\n        }\n\n        console.log(\"FOR_LOOP_FINISHED\", posts.length);\n\n        return posts;\n    },\n    \"post-get-short-url\": function(url) {\n        check(url, String);\n        return HTTP.call(\"POST\", \"https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyBcythzarlyApVyP89lJ8W4QagEYVhru2E\", {\n            data: {\n                longUrl: url\n            }\n        }).data.id;\n    }\n});\n","import \"./post-create\";","var google = require(\"googleapis\");\n\nlet GoogleConnection = function (token) {\n    var plus = google.plus(\"v1\");\n    var OAuth2 = google.auth.OAuth2;\n    var oauth2Client = new OAuth2(\n        \"666001639290-4ockfbrs6nruqfds6jkugk1g8mctffe2.apps.googleusercontent.com\",\n        \"xmMAWuSkSv99ENIjVCHNTUf9\",\n        \"http://localhost:3000\"\n    );\n    oauth2Client.setCredentials({\n        access_token: token,\n    });\n    google.options({\n        auth: oauth2Client\n    });\n    return {\n        library: plus,\n        oauth: oauth2Client\n    }\n};\n\nexport default GoogleConnection;","import GoogleConnection from \"./connection\";\nimport { HTTP } from 'meteor/http'\n\nlet request = require('request').defaults({encoding: null});\n\nMeteor.methods({\n    \"google-post-create\": function (profileID, message, callback) {\n        let profile = Profiles.findOne({\"network\": \"google\"});\n\n        if (!profile) {\n            throw new Meteor.Error(\"There's no matching profile\");\n        }\n\n        let connection = profile.connection,\n            client = GoogleConnection(connection.accessToken);\n\n        if (client) {\n            let postMessage = function (post) {\n                    return client.post('statuses/update', post, function (error, tweet, response) {\n                        if (error) {\n                            console.log(\"TWITTER_ERROR\");\n                            throw new Meteor.Error(\"Twitter: Failed to Post\");\n                        }\n                        console.log(\"TWEET_SUCCESSFUL\", tweet);  // Tweet body.\n                        if (callback) {\n                            callback();\n                        }\n                    });\n                },\n                postImage = function (post) {\n                    return request.get(post.media, function (error, response, body) {\n                        if (!error && response.statusCode == 200) {\n\n                            client.post('media/upload', {media: body}, function (error, media, response) {\n\n                                if (error) {\n                                    throw new Meteor.Error(\"Twitter: Failed to Upload Media\");\n                                }\n                                if (!error) {\n                                    post.media_ids = media.media_id_string;\n                                    delete post.media;\n\n                                    return postMessage(post);\n                                }\n                            });\n                        }\n                    });\n                };\n\n            message = {\n                status: \"I Love Pagani!!!! \" + moment().format(\"HH:MM:SS A\"),\n                lat: \"37.7821120598956\",\n                long: \"-122.400612831116\",\n                display_coordinates: true,\n                media: \"https://c1.staticflickr.com/8/7340/9722529830_cd8851126e_b.jpg\"\n            };\n            var body = 'My first post using facebook-node-sdk';\n            console.log(Object.keys(client.library.activities));\n            client.library.people.get({\n                userId: 'me'\n            }, function (err, response) {\n                console.log(\"ERROR\",err);\n                console.log(\"RESPONSE\",response);\n            });\n\n            HTTP.call(\"POST\",\"https://www.googleapis.com/plusDomains/v1/people/{userId}/activities\",{\n                data: {\n                    \"object\": {\n                        \"originalContent\": \"Happy Monday! #caseofthemondays\",\n                    },\n                    \"access\": {\n                        \"items\": [{\n                            \"type\": \"domain\"\n                        }],\n                        \"domainRestricted\": true\n                    }\n                },\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"OAuth$\"+connection.accessToken\n                }\n            })\n\n            /*\n             let query;\n\n             if (message.media) {\n             query = postImage(message);\n             } else {\n             query = postMessage(message);\n             }\n\n             return query;*/\n        }\n    }\n});","import InstagramConnection from \"./connection\";\n\nMeteor.methods({\n    \"instagram-account-stats\": function (userName, profile) {\n        if (!profile) {\n            profile = SocialAccounts.findOne({\"network\": \"instagram\"});\n        }\n\n        if (!profile) {\n            throw new Meteor.Error(\"There's no matching profile\");\n        }\n\n        let connection = profile.connection,\n            client = InstagramConnection(connection.accessToken);\n\n        if (profile) {\n            let posts = [];\n\n            let syncUser = Meteor.wrapAsync(client.user_self, client);\n\n            //console.log(\"before user\");\n            let user = syncUser({access_token: connection.accessToken});\n            //console.log(\"after user\", user);\n\n            let syncPosts = Meteor.wrapAsync(client.user_self_media_recent, client),\n                getPosts = function (max_id) {\n                    let query = {\n                        count: 200\n                    };\n                    if (max_id) {\n                        query.max_id = max_id;\n                    }\n\n                    let result = syncPosts(query, {access_token: connection.accessToken}),\n                        lastPost = result[(result.length - 1)];\n                    posts = [...posts, ...result];\n\n                    if (lastPost) {\n                        if (max_id) {\n                            if (max_id !== lastPost.id) {\n                                getPosts(lastPost.id);\n                            }\n                        } else {\n                            getPosts(lastPost.id);\n                        }\n                    }\n                };\n\n            getPosts();\n\n            let samplePost = {created_time: Number(new Date()) / 1000}\n            const first = posts[0] || samplePost;\n            const last = posts[posts.length - 1] || samplePost;\n\n            let comments = 0;\n            let likes = 0;\n\n            for (const x of posts) {\n                comments += x.comments.count;\n                likes += x.likes.count;\n            }\n\n            let result = {\n                comments,\n                commentsPerPost: comments / posts.length,\n                likes,\n                likesPerPost: likes / posts.length,\n                engagement: ((comments + likes) / posts.length) / user.counts.followed_by,\n                followers: user.counts.followed_by,\n                following: user.counts.follows,\n                posts: user.counts.media,\n                postsPerDay: (posts.length / (Math.abs((moment(new Date(Number(first.created_time) * 1000)).diff(moment(new Date(Number(last.created_time) * 1000)), \"days\")))))\n            };\n\n            Object.keys(result).forEach((key) => {\n                if (Number.isNaN(result[key])) {\n                    result[key] = 0;\n                }\n            });\n\n            if (result.postsPerDay === Infinity) {\n                result.postsPerDay = 0;\n            }\n\n            return result\n\n        }\n    }\n});","import \"./post-create\";\nimport \"./account-stats\";\nimport \"./search\";","import instagram from \"instagramapi\";\n\nlet InstagramConnection = function (token) {\n    let client = instagram.instagram();\n    client.use({\n        access_token: token\n    });\n    return client\n};\n\nexport default InstagramConnection;","\nMeteor.methods({\n    \"instagram-post-create\": function (connection, post, callback) {\n        //console.log(\"INSTAGRAM_POST_CREATE\");\n        //console.log(\"INSTAGRAM_POST_DATE:\", post.date, \"_CURRENT_TIME:\", new Date());\n\n        Meteor.call(\"notifications-create\",\"zfbP3aTqiP8yAg8NQ\",{\n            title: \"Instagram Post\",\n            description: \"You have a scheduled post\"\n        });\n    }\n});","/*import InstagramConnection from \"./connection\";\nimport InstagramSearchTags from \"instagram-searchtags\";\n\nMeteor.methods({\n    \"instagram-search\": function (query) {\n        const searchTags = new InstagramSearchTags({\n            username: 'ibol_viralizing',\n            password: 'ibol2017',\n        });\n\n\n// Login Instagram with credentials\n        searchTags.login()\n            .then(() => {\n\n                // Create #dog tag\n                const tag = searchTags.createTag('dog')\n\n                // Fetch 10 latest nodes\n                return tag.fetchNodes(10)\n\n            })\n            .then((nodes) => {\n\n                // ... do something cool with nodes\n\n                // close connection\n                searchTags.close()\n\n            })\n            .catch((err) => {\n\n                // close connection\n                searchTags.close()\n\n                console.error(`Error: ${err.message}`)\n\n            })\n    }\n});\n*/","import \"./payouts\";","import paypal from \"paypal-rest-sdk\";\n\nlet PaypalConnection =  function(){\n    paypal.configure({\n        mode: \"sandbox\",\n        client_id: Meteor.settings.private.paypal.clientId,\n        client_secret: Meteor.settings.private.paypal.secret\n    });\n    return paypal;\n};\n\nexport default PaypalConnection;","import {Meteor} from \"meteor/meteor\";\nimport PaypalConnection from \"./connection\";\n\nMeteor.methods({\n    \"paypal-payouts-create\": function(){\n        let sender_batch_id = Math.random().toString(36).substring(9);\n\n        let create_payout_json = {\n            \"sender_batch_header\": {\n                \"sender_batch_id\": sender_batch_id,\n                \"email_subject\": \"You have a payment\"\n            },\n            \"items\": [\n                {\n                    \"recipient_type\": \"EMAIL\",\n                    \"amount\": {\n                        \"value\": 0.99,\n                        \"currency\": \"USD\"\n                    },\n                    \"receiver\": \"shirt-supplier-one@mail.com\",\n                    \"note\": \"Thank you.\",\n                    \"sender_item_id\": \"item_1\"\n                },\n                {\n                    \"recipient_type\": \"EMAIL\",\n                    \"amount\": {\n                        \"value\": 0.90,\n                        \"currency\": \"USD\"\n                    },\n                    \"receiver\": \"shirt-supplier-two@mail.com\",\n                    \"note\": \"Thank you.\",\n                    \"sender_item_id\": \"item_2\"\n                },\n                {\n                    \"recipient_type\": \"EMAIL\",\n                    \"amount\": {\n                        \"value\": 2.00,\n                        \"currency\": \"USD\"\n                    },\n                    \"receiver\": \"shirt-supplier-three@mail.com\",\n                    \"note\": \"Thank you.\",\n                    \"sender_item_id\": \"item_3\"\n                }\n            ]\n        };\n        let paypal=PaypalConnection();\n\n        /*paypal.payout.create(create_payout_json, function (error, payout) {\n            if (error) {\n                console.log(error.response);\n            } else {\n                console.log(\"Create Payout Response\");\n                console.log(payout);\n            }\n        });*/\n\n        let client=Meteor.wrapAsync(paypal.payout.create, paypal.payout);\n\n        try{\n            return client(create_payout_json);\n        }catch(e){\n            return e\n        }\n    }\n});","import \"./methods\";","import {Meteor} from 'meteor/meteor';\nimport {Email} from 'meteor/email';\nimport Schema from \"../../../server/schemas/reports/schema\";\nimport Settings from \"../../../settings\";\n\nMeteor.methods({\n    \"report-create\": function (data) {\n        let user = Meteor.user();\n\n        let newReport = Object.assign({}, Schema, data, {\n            owner: user._id,\n        });\n\n        console.log(\"REPORT_CREATE\", newReport);\n\n        return Reports.insert(newReport);\n    },\n    \"report-save\": function (report) {\n        const user = Meteor.user();\n        let dbReport = Reports.findOne({_id: report._id});\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        report.owner = report.owner._id;\n\n        removeTypeNames(report);\n\n        return Reports.update(report._id, {$set: Object.assign({}, dbReport, report)});\n    },\n    \"report-delete\": function (report) {\n        let dbReport = Reports.findOne({_id: report._id});\n        const user = Meteor.user();\n\n        if (dbReport.owner !== user._id) {\n            throw new Meteor.Error(403, \"Report doesn't belong to user.\");\n        }\n\n        return Reports.remove({_id: report._id});\n    }\n});\n\n","import \"./methods\";\nimport \"./upload\";","import {Meteor} from \"meteor/meteor\";\nimport Schema from \"../../../server/schemas/payments/schema\";\n\nMeteor.methods({\n    \"payments-create-fake\": function(){\n        let user = Meteor.user();\n        let accounts = SocialAccounts.find({},{fields:{_id:1}}).fetch();\n        accounts=[...accounts,...accounts,...accounts];\n        let cards=[\"Visa\", \"Amex\", \"MasterCard\", \"Discover\"];\n        let payments=accounts.map(a=>Object.assign({},Schema,{\n            status: \"completed\",\n            from: user._id,\n            to: a._id,\n            campaign: Math.round(Math.random())?\"FGHsw43uezjudkN2p\":\"XEuAEdnJL57WobBKN\",\n            amount: Math.round(Math.random()*100000),\n            date: moment().subtract(Math.floor(Math.random()*600),'days').toDate(),\n            paymentMethod: {\n                brand: cards[Math.floor(Math.random()*4)],\n                last4: String(Math.floor(Math.random()*10))+String(Math.floor(Math.random()*10))+String(Math.floor(Math.random()*10))+String(Math.floor(Math.random()*10))\n            }\n        }));\n\n        return payments.map(p=>Payments.insert(p));\n    }\n});","Slingshot.createDirective(\"test-bucket-ibol\", Slingshot.S3Storage, {\n  bucket: \"test-bucket-ibol\",\n  allowedFileTypes: null,\n  acl: \"public-read\",\n\n  authorize: function () {\n    //Deny uploads if user is not logged in.\n    if (!this.userId) {\n      var message = \"Please login before posting files\";\n      throw new Meteor.Error(\"Login Required\", message);\n    }\n\n    return true;\n  },\n  maxSize: 5 * 1024 * 1024 * 1024,\n  key: function (file) {\n\n    //Store file into a directory by the user's username.\n    var user = Meteor.users.findOne(this.userId);\n    return user.username + \"/\" + file.name;\n  }\n});","import \"./methods\";","import {Meteor} from 'meteor/meteor';\nimport Schema from \"../../../server/schemas/team-attack/schema\";\n\nMeteor.methods({\n    \"teamAttack-create\": function (teamAttack) {\n        let user = Meteor.user();\n\n        let newTeamAttack = Object.assign({}, Schema, {\n            owner: user._id\n        }, teamAttack);\n\n        return TeamAttack.insert(newTeamAttack);\n    },\n    \"teamAttack-save\": function (teamAttack) {\n        const user = Meteor.user();\n        //console.log(\"teamAttack-save\", teamAttack);\n        let dbTeamAttack = TeamAttack.findOne({_id: teamAttack._id});\n\n        const removeTypeNames = function (obj) {\n            Object.keys(obj).forEach(function (k) {\n                if (k === \"__typename\") {\n                    delete obj[k];\n                }\n                if (obj[k] && typeof obj[k] === \"object\") {\n                    removeTypeNames(obj[k]);\n                }\n            });\n        };\n\n        teamAttack.owner = teamAttack.owner._id;\n        teamAttack.members = teamAttack.members.map((m)=>m._id);\n\n        removeTypeNames(teamAttack);\n\n        return TeamAttack.update(teamAttack._id, {$set: Object.assign({}, dbTeamAttack, teamAttack)});\n    },\n    \"teamAttack-delete\": function(teamAttack){\n        const user = Meteor.user();\n        let dbTeamAttack = TeamAttack.findOne({_id: teamAttack._id});\n\n        if (dbTeamAttack.owner !== user._id) {\n            throw new Meteor.Error(403, \"Only the owner can delete an account\");\n        }\n\n        return TeamAttack.remove({_id:dbTeamAttack._id});\n    }\n});","import \"../core/server/bundle\";\nimport \"../agenda/server/bundle\";\nimport \"../examples/server/bundle\";\nimport \"../accounts/server/bundle\";\nimport \"../campaigns/server/bundle\";\nimport \"../reporter/server/bundle\";\nimport \"../code/server/bundle\";\nimport \"../statement/server/bundle\";\nimport \"../pricing/server/bundle\";\nimport \"../teamattack/server/bundle\";\nimport \"../advertising/server/bundle\";\n\nimport \"../twitter/server/bundle\";\nimport \"../facebook/server/bundle\";\nimport \"../instagram/server/bundle\";\nimport \"../google-plus/server/bundle\";\nimport \"../google/server/bundle\";\n\nimport \"../stripe/server/bundle\";\nimport \"../paypal/server/bundle\";\n\n","const AccountInvite = `\ntype AccountInvite {\n    _id: String,\n    account: Account,\n    email: String,\n    sent: String,\n    owner: User,\n    status: String,\n    type: String\n}\n`;\n\nexport default [AccountInvite];","import accountInvites from \"./account-invites\";\n\nexport default [...accountInvites];","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        accountInvite(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                _id: args.inviteID\n            };\n\n            return SocialAccountsInvites.findOne(query);\n\n        },\n        accountInvites(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                account: args.accountID\n            };\n\n            return SocialAccountsInvites.find(query).fetch();\n\n        }\n    },\n    AccountInvite: {\n        owner: (account) => {\n            let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n            return user\n        },\n        account: (invite) => {\n            let user = SocialAccounts.findOne({_id: invite.account}, {fields: {services: 0}});\n            return user\n        }\n    }\n};","import accountInvites from \"./account-invites\";\nimport { merge } from \"lodash\";\n\nexport default merge(accountInvites);","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","export default {\n    account: null,\n    email: null,\n    sent: null,\n    owner: null,\n    status: \"pending\",\n    type: \"manager\"\n};","import User from \"../../users/definitions/users\";\n\nconst Account = `\ntype Account {\n    _id: String,\n    suspended: Boolean,\n    type: String,\n    active: Boolean,\n    delete: Boolean,\n    network: String,\n    manager: User,\n    owner: User,\n    shares: [User],\n    connection: Connection,\n    settings: AccountSettings,\n    information: AccountInformation,\n    audience: AccountAudience,\n    pricing: AccountPricing,\n    gallery: AccountGallery,\n    groups: [String],\n    statistics: AccountStatistics,\n    campaignsCount: Int\n}\n`;\n\nconst AccountGallery = `\ntype AccountGallery {\n    images: [AccountGalleryFolder],\n    videos: [AccountGalleryFolder]\n}\n`;\n\nconst AccountGalleryFolder = `\ntype AccountGalleryFolder {\n    name: String,\n    content: [String]\n}\n`;\n\nconst AccountStatistics = `\ntype AccountStatistics {\n    retweets: String,\n    retweetsPerPost: String,\n    favorites: String,\n    favoritesPerPost: String,\n    comments: String,\n    commentsPerPost: String,\n    likes: String,\n    likesPerPost: String,\n    shares: String,\n    sharesPerPost: String,\n    engagement: String,\n    followers: Int,\n    following: String,\n    profileLikes: String,\n    posts: String,\n    postsPerDay: String\n}\n`;\n\nconst AccountAudienceTarget = `\ntype AccountAudienceTarget {\n    name: String,\n    age: String,\n    gender: String,\n    nrssg: String,\n    countries: [String],\n    cities: [String],\n    languages: [String],\n    description:String\n}   \n`;\n\nconst AccountAudienceObjectives = `\ntype AccountAudienceObjectives {\n    increaseFollowers: Boolean,\n    increaseViews: Boolean,\n    increaseShares: Boolean,\n    increaseEngagement: Boolean,\n    increaseLikes: Boolean,\n    increaseTrafficHours: Boolean,\n    reachNewMarkets: Boolean,\n    increaseSpeaking: Boolean,\n    increasePlays: Boolean,\n    increaseWebsiteTraffic: Boolean,\n    positionTarget: Boolean,\n    keepTarget: Boolean,\n    presence: Boolean,\n    positionNewMarkets: Boolean,\n    \n}   \n`;\n\nconst AccountAudience = `\ntype AccountAudience {\n    targets:[AccountAudienceTarget]\n    conquer:[String],\n    objectives: AccountAudienceObjectives\n}   \n`;\n\nconst Connection = `\ntype Connection {\n    accessToken: String,\n    id:String\n}\n`;\n\nconst AccountSettings = `\ntype AccountSettings {\n    type: AccountsSettingsType\n}   \n`;\n\nconst AccountsSettingsType = `\ntype AccountsSettingsType {\n    brand: Boolean,\n    influencer: Boolean\n}\n`;\n\nconst AccountInformation = `\ntype AccountInformation {\n    name: String,\n    lastName: String,\n    avatar: String,\n    gender: String,\n    birthDate: String,\n    country: String,\n    city: String,\n    maritalStatus: String,\n    forbiddenSubjects: [String],\n    sexualOrientation: String,\n    likes: [String],\n    language: String,\n    description: String,\n    categories:[String],\n    specialties:[String]\n    urls: [String],\n} \n`;\n\nconst AccountConceptSubjects = `\ntype AccountConceptSubjects {\n    primary: [String],\n    secondary: [String],\n    forbidden: [String]\n}\n`;\n\nconst AccountPricing = `\ntype AccountPricing {\n    post: String,\n    profilePicture:String,\n    coverPhoto:String,\n    noPostHour:String,\n    noPostDay:String,\n    share: String,\n    partnership: String,\n    ambassador: String\n}\n`;\n\nconst AccountPricingPhotos = `\ntype AccountPricingPhotos {\n    profile: String,\n    cover: String\n}\n\n`;\n\nconst AccountPricingNoPost = `\ntype AccountPricingNoPost {\n    hour: String,\n    day: String\n}\n`;\n\nconst RangeQuery = `\ninput RangeQuery {\n    min: String,\n    max: String\n}\n`;\n\nexport default [Account, Connection, AccountGallery, AccountGalleryFolder, AccountAudience, AccountAudienceTarget, AccountAudienceObjectives, AccountSettings, AccountStatistics, AccountsSettingsType, AccountInformation, AccountConceptSubjects, AccountPricing, AccountPricingPhotos, AccountPricingNoPost, RangeQuery, ...User]","import accounts from \"./account\";\nimport fbPages from \"./facebook-pages\";\n\nexport default [...accounts, ...fbPages];","const FBPage = `\ntype FBPage {\n    id: String,\n    name: String,\n    category: String,\n    perms: [String],\n    picture: String\n}\n`;\n\nexport default [FBPage];","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        account(root, args, context) {\n            // Only return the current user, for security\n            const account = SocialAccounts.findOne({_id: args._id});\n            let userID=context.userId;\n            if ((userID !== account.owner) && (userID !== account.manager) && (account.shares.indexOf(userID)==-1)) {\n                return null\n            }\n            return account;\n\n        },\n        accountsOwnSearch(root, args, context){\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            let query = {\n                $or: [{owner: userID}, {manager: userID}, {shares: {$in: [userID]} }],\n                delete: {$ne: true}\n            };\n\n            if (args.query) {\n                const regex = new RegExp(args.query, \"i\");\n                query.$and.push({\n                    $or: [\n                        {\"information.name\": {$regex: regex}},\n                        {\"information.lastName\": {$regex: regex}},\n                        {\"network\": {$regex: regex}}\n                    ]\n                });\n            }\n\n            console.log(\"ACCOUNTS_OWN\",query);\n\n            return SocialAccounts.find(query, {limit: 15}).fetch();\n        },\n        accountsByTag(root, args, context){\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            re = new RegExp(args.tag, \"i\");\n            console.log(\"ACCOUNTS_BY_TAG: \", args.tag);\n            //db.accounts.find({groups:{$in:[/^ibol$/i]}}).count()\n            let query = {\n                $and: [\n                    {$or: [{owner: userID}, {manager: userID}, {shares: {$in: [userID]} }]}\n                ],\n                groups: {\n                    $in: [re]\n                }\n            };\n            return SocialAccounts.find(query).fetch();\n        },\n        accounts(root, args, context) {\n            const userID = context.userId;\n            return SocialAccounts.find({\n                $or: [{owner: userID}, {manager: userID}, {\n                    shares: {$in: [userID]}\n                }],\n                delete: {$ne: true}\n            }).fetch();\n        },\n        accountFBPages(root, args, context){\n            const userID = context.userId;\n            let fbPages=Meteor.call(\"facebook-pages-list\",args.accountID).data;\n            let PagesIDs=fbPages.map(p=>p.id);\n            console.log(\"FB_PAGES\",PagesIDs);\n            let dbPages=SocialAccounts.find({\n                type: \"page\",\n                \"connection.id\":{$in:PagesIDs}\n            }, {fields:{\"connection.id\":1}}).fetch().map(p=>p.connection.id);\n\n            console.log(\"DB_PAGES\",dbPages);\n            return fbPages.filter(p=>dbPages.indexOf(p.id)===-1);\n        }\n    },\n    Account: {\n        manager: (account) => {\n            let user = Meteor.users.findOne({_id: account.manager}, {fields: {services: 0}});\n            return user\n        },\n        owner: (account) => {\n            let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n            return user\n        },\n        shares: (account) => {\n            let users = Meteor.users.find({_id: {$in: account.shares} }, {fields: {services: 0}}).fetch();\n            return users\n        },\n        campaignsCount: (account)=>{\n            //TODO: Add Distinct to this query\n            let count=Campaigns.find({'information.brands': {$in : [account._id]}}).count();\n            return count;\n        }\n    },\n    FBPage: {\n        picture: (page)=>page.picture.data.url\n    }\n};","import accounts from \"./accounts\";\nimport { merge } from \"lodash\";\n\nexport default merge(accounts);","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","export default {\n    network: \"\",\n    manager: \"\",\n    type: \"account\",\n    shares: [],\n    suspended: false,\n    active: false,\n    delete: false,\n    connection: {},\n    settings: {\n        type: {\n            brand: false,\n            influencer: false\n        }\n    },\n    information: {\n        name: \"\",\n        lastName: \"\",\n        avatar: \"\",\n        gender: \"\",\n        birthDate: null,\n        country: \"\",\n        city: \"\",\n        maritalStatus: \"\",\n        forbiddenSubjects: [],\n        sexualOrientation: \"\",\n        likes: [],\n        language: \"\",\n        description: \"\",\n        categories: [],\n        specialties: [],\n        urls: []\n    },\n    audience: {\n        targets:[],\n        conquer:[],\n        objectives: {\n            increaseFollowers: false,\n            increaseViews: false,\n            increaseShares: false,\n            increaseEngagement: false,\n            increaseLikes: false,\n            increaseTrafficHours: false,\n            reachNewMarkets: false,\n            increaseSpeaking: false,\n            increasePlays: false,\n            increaseWebsiteTraffic: false,\n            positionTarget: false,\n            keepTarget: false,\n            presence: false,\n            positionNewMarkets: false,\n        }\n    },\n    pricing: {\n        post: \"\",\n        profilePicture:\"\",\n        coverPhoto:\"\",\n        noPostHour:\"\",\n        noPostDay:\"\",\n        share: \"\",\n        partnership: \"\",\n        ambassador: \"\"\n    },\n    gallery: {\n        images: [],\n        videos: []\n    },\n    groups: []\n};","import User from \"../../users/definitions/users\";\nimport Campaign from \"../../campaign/definitions/campaign\";\n\nconst Advertising = `\ntype Advertising {\n    campaign:Campaign\n    network:String,\n    message:CampaignMessage,\n    budget:String\n}\n`;\n\nexport default [Advertising, ...Campaign];","import advertising from \"./advertising\";\n\nexport default [...advertising];","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {}\n};","import advertising from \"./advertising\";\nimport { merge } from \"lodash\";\n\nexport default merge(advertising);","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","import campaign from \"./campaign\";\n\nexport default [...campaign];","import Accounts from \"../../accounts/definitions/account\";\n\nconst Campaign = `\ntype Campaign {\n    _id: String,\n    owner: User,\n    manager: User,\n    shares: [User],\n    status: String,\n    information: CampaignInformation,\n    messages: [CampaignMessage],\n    gallery: CampaignGallery\n}\n`;\n\nconst CampaignGallery = `\ntype CampaignGallery {\n    images: [CampaignGalleryFolder],\n    videos: [CampaignGalleryFolder]\n}\n`;\n\nconst CampaignGalleryFolder = `\ntype CampaignGalleryFolder {\n    name: String,\n    content: [String]\n}\n`;\n\nconst CampaignInformation =`\ntype CampaignInformation {\n    profile: String,\n    cover: String,\n    name: String,\n    brands: [Account],\n    conquer: [String],\n    dateStart: String,\n    dateEnd: String,\n    description: String,\n    url: String,\n    objectives: CampaignInformationObjectives\n} \n`;\n\nconst CampaignInformationObjectives = `\ntype CampaignInformationObjectives {\n    increaseFollowers: Boolean,\n    increaseViews: Boolean,\n    increaseShares: Boolean,\n    increaseEngagement: Boolean,\n    increaseLikes: Boolean,\n    increaseTrafficHours: Boolean,\n    reachNewMarkets: Boolean,\n    increaseSpeaking: Boolean,\n    increasePlays: Boolean,\n    increaseWebsiteTraffic: Boolean,\n    positionTarget: Boolean,\n    keepTarget: Boolean,\n    presence: Boolean,\n    positionNewMarkets: Boolean,\n    \n}   \n`;\n\n\nconst CampaignInformationHashtags = `\ntype CampaignInformationHashtags {\n    main: [String],\n    secondary: [String]\n}\n`;\n\n\nconst CampaignMessage = `\ntype CampaignMessage {\n    _id: String,\n    message: String,\n    media: String,\n    hashtags: [String]\n}\n`;\n\n\n\n\n\nexport default [Campaign, CampaignInformation, CampaignInformationObjectives, CampaignGallery, CampaignGalleryFolder, CampaignInformationHashtags, CampaignMessage, ...Accounts];","import campaign from \"./campaign\";\nimport {merge} from \"lodash\";\n\nexport default merge(campaign);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        campaign(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            console.log(\"CAMPAIGN\",args);\n            const campaign = Campaigns.findOne({_id: args._id});\n            if (userID === campaign.owner) {\n                console.log(\"IsOwner\");\n            }\n            return campaign;\n\n        },\n        campaignsOwn(root, args, context){\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                owner: userID\n            };\n\n            return Campaigns.find(query).fetch();\n        }\n    },\n    Campaign:{\n        owner: (account) => {\n            let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n            return user\n        },\n        manager: (account) => {\n            let user = Meteor.users.findOne({_id: account.manager}, {fields: {services: 0}});\n            return user\n        },\n        shares: (account) => {\n            let users = Meteor.users.find({_id: {$in: account.shares} }, {fields: {services: 0}}).fetch();\n            return users\n        },\n    },\n    CampaignInformation:{\n        brands: (account) => {\n            if(!account.brands || account.brands.length===0){\n                return [];\n            }\n            let result = SocialAccounts.find({\n                _id: {$in: account.brands}\n            }, {fields: {connection: 0}}).fetch();\n            return result\n        }\n    }\n};","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","export default {\n    owner: null,\n    manager: null,\n    shares: [],\n    status: \"active\",\n    information: {\n        profile: null,\n        cover: null,\n        name: null,\n        brands: [],\n        conquer: [],\n        dateStart: null,\n        dateEnd: null,\n        description: null,\n        url: null,\n        objectives: []\n    },\n    messages: [],\n    gallery: {\n        images: [],\n        videos: []\n    }\n};","import campaignInvites from \"./campaign-invites\";\n\nexport default [...campaignInvites];","const CampaignInvite = `\ntype CampaignInvite {\n    _id: String,\n    campaign: Campaign,\n    email: String,\n    sent: String,\n    owner: User,\n    status: String,\n    type: String\n}\n`;\n\nexport default [CampaignInvite];","import campaignInvites from \"./campaign-invites\";\nimport { merge } from \"lodash\";\n\nexport default merge(campaignInvites);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        campaignInvite(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                _id: args.inviteID\n            };\n\n            return CampaignInvites.findOne(query);\n\n        },\n        campaignInvites(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                account: args.campaignID\n            };\n\n            return CampaignInvites.find(query).fetch();\n\n        }\n    },\n    CampaignInvite: {\n        owner: (account) => {\n            let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n            return user\n        },\n        campaign: (invite) => {\n            let campaign = Campaigns.findOne({_id: invite.campaign}, {fields: {services: 0}});\n            return campaign\n        }\n    }\n};","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","import events from \"./events\";\n\nexport default [...events];","\nconst Event = `\ntype Event {\n    _id: String,\n    type: String,\n    start: String,\n    end: String,\n    allDay: Boolean,\n    title: String,\n    preview: String,\n    network: String\n}\n`;\n\n\nexport default [Event];","import events from \"./events\";\nimport { merge } from \"lodash\";\n\nexport default merge(events);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        eventsOwn(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            console.log(\"EVENTS_OWN\", args);\n            let posts = [];\n            let campaigns = [];\n            if (args.posts) {\n                posts = Posts.find({owner: userID}).fetch().map((p) => ({\n                    _id: p._id,\n                    type: \"post\",\n                    allDay: false,\n                    start: p.date,\n                    end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n                    title: ((p.account.name || \"\") + \" \" + (p.account.lastName || \"\")),\n                    preview: p.account.avatar,\n                    network: p.account.network\n                }));\n            }\n            if (args.all) {\n                campaigns = Campaigns.find({owner: userID}).fetch().map((c) => ({\n                    _id: c._id,\n                    type: \"campaign\",\n                    allDay: true,\n                    start: c.information.dateStart,\n                    end: c.information.dateEnd,\n                    title: c.information.name,\n                    preview: c.information.profile,\n                    network: null\n                }));\n            }\n            //TODO: IMPLEMENT REST OF FILTERS\n            return [...posts, ...campaigns]\n        },\n        eventsCampaign(root, args, context) {\n            let query = {\n                campaign: args.campaignID\n            };\n\n            if (!args.all) {\n                let filters = [];\n                Object.keys(args).forEach((key) => {\n                    if (args[key]) {\n                        filters.push(key);\n                    }\n                });\n                query.status = {$in: filters};\n            }\n\n            let posts = Posts.find(query).fetch().map((p) => ({\n                _id: p._id,\n                type: \"post\",\n                allDay: false,\n                start: p.date,\n                end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n                title: ((p.account.name || \"\") + \" \" + (p.account.lastName || \"\")),\n                preview: p.account.avatar,\n                network: p.account.network\n            }));\n            return posts;\n        },\n        eventsAccount(root, args, context) {\n            let query = {\n                \"account._id\": args.accountID\n            };\n\n            if (!args.all) {\n                let filters = [];\n                Object.keys(args).forEach((key) => {\n                    if (args[key]) {\n                        filters.push(key);\n                    }\n                });\n                query.status = {$in: filters};\n            }\n\n            let posts = Posts.find(query).fetch().map((p) => ({\n                _id: p._id,\n                type: \"post\",\n                allDay: false,\n                start: p.date,\n                end: moment(new Date(p.date)).add(5, \"minutes\").toDate(),\n                title: ((p.account.name || \"\") + \" \" + (p.account.lastName || \"\")),\n                preview: p.account.avatar,\n                network: p.account.network\n            }));\n            return posts;\n        }\n    }\n};","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","import facebook from \"./facebook\";\n\nexport default [...facebook];","const FacebookAccount = `\ntype FacebookAccount {\n    _id: String,\n    status: Int,\n    name: String,\n    money:FacebookAccountMoney,\n    endAdvertiser: FacebookAccountEndAdvertiser,\n    created: String,\n    business: FacebookAccountBusiness\n}\n`;\n\nconst FacebookAccountMoney = `\ntype FacebookAccountMoney {\n    spent: String,\n    balance: String,\n    currency: String\n}\n`;\n\nconst FacebookAccountBusiness = `\ntype FacebookAccountBusiness {\n    _id: String,\n    name: String\n}\n`;\n\nconst FacebookAccountEndAdvertiser = `\ntype FacebookAccountEndAdvertiser {\n    _id: String,\n    name: String\n}\n`;\n\nconst FacebookCampaign = `\ntype FacebookCampaign {\n    _id: String,\n    name: String,\n    account: FacebookAccount,\n    buyingType: String,\n    objective: String,\n    status: FacebookCampaignStatus,\n    created: String,\n    updated: String,\n    spendCap: String,\n    startDate: String,\n    endDate: String,\n    adSets: [FacebookAdSet]\n}\n`;\n\nconst FacebookCampaignStatus = `\ntype FacebookCampaignStatus {\n    configured: String,\n    effective: String,\n    status: String\n}\n`;\n\nconst FacebookAdSet = `\ntype FacebookAdSet {\n    _id: String\n    name: String,\n    account: FacebookAccount,\n    campaign: FacebookCampaign,\n    created: String,\n    updated: String,\n    status: FacebookAdSetStatus,\n    money: FacebookAdSetMoney,\n    billingEvent: String,\n    goal: String,\n    startDate: String,\n    endDate: String,\n    recommendations: [FacebookAdSetRecommendation],\n    impressions: String,\n    promotedObject: FacebookAdSetPromotedObject,\n    targeting: FacebookAdSetTarget,\n    ads:[FacebookAd]\n}\n`;\n\nconst FacebookAdSetTarget = `\ntype FacebookAdSetTarget {\n    user_os: [String],\n    user_device: [String],\n    facebook_positions: [String],\n    age_max: String,\n    age_min: String,\n    geo_locations: FacebookAdSetTargetGeoLocations,\n    publisher_platforms: [String]\n}\n`;\n\n\n\nconst FacebookAdSetTargetGeoLocations = `\ntype FacebookAdSetTargetGeoLocations {\n    countries: [String],\n    locationTypes: [String]\n}\n`;\n\nconst FacebookAdSetPromotedObject = `\ntype FacebookAdSetPromotedObject {\n    type: String,\n    data: String\n}\n`;\n\nconst FacebookAdSetStatus = `\ntype FacebookAdSetStatus {\n    configured: String,\n    effective: String,\n    status: String\n}\n`;\n\nconst FacebookAdSetRecommendation = `\ntype FacebookAdSetRecommendation {\n    field: String,\n    code: String,\n    confidence: String,\n    importance: String,\n    message: String,\n    title: String\n}\n`;\n\nconst FacebookAdSetMoney = `\ntype FacebookAdSetMoney {\n    autoBid: Boolean,\n    avgPrizePaceing: Boolean,\n    budget: FacebookAdSetMoneyBudget\n}\n`;\n\nconst FacebookAdSetMoneyBudget = `\ntype FacebookAdSetMoneyBudget {\n    daily: String,\n    lifetime: String,\n    remaining: String\n}\n`;\n\nconst FacebookAd = `\ntype FacebookAd {\n    _id: String\n    name: String,\n    status: FacebookAdStatus,\n    adSet: FacebookAdSet,\n    campaign: FacebookCampaign,\n    created: String,\n    updated: String,\n    creative:[FacebookAdCreative],\n    reviewFeedback: String\n}\n`;\n\nconst FacebookAdStatus = `\ntype FacebookAdStatus {\n    configured: String,\n    effective: String,\n    status: String\n}\n`;\n\nconst FacebookAdCreative = `\ntype FacebookAdCreative {\n    _id: String\n    title: String,\n    body: String,\n    image: String,\n    link: String,\n    object: FacebookAdCreativeObject,\n    ctaType: String\n}\n`;\n\nconst FacebookAdCreativeObject = `\ntype FacebookAdCreativeObject {\n    type: String,\n    data: String\n}\n`;\n\nconst FacebookAudience = `\ntype FacebookAudience {\n    users: Int,\n    estimate_ready: Boolean\n}\n`;\n\nconst FacebookAdsCampaignAudienceEstimateTargetingSpecCountries = `\ninput FacebookAdsCampaignAudienceEstimateTargetingSpecCountries {\n    countries: [String]\n}\n`;\n\nconst FacebookAdsCampaignAudienceEstimateTargetingSpec = `\ninput FacebookAdsCampaignAudienceEstimateTargetingSpec {\n    geo_locations: FacebookAdsCampaignAudienceEstimateTargetingSpecCountries,\n    age_min: Int,\n    age_max: Int\n}\n`;\n\nconst FacebookAdsCampaignsAudienceEstimate = `\ninput FacebookAdsCampaignsAudienceEstimate {\n    currency: String,\n    optimize_for: String,\n    targeting_spec: FacebookAdsCampaignAudienceEstimateTargetingSpec\n}\n`;\n\nconst FacebookDeliveryEstimateBind_Est = `\ntype FacebookDeliveryEstimateBind_Est {\n    min_bid: Int,\n    median_bid: Int,\n    max_bid: Int,\n}\n`;\n\nconst FacebookDeliveryEstimateDaily_out = `\ntype FacebookDeliveryEstimateDaily_out {\n    spend: Int,\n    reach: Int,\n    impressions: Int,\n    actions: Int\n}\n`;\n\nconst FacebookDeliveryEstimate = `\ntype FacebookDeliveryEstimate {\n    bid_estimate: FacebookDeliveryEstimateBind_Est,\n    daily_outcomes_curve: [FacebookDeliveryEstimateDaily_out],\n    estimate_dau: Int,\n    estimate_mau: Int,\n    estimate_ready: Boolean\n}\n`;\n\nconst FacebookAdsCampaignsDeliveryEstimateGeolocations = `\ninput FacebookAdsCampaignsDeliveryEstimateGeolocations {\n    country_groups: [String]\n}\n`;\n\n\nconst FacebookAdsCampaignsDeliveryEstimateTargeting_Spec = `\ninput FacebookAdsCampaignsDeliveryEstimateTargeting_Spec {\n    geo_locations: FacebookAdsCampaignsDeliveryEstimateGeolocations,\n    user_device: [String],\n    user_os: [String]\n}\n`;\n\nconst FacebookAdsCampaignsDeliveryEstimate = `\ninput FacebookAdsCampaignsDeliveryEstimate {\n    targeting_spec: FacebookAdsCampaignsDeliveryEstimateTargeting_Spec,\n    optimization_goal: String\n}\n`;\n\n\nexport default [FacebookAccount, FacebookAccountMoney, FacebookAccountBusiness, FacebookAccountEndAdvertiser, FacebookCampaign, FacebookCampaignStatus, FacebookAdSet, FacebookAdSetTarget, FacebookAdSetTargetGeoLocations, FacebookAdSetPromotedObject, FacebookAdSetStatus, FacebookAdSetRecommendation, FacebookAdSetMoney, FacebookAdSetMoneyBudget, FacebookAd, FacebookAdCreative, FacebookAdCreativeObject, FacebookAdStatus, FacebookAudience, FacebookAdsCampaignsAudienceEstimate, FacebookAdsCampaignAudienceEstimateTargetingSpec, FacebookAdsCampaignAudienceEstimateTargetingSpecCountries, FacebookAdsCampaignsDeliveryEstimateGeolocations, FacebookAdsCampaignsDeliveryEstimateTargeting_Spec, FacebookAdsCampaignsDeliveryEstimate, FacebookDeliveryEstimateBind_Est, FacebookDeliveryEstimateDaily_out, FacebookDeliveryEstimate];\n","import facebook from \"./facebook\";\nimport { merge } from \"lodash\";\n\nexport default merge(facebook);","    import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        facebookAdAccounts(root, args, context) {\n            let accounts = Meteor.call(\"fb-marketing-adAccounts-list\", args.socialAccountID, args.campaignID);\n            return accounts.map(a=>{\n                let res={\n                    _id: a.account_id,\n                    name: a.name,\n                    money: {\n                        spent: a.account_id,\n                        balance: a.balance,\n                        currency: a.currency\n                    },\n                    endAdvertiser: {\n                        _id: a.end_advertiser,\n                        name: a.end_advertiser_name\n                    },\n                    created: a.created_time,\n                    business: {}\n                };\n                if(a.business && a.business.id){\n                    res.business={\n                        _id: a.business.id,\n                        name: a.business.name\n                    }\n                }\n                return res;\n            });\n        },\n        facebookAdsCampaign(root, args, context) {\n            let c = Meteor.call(\"fb-marketing-campaigns-read\", args.socialAccountID, args.campaignID);\n\n            let res = {\n                _id: c.id,\n                ibolAccount: args.socialAccountID,\n                name: c.name,\n                account: c.account_id,\n                buyingType: c.buying_type,\n                objective: c.objective,\n                status: {\n                    configured: c.configured_status,\n                    effective: c.effective_status,\n                    status: c.status\n                },\n                created: new Date(c.created_time),\n                updated: new Date(c.updated_time),\n                spendCap: c.spend_cap,\n                startDate: new Date(c.start_time),\n                endDate: new Date(c.stop_time),\n                adsets:[]\n            };\n\n            if(c.adsets){\n                res.adSets= c.adsets.data.map(a => ({\n                    _id: a.id,\n                    ibolAccount: args.socialAccountID\n                }))\n            }\n\n            return res;\n        },\n        facebookAdsCampaigns(root, args, context) {\n            console.log(\"facebookAdsCampaigns\", args.socialAccountID, args.adAccountID);\n            let campaigns = Meteor.call(\"fb-marketing-campaigns-list\", args.socialAccountID, args.adAccountID);\n\n\n            return campaigns.map(c=>{\n                let res={\n                    _id: c.id,\n                    ibolAccount: args.socialAccountID,\n                    name: c.name,\n                    account: c.account_id,\n                    buyingType: c.buying_type,\n                    objective: c.objective,\n                    status: {\n                        configured: c.configured_status,\n                        effective: c.effective_status,\n                        status: c.status\n                    },\n                    created: new Date(c.created_time),\n                    updated: new Date(c.updated_time),\n                    spendCap: c.spend_cap,\n                    startDate: new Date(c.start_time),\n                    endDate: new Date(c.stop_time),\n                    adSets: []\n                };\n                if(c.adsets && c.adsets.data){\n                    res.adSets=c.adsets.data.map(a => ({\n                        _id: a.id,\n                        ibolAccount: args.socialAccountID\n                    }))\n                }\n                return res;\n            });\n        },      \n        facebookAdsCampaignsAdSets(root, args, context) {\n            let adSets = Meteor.call(\"fb-marketing-adsets-from-campaign\", args.socialAccountID, args.campaignID);\n            console.log('facebookAdsCampaignsAdSets', adSets)\n            return adSets.map(a => {\n                let res={\n                    _id: a.id,\n                    ibolAccount: args.socialAccountID,\n                    name: a.name,\n                    account: a.account_id,\n                    campaign: a.campaign._id,\n                    created: new Date(a.created_time),\n                    updated: new Date(a.updated_time),\n                    billingEvent: a.billing_event,\n                    goal: a.optimization_goal,\n                    startDate: new Date(a.start_time),\n                    endDate: new Date(a.end_time),\n                    money: {\n                        autoBid: a.is_autobid,\n                        avgPrizePaceing: a.is_average_price_pacing,\n                        budget: {\n                            daily: a.daily_budget,\n                            lifetime: a.lifetime_budget,\n                            remaining: a.budget_remaining\n                        }\n                    },\n                    recommendations: [],\n                    impressions: a.lifetime_imps,\n                    status: {\n                        configured: a.configured_status,\n                        effective: a.effective_status,\n                        status: a.status\n                    },\n                    promotedObject: {\n                        type: \"Page\",\n                        data: a.promoted_object?a.promoted_object.page_id: null\n                    },\n                    targeting: {\n                        user_os: a.targeting.user_os,\n                        user_device: a.targeting.user_device,\n                        facebook_positions: a.targeting.facebook_positions,\n                        age_max: a.targeting.age_max,\n                        age_min: a.targeting.age_min,\n                        geo_locations: {\n                            countries: a.targeting.geo_locations.countries,\n                            locationTypes: a.targeting.geo_locations.location_types,\n                            publisher_platforms: a.targeting.platforms\n                        },\n                    }\n                };\n                if(a.recommendations){\n                    res.recommendations=a.recommendations.map(r => ({\n                        field: r.blame_field,\n                        code: r.code,\n                        confidence: r.confidence,\n                        importance: r.importance,\n                        message: r.message,\n                        title: r.title\n                    }));\n                }\n                return res;\n            });\n        },\n        facebookAdsCampaignsAdSetAds(root, args, context) {\n            let ads = Meteor.call(\"fb-marketing-ads-from-adset\", args.socialAccountID, args.adSetID);\n\n            return ads.data.map(a => ({\n                _id: a.id,\n                name: a.name,\n                status: {\n                    configured: a.configured_status,\n                    effective: a.effective_status,\n                    status: a.status\n                },\n                adSet: a.adset_id,\n                creative: []\n            }))\n        },\n        facebookAdsCampaignsAdSetAd(root, args, context) {\n            let res = Meteor.call(\"fb-marketing-ads-read\", args.socialAccountID, args.adID);\n            let reviewFeedback=null;\n            if(res.ad_review_feedback){\n                let messages=[];\n                Object.keys(res.ad_review_feedback.global).forEach(key=>{\n                    messages.push(res.ad_review_feedback.global[key]);\n                });\n                reviewFeedback=messages.join(\", \");\n            }\n\n            return {\n                _id: res.id,\n                ibolAccount: args.socialAccountID,\n                name: res.name,\n                status: {\n                    configured: res.configured_status,\n                    effective: res.effective_status,\n                    status: res.status\n                },\n                adSet: res.adset.id,\n                campaign: res.campaign.id,\n                created: res.created_time,\n                updated: res.updated_time,\n                creative:res.adcreatives.data.map(creative=>creative.id),\n                reviewFeedback\n            };\n        },\n        facebookAdsCampaignsAudienceEstimate: (root, args, context) => {\n            let audience = Meteor.call(\"fb-marketing-campaigns-audience\", args.socialAccountID, args.adID, args.data);\n            console.log('facebookAdsCampaignsAudienceEstimate', audience)\n            return audience.data;\n        },\n        facebookAdsCampaignsDeliveryEstimate: (root, args, context) => {\n            let delivery_es = Meteor.call(\"fb-marketing-campaigns-delivery-estimate\", args.socialAccountID, args.adID, args.data);\n            console.log('facebookAdsCampaignsDeliveryEstimate', delivery_es)\n            return delivery_es.data[0];\n        },\n    },\n    FacebookCampaign: {\n        account: (campaign) => {\n            console.log(\"FACEBOOK_CAMPAIGN_ACCOUNT\", campaign.ibolAccount, campaign.account);\n            let a = Meteor.call(\"fb-marketing-adAccounts-read\", campaign.ibolAccount, campaign.account);\n            return {\n                _id: a.id,\n                status: a.account_status,\n                money: {\n                    spent: a.amount_spent,\n                    balance: a.balance,\n                    currency: a.currency\n                },\n                endAdvertiser: {\n                    _id: a.end_advertiser,\n                    name: a.end_advertiser_name\n                },\n                business: {\n                    _id: a.business.id,\n                    name: a.business.name\n                },\n                created: new Date(a.created_time)\n            }\n        },\n        adSets: (campaign) => {\n            let adSets = Meteor.call(\"fb-marketing-adsets-from-campaign\", campaign.ibolAccount, campaign._id);\n\n            return adSets.map(a => ({\n                _id: a.id,\n                ibolAccount: campaign.ibolAccount,\n                name: a.name,\n                account: a.account_id,\n                campaign: a.campaign._id,\n                created: new Date(a.created_time),\n                updated: new Date(a.updated_time),\n                billingEvent: a.billing_event,\n                goal: a.optimization_goal,\n                startDate: new Date(a.start_time),\n                endDate: new Date(a.end_time),\n                money: {\n                    autoBid: a.is_autobid,\n                    avgPrizePaceing: a.is_average_price_pacing,\n                    budget: {\n                        daily: a.daily_budget,\n                        lifetime: a.lifetime_budget,\n                        remaining: a.budget_remaining\n                    }\n                },\n                recommendations: a.recommendations.map(r => ({\n                    field: r.blame_field,\n                    code: r.code,\n                    confidence: r.confidence,\n                    importance: r.importance,\n                    message: r.message,\n                    title: r.title\n                })),\n                impressions: a.lifetime_imps,\n                status: {\n                    configured: a.configured_status,\n                    effective: a.effective_status,\n                    status: a.status\n                },\n                promotedObject: {\n                    type: \"Page\",\n                    data: a.promoted_object.page_id\n                },\n                target: {\n                    age: {\n                        max: a.targeting.age_max,\n                        min: a.targeting.age_min\n                    },\n                    geoLocations: {\n                        countries: a.targeting.geo_locations.countries,\n                        locationTypes: a.targeting.geo_locations.location_types\n                    },\n                    platforms: a.targeting.platforms\n                }\n            }))\n        }\n    },\n    FacebookAdSet: {\n        ads: (adSet) => {\n            let ads = Meteor.call(\"fb-marketing-ads-from-adset\", adSet.ibolAccount, adSet._id);\n            return ads.data.map(a => ({\n                _id: a.id,\n                name: a.name,\n                status: a.status,\n                adSet: a.adset_id,\n                creative: []\n            }))\n        }\n    },\n    FacebookAd: {\n        creative: (ad) => {\n            let creatives = Meteor.call(\"fb-marketing-adCreative-from-ad\", ad.ibolAccount, ad._id);\n            return creatives.data.map(a => ({\n                _id: a.id,\n                body: a.body,\n                image: a.image_url,\n                link: a.link_url,\n                ctaType: a.call_to_action_type,\n                title: a.title\n            }))\n        }\n    }\n};\n\n","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","import invites from \"./invites\";\n\nexport default [...invites];","import Campaign from \"../../campaign/definitions/campaign\";\n\nconst InviteMessage = `\ntype InviteMessage {\n    message: String,\n    media: String,\n    date: String,\n    quantity: Int,\n    location: String\n}\n`;\n\nconst InviteNetworks = `\ntype InviteNetworks {\n    twitter: Boolean,\n    facebook: Boolean,\n    instagram: Boolean\n}\n`;\n\nconst Invite = `\ntype Invite {\n    _id: String,\n    createdAt:String,\n    updatedAt:String,\n    owner: User,\n    campaign: Campaign,\n    type: String,\n    status: String, \n    deadline: String,\n    influencers:[Account],\n    teamAttacks: [TeamAttack],\n    invitesAvailable:Int,\n    budget: String,\n    useHashtag: Boolean,\n    options:[InviteMessage],\n    networks: InviteNetworks\n}\n`;\n\n\nexport default [Invite, InviteMessage, InviteNetworks, ...Campaign];\n","import invites from \"./invites\";\nimport { merge } from \"lodash\";\n\nexport default merge(invites);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        invitesCampaign(root, args, context) {\n            console.log(\"INVITES_CAMPAIGNS\",args);\n\n            let invites=Invites.find({campaign:args.campaignID}).fetch();\n            return invites;\n        }\n    },\n    Invite: {\n        campaign: (invite) => {\n            let user = Campaigns.findOne({_id: invite.campaign});\n            return user;\n        },\n        influencers: (invite) => {\n            let members = SocialAccounts.find({\n                _id: {$in: invite.influencers}\n            }, {fields: {connection: 0}}).fetch();\n            return members;\n        },\n        owner: (invite) => {\n            let user = Meteor.users.findOne({_id: invite.owner}, {fields: {services: 0}});\n            return user;\n        },\n\t    teamAttacks: (invite) => {\n            return TeamAttack.find({_id: {$in: invite.teamAttacks}}).fetch();\n        }\n    }\n};\n","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","export default {\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    owner: null,\n    campaign: null,\n    status: \"draft\",\n    influencers: [],\n    teamAttacks: [],\n    invitesAvailable: 0,\n    budget: null,\n    deadline: null,\n    useHashtag: true,\n    type: \"post\",\n    options: [],\n    networks: {\n        facebook: true,\n        twitter: true,\n        instagram: true\n    }\n};\n","import news from \"./news\";\n\nexport default [...news];","\nconst News = `\ntype News {\n    author: String,\n    title: String,\n    link: String,\n    image: String,\n    type: String\n}\n`;\n\n\nexport default [News];","import news from \"./news\";\nimport { merge } from \"lodash\";\n\nexport default merge(news);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        getNews(root, args, context) {\n            let path = \"http://viralizing.me\";\n            let tag = \"news\";\n            if (args.lang === \"es\") {\n                path = \"http://viralizing.me/es\";\n                tag = \"noticias\";\n            }\n\n            let blog = Meteor.call(\"rss-feed\", path + \"/feed/\") || [];\n            blog.map((n) => Object.assign(n, {type: \"blog\"}));\n            let news = Meteor.call(\"rss-feed\", path + \"/feed/?tag=\" + tag) || [];\n            news.map((n) => Object.assign(n, {type: \"news\"}));\n\n            console.log(\"QUERY_RESULTS\",[...blog, ...news]);\n            return [...blog, ...news];\n        }\n    }\n};\n","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","import payments from \"./payments\";\n\nexport default [...payments];","\nconst Payment = `\ntype Payment {\n    _id: String,\n    from: User,\n    to: Account,\n    campaign: Campaign,\n    amount: String,\n    date: String,\n    status: String,\n    type: String,\n    paymentMethod: PaymentMethod,\n    post: Post\n}\n`;\n\nconst PaymentMethod = `\ntype PaymentMethod {\n    brand: String,\n    last4: String\n}\n`;\n\n\nexport default [Payment, PaymentMethod];","import payments from \"./payments\";\nimport { merge } from \"lodash\";\n\nexport default merge(payments);","import {Meteor} from 'meteor/meteor';\nimport moment from \"moment\";\n\nfunction getMonthDateRange(year, month) {\n    console.log(\"GET_MONTH_DATE_RANGE_BEFORE\",year, month);\n    if(typeof year===\"string\" ) year=Number(year);\n    if(typeof month===\"string\" ) month=Number(month);\n    console.log(\"GET_MONTH_DATE_RANGE_After\",year, month);\n    // month in moment is 0 based, so 9 is actually october, subtract 1 to compensate\n    // array is 'year', 'month', 'day', etc\n    let startDate = moment([year, month - 1]);\n\n    // Clone the value before .endOf()\n    let endDate = moment(startDate).endOf('month');\n\n    // just for demonstration:\n    console.log(startDate.toDate());\n    console.log(endDate.toDate());\n\n    // make sure to call toDate() for plain JavaScript date type\n    return { $gt: startDate.toDate(), $lt: endDate.toDate() };\n}\n\nexport default {\n    Query: {\n        paymentsOwn(root, args, context) {\n            let userID=context.userId;\n            let {year, month}=args;\n\n            let usersQuery = {\n                $or: [{owner: userID}, {manager: userID}, {shares: {$in: [userID]} }],\n                delete: {$ne: true}\n            };\n            let userIDs=SocialAccounts.find(usersQuery, {fields:{_id:1}}).fetch().map(u=>u._id);\n\n            console.log(\"USER_IDS\", userIDs);\n\n            let query={\n                $or: [{from: userID}, {to: {$in: userIDs} }]\n            };\n\n            if(year && month){\n                query.date=getMonthDateRange(year, month);\n            }\n            console.log(\"PAYMENTS_OWN\", args);\n\n            console.log(\"PAYPEMTS_OWN_QUERY\", query);\n\n            let results=Payments.find(query).fetch().map(p=>Object.assign({},p,{\n                type: p.from===userID?\"outgoing\":\"incoming\"\n            }));\n\n            console.log(\"PAYMENTS_OWN\", results.length);\n\n            return results;\n        }\n    },\n    Payment: {\n        from: (payment) => {\n            return Meteor.users.findOne({_id: payment.from}, {fields: {services: 0}});\n        },\n        to: (payment) => {\n            return SocialAccounts.findOne({_id: payment.to}, {fields: {services: 0}});\n        },\n        campaign: (payment) => {\n            return Campaigns.findOne({_id: payment.campaign});\n        },\n        post: (payment) => {\n            return Posts.findOne({_id: payment.post})||{};\n        },\n    }\n};","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","export default {\n    status: \"draft\", //draft, scheduled, rejected, paid, completed\n    from: null,\n    to: null,\n    campaign: null,\n    amount: null,\n    date: new Date(),\n    paymentMethod: {\n        brand: null,\n        last4: null\n    }\n}\n","import posts from \"./posts\";\n\nexport default [...posts];","const PostAccount = `\ntype PostAccount {\n    _id: String,\n    name: String,\n    lastName: String,\n    avatar: String,\n    network: String,\n    fullProfile: Account\n}\n`;\n\nconst PostData = `\ntype PostData {\n    message: String,\n    media: String,\n    location: String\n}\n`;\n\nconst Post = `\ntype Post {\n    _id: String,\n    status: String,\n    type: String,\n    date: String,\n    deadline: String,\n    campaign: String,\n    invite: String,\n    isPaid: Boolean,\n    useHashtag: Boolean\n    account: PostAccount,\n    owner: User,\n    data: PostData\n}\n`;\n\nexport default [Post, PostData, PostAccount];","import posts from \"./posts\";\nimport { merge } from \"lodash\";\n\nexport default merge(posts);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        postsOwn(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            return Posts.find({owner: userID}).fetch();\n        },\n        postsInvite(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            let query = {\n                campaign: args.campaignID,\n                invite: args.inviteID\n            };\n            let result=Posts.find(query).fetch();\n            console.log(\"POSTS_INVITE\",query, result.length);\n            return result;\n        }\n    },\n    Post: {\n        owner: (post) => {\n            let user = Meteor.users.findOne({_id: post.owner}, {fields: {services: 0}});\n            return user\n        }\n    },\n    PostAccount: {\n        fullProfile: (account) => {\n            let user = SocialAccounts.findOne({_id: account._id}, {fields: {services: 0}});\n            return user\n        }\n    }\n};","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","export default {\n    status: \"draft\", //draft, pending, sent, accepted, rejected, scheduled, published, completed, cancelled, suspended\n    type: \"post\", //post, share, noPost, profile, cover\n    date: null,\n    campaign: null, //Campaign ID\n    invite: null, //Announcement ID\n    isPaid: true,\n    account: {\n        id: null,\n        name: null,\n        lastName: null,\n        avatar: null,\n        network: null\n    },\n    owner: \"\",\n    data: {\n        message: \"\",\n        media: null,\n        location: null\n    }\n};\n","import reports from \"./reports\";\n\nexport default [...reports];","const Report = `\ntype Report {\n    _id: String,\n    name: String,\n    owner: User\n    items: [ReportItem]\n}\n`;\n\nconst ReportItem = `\ntype ReportItem {\n    name: String,\n    Description: String,\n    type: String,\n    size: String,\n    source: ReportItemSource\n}\n`;\n\nconst ReportItemSource = `\ntype ReportItemSource {\n    type: String,\n    account: Account,\n    campaign: Campaign\n}\n`;\n\nexport default [Report, ReportItem, ReportItemSource];","import reports from \"./reports\";\nimport { merge } from \"lodash\";\n\nexport default merge(reports);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        reportsOwn(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                owner: userID\n            };\n\n            return Reports.find(query).fetch();\n\n        },\n        report(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                _id: args.reportId\n            };\n\n            return Reports.findOne(query);\n        },\n    },\n    Report: {\n        owner: (account) => {\n            let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n            return user\n        }\n    }\n};","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","export default {\n    name: null,\n    owner: null,\n    items: []\n};","import search from \"./search\";\n\nexport default [...search];","const SearchUser = `\ntype SearchUser {\n    name: String,\n    screenName: String,\n    avatar: String\n}\n`;\n\nconst SearchMedia = `\ntype SearchMedia {\n    type: String,\n    url: String,\n    preview: String\n}\n`;\n\nconst SearchItem = `\ntype SearchItem {\n    link:String,\n    title:String,\n    date: String,\n    description: String,\n    network:String,\n    media: SearchMedia,\n    user: SearchUser\n}\n`;\n\nconst TwitterTrendingPlace = `\ntype TwitterTrendingPlace {\n    country: String,\n    name: String,\n    countryCode: String,\n    type: String,\n    woeid: String,\n    parent: String\n}\n`;\n\nconst TwitterTrends = `\ntype TwitterTrends {\n    hashtag: String,\n    url: String,\n    promoted: String,\n    volume: String\n}\n`;\n\n\nexport default [SearchItem, SearchUser, SearchMedia, TwitterTrendingPlace, TwitterTrends];","import search from \"./search\";\nimport { merge } from \"lodash\";\n\nexport default merge(search);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        search(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            let results=[];\n            console.log(\"SOCIAL_MEDIA_SEARCH\",args);\n            if (args.google) {\n                console.log(\"GOOGLE_SEARCH\");\n                let google = Meteor.call(\"google-search\", args.query);\n                if(google.error){\n                    console.log(\"ERROR\");\n                    let newItem={\n                        link:\"https://viralizing.me\",\n                        title:\"Unavailable\",\n                        description: \"Google Search is not currently available.\",\n                        date: null,\n                        network:\"google\",\n                        media: {\n                            type: null,\n                            url: null,\n                            preview: null\n                        },\n                        user:{\n                            name:null,\n                            screenName: null,\n                            avatar: null\n                        }\n                    };\n                    results.push(newItem);\n                }else{\n                    if(!google.items){\n                        console.log(\"GOOGLE_ERROR\",google);\n                    }else{\n                        google.items.forEach((item) => {\n                            let newItem={\n                                link:item.link,\n                                title:item.title,\n                                description: item.snippet,\n                                date: null,\n                                network:\"google\",\n                                media: {\n                                    type: null,\n                                    url: null,\n                                    preview: null\n                                },\n                                user:{\n                                    name:null,\n                                    screenName: null,\n                                    avatar: null\n                                }\n                            };\n                            results.push(newItem);\n                        });\n                    }\n                }\n            }\n            if(args.twitter) {\n                console.log(\"TWITTER_SEARCH\");\n                let twitter = Meteor.call(\"twitter-search\", args.query);\n                twitter.statuses.forEach((item)=> {\n                    let newItem={\n                        link:null,\n                        title:null,\n                        description: item.text,\n                        date: item.created_at,\n                        network:\"twitter\",\n                        media: {},\n                        user:{\n                            name:item.user.name,\n                            screenName:item.user.screen_name,\n                            avatar:item.user.profile_image_url_https\n                        }\n                    };\n                    if(item.entities && item.entities.media && item.entities.media[0] && item.entities.media[0].media_url_https){\n                        let entityMedia=item.entities.media[0];\n                        newItem.media={\n                            type: entityMedia.type,\n                            url: entityMedia.media_url_https,\n                            preview:null,\n                        };\n                    }\n                    if(item.extended_entities && item.extended_entities.media && item.extended_entities.media[0] && item.extended_entities.media[0].video_info){\n                        let video=item.extended_entities.media[0].video_info;\n                        newItem.media={\n                            type: \"video\",\n                            url: video.variants[0].url,\n                            preview: item.entities.media[0].media_url_https\n                        };\n                    }\n                    results.push(newItem);\n                });\n            }\n            return results;\n        },\n        woeidPlaces(root, args, context){\n            return Meteor.call(\"twitter-trends-available\");\n        },\n        twitterTrends(root, args, context){\n            if(!args.woeid){\n                return [];\n            }\n            let res=Meteor.call(\"twitter-trends-place\",args.woeid);\n            return res[0].trends\n        }\n    },\n    TwitterTrendingPlace: {\n        parent: function(place){\n            return place.parentid\n        },\n        type: function(place){\n            return place.placeType.name\n        }\n    },\n    TwitterTrends: {\n        hashtag: function (trend) {\n            return trend.name;\n        },\n        promoted: function (trend) {\n            return trend.promoted_content;\n        },\n        volume: function (trend) {\n            return trend.tweet_volume;\n        }\n    }\n}\n","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","import teamAttack from \"./team-attack\";\n\nexport default [...teamAttack];","const TeamAttack = `\ntype TeamAttack {\n    _id: String,\n    name: String,\n    type: String,\n    owner: User,\n    action: String,\n    members: [Account]\n}\n`;\n\nexport default [TeamAttack];","import teamAttack from \"./team-attack\";\nimport { merge } from \"lodash\";\n\nexport default merge(teamAttack);","import {Meteor} from 'meteor/meteor';\n\nexport default {\n    Query: {\n        teamAttacksOwn(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                owner: userID\n            };\n\n            return TeamAttack.find(query).fetch();\n        },\n\n        teamAttack(root, args, context) {\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n\n            let query = {\n                _id: args._id\n            };\n\n            return TeamAttack.findOne(query);\n        },\n\n        accountsTeamAttack(root, args, context){\n            const userID = context.userId || \"zfbP3aTqiP8yAg8NQ\";\n            console.log(\"ACCOUNTS_TEAM_ATTACK\", args);\n            let {\n                action_type,\n                results_order,\n                influencer_gender,\n                influencer_age,\n                influencer_country,\n                influencer_followers,\n                audience_gender,\n                audience_age,\n                audience_nrssg,\n                audience_country,\n                influencer_networks\n            }=args;\n\n            let getBounds = function (bounds, validator) {\n                let $gt = bounds.min;\n                let $lt = bounds.max;\n\n                if (validator) {\n                    $gt = validator(bounds.min);\n                    $lt = validator(bounds.max);\n                }\n\n                return {$gt, $lt};\n            };\n\n            let query = {\n                suspended: {$ne: true},\n                delete: {$ne: true},\n                network: {$in: influencer_networks}\n            };\n\n            let options = {};\n\n            if(results_order && action_type){\n                options.sort={};\n                switch(results_order) {\n                    case \"higherPrice\":\n                        options.sort[`pricing.${action_type}`]=-1;\n                        break;\n                    case \"lowestPrice\":\n                        options.sort[`pricing.${action_type}`]=1;\n                        break;\n                    case \"higherEngagement\":\n                        options.sort[\"statistics.engagement\"]=-1;\n                        break;\n                    case \"lowerEngagement\":\n                        options.sort[\"statistics.engagement\"]=1;\n                        break;\n                }\n            }\n\n            if(action_type){\n                if(action_type===\"post\" || action_type===\"share\"){\n                    query[`pricing.${action_type}`]={$exists:true, $ne:\"\"};\n                }\n            }\n\n            if (influencer_gender && influencer_gender !== \"all\") {\n                query[\"information.gender\"] = influencer_gender;\n            }\n\n            if (influencer_age && influencer_age !== \"all\") {\n                influencer_age={min: influencer_age.max, max:influencer_age.min};\n                query[\"information.birthDate\"] = getBounds(influencer_age, function(value){\n                    return moment().subtract(Number(value),\"years\").toDate();\n                });\n            }\n\n            console.log(\"ACCOUNTS_TEAM_ATTACK_QUERY\", query, options);\n            return SocialAccounts.find(query, options).fetch();\n            //TODO: ADD FILTER ONLY INFLUENCER ACCOUNTS\n\n\n\n\n            console.log(\"INFLUENCER_FOLLOWERS\",influencer_followers);\n\n            //ARGS: { gender: 'all', age: 'all', country: 'all', followers: 'all' }\n\n\n            if (influencer_country && influencer_country !== \"all\") {\n                query[\"information.country\"] = {$in: influencer_country};\n            }\n\n\n\n\n            if (influencer_followers && influencer_followers !== \"all\") {\n                query[\"statistics.followers\"] = getBounds(influencer_followers, Number);\n            }\n\n            if (audience_gender && audience_gender !== \"all\") {\n                query[\"information.audience.gender\"] = audience_gender;\n            }\n\n            if (audience_nrssg && audience_nrssg !== \"all\") {\n                query[\"information.audience.nrssg\"] = audience_nrssg;\n            }\n\n            if (audience_country && audience_country !== \"all\") {\n                query[\"information.audience.country\"] = {$in: audience_country};\n            }\n\n            if (audience_age && audience_age !== \"all\") {\n                let queryValues=[];\n                let brackets=[\"18-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65\"];\n\n                brackets.forEach((bracket)=>{\n                    let split=bracket.split(\"-\");\n                    let minValue=Number(split[0]);\n                    let maxValue=Number(split[1]);\n                    if(minValue>=audience_age.min && maxValue<=audience_age.max){\n                        queryValues.push(bracket);\n                    }\n                });\n\n                query[\"information.audience.age\"] = {$in:queryValues};\n            }\n\n            console.log(\"ACCOUNTS_TEAMATTACK\", query);\n            return SocialAccounts.find(query).fetch();\n        },\n    },\n    TeamAttack: {\n        owner: (account) => {\n            let user = Meteor.users.findOne({_id: account.owner}, {fields: {services: 0}});\n            return user\n        },\n        members: (team) => {\n            if(!team.members || team.members.length===0){\n                return [];\n            }\n            let members = SocialAccounts.find({\n                _id: {$in: team.members}\n            }, {fields: {connection: 0}}).fetch();\n            return members\n        }\n    }\n};\n","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","export default {\n    name: null,\n    owner: null,\n    members: []\n};","import User from \"./users\";\n\nexport default [...User];","const StripeCoupon = `\ntype StripeCoupon {\n    id: String\n    amount_off: String\n    created: String\n    currency: String\n    duration: String\n    duration_in_months: Int\n    percent_off: Int\n    redeem_by: String\n    times_redeemed: Int\n    valid: Boolean\n}\n`;\n\nconst UserCoupon = `\ntype UserCoupon {\n    coupon: StripeCoupon\n    start: String,\n    end: String,\n    subscription: String\n}\n`;\n\nconst StripeCard = `\ntype StripeCard {\n    brand: String,\n    country: String,\n    id: String,\n    last4: String\n}\n`;\n\nconst StripeBankAccount = `\ntype StripeBankAccount {\n    name: String\n    type: String,\n    bank: String,\n    country: String,\n    currency: String,\n    id: String,\n    last4: String\n}\n`;\n\nconst StripeSubscriptionPlan = `\ntype StripeSubscriptionPlan {\n    created: String,\n    quantity: String,\n    amount: Int,\n    currency: String,\n    name: String,\n    interval: String,\n    intervalCount: Int\n}\n`;\n\nconst StripeSubscription = `\ntype StripeSubscription {\n    created: String,\n    periodEnd: String,\n    periodStart: String,\n    id: String,\n    quantity: String,\n    startDate: String,\n    trialStart: String,\n    trialEnd: String,\n    plans: [StripeSubscriptionPlan]\n}\n`;\n\nconst StripeCharge = `\ntype StripeCharge {\n    id: String,\n    amount: Int,\n    refunded: Boolean,\n    refundedAmount: Int,\n    captured: Boolean,\n    date: String,\n    currency: String,\n    description: String,\n    dispute: String,\n    failureCode: String,\n    failureMessage: String,\n    paid: Boolean,\n    status: String,\n    invoice: StripeInvoice\n}\n`;\n\nconst StripeInvoice = `\ntype StripeInvoice {\n  id: String,\n  amountDue: Int,\n  attempts: Int,\n  nextAttempt: String,\n  charge: StripeCharge,\n  closed: String,\n  currency: String,\n  date: String,\n  description: String,\n  discount: String,\n  startingBalance: String,\n  endingBalance: String,\n  forgive: String,\n  paid: String,\n  periodEnd: String,\n  periodStart: String,\n  subtotal: Int,\n  tax: String,\n  taxPercent: Int,\n  total: Int\n}\n`;\n\nconst StripeUser = `\ntype StripeUser {\n    id: String, \n    balance: Int,\n    created: String,\n    currency: String,\n    default_source: String,\n    delinquent: Boolean,\n    description: String,\n    discount: UserCoupon,\n    defaultCard: StripeCard\n    cards: [StripeCard],\n    banks: [StripeBankAccount],\n    subscriptions: [StripeSubscription],\n    invoices: [StripeInvoice],\n    charges: [StripeCharge]\n}\n`;\n\nconst ZendeskComment = `\ntype ZendeskComment {\n  id: String,\n  author: ZendeskUser,\n  body: String,\n  channel: String,\n  created: String\n}\n`;\n\nconst ZendeskUser = `\ntype ZendeskUser {\n  id: String,\n  email: String,\n  name: String,\n  role: String,\n  created: String,\n  updated: String,\n  tags: String\n}\n`;\n\n\nconst ZendeskTicket = `\ntype ZendeskTicket {\n  id:String,\n  assignee:ZendeskUser,\n  collaborators: [String],\n  created: String,\n  updated: String,\n  priority: String,\n  requester: ZendeskUser,\n  satisfaction: String,\n  status: String,\n  subject: String,\n  description: String,\n  tags: [String],\n  comments: [ZendeskComment]\n}\n`;\n\nconst UserSupport = `\ntype UserSupport {\n  id: String,\n  tickets: [ZendeskTicket]\n}\n`;\n\nconst UserEmail = `\ntype UserEmail {\n  address: String\n  verified: Boolean\n}\n`;\nconst UserProfile = `\ntype UserProfile {\n    name: String,\n    lastName: String,\n    avatar: String\n}\n`;\n\nconst MixpanelEventProperties = `\ntype MixpanelEventProperties {\n    browser: String,\n    url: String,\n    referrer: String\n}\n`;\n\nconst MixpanelEvent = `\ntype MixpanelEvent {\n    id: String,\n    name: String,\n    created: String,\n    properties: MixpanelEventProperties\n}\n`;\n\nconst User = `\ntype User {\n  emails: [UserEmail]\n  profile: UserProfile,\n  stripe: StripeUser,\n  support: UserSupport,\n  events: [MixpanelEvent]\n  _id: String\n}\n`;\n\nexport default [User, UserEmail, UserProfile,StripeUser,UserCoupon,StripeCoupon,StripeCard,StripeBankAccount,StripeSubscription,StripeSubscriptionPlan,StripeCharge,StripeInvoice,UserSupport,ZendeskTicket,ZendeskComment,ZendeskUser,MixpanelEvent,MixpanelEventProperties];","import users from \"./users\";\nimport { merge } from \"lodash\";\n\nexport default merge(users);","import {Meteor} from 'meteor/meteor';\nimport { HTTP } from 'meteor/http'\n\nexport default {\n    Query: {\n        user(root, args, context) {\n            const userID = context.userId || \"dzibKvJgaFFLskBZW\";\n\n            return Meteor.users.findOne(userID);\n        }\n    },\n    User: {\n        stripe: (user) => {\n            let data = Meteor.call(\"stripe_customers_get\", user);\n            data.balance = data.account_balance;\n            return data\n        },\n        support: (user) => {\n            return {...user}\n        },\n        events: (user) => {\n            let data = Meteor.call(\"mixpanel_events_user\", user);\n            return data.map((e)=>({\n                id:e.distinct_id,\n                name: e.name,\n                created: new Date(e.time),\n                properties: {\n                    browser: e.properties.$browser,\n                    url: e.properties.$current_url,\n                    referrer: e.properties.$initial_referrer\n                }\n            }));\n        },\n    },\n    StripeUser: {\n        created: (user) => {\n            return new Date(user.created * 1000)\n        },\n        defaultCard: (user) => {\n            return user.sources.data.filter((s) => s.id === user.default_source)[0];\n        },\n        cards: (user) => {\n            return user.sources.data.filter((s) => s.object === \"card\");\n        },\n        banks: (user) => {\n            return user.sources.data.filter((s) => s.object === \"bank_account\").map((s) => ({\n                name: s.account_holder_name,\n                type: s.account_holder_type,\n                bank: s.bank_name,\n                country: s.country,\n                currency: s.currency,\n                id: s.id,\n                last4: s.last4\n            }));\n        },\n        subscriptions: (user) => {\n            return user.subscriptions.data.map((s) => ({\n                created: new Date(s.created * 1000),\n                periodEnd: new Date(s.current_period_end * 1000),\n                periodStart: new Date(s.current_period_start * 1000),\n                id: s.id,\n                quantity: s.quantity,\n                startDate: new Date(s.start * 1000),\n                trialStart: s.trial_end ? new Date(s.trial_end) : null,\n                trialEnd: s.trial_start ? new Date(s.trial_start) : null,\n                plans: s.items.data.map((i) => ({\n                    created: new Date(i.created * 1000),\n                    quantity: i.quantity,\n                    amount: i.plan.amount,\n                    currency: i.plan.currency,\n                    name: i.plan.name,\n                    interval: i.plan.interval,\n                    intervalCount: i.plan.interval_count\n                }))\n            }));\n        },\n        charges: (user) => {\n            let charges = Meteor.call(\"stripe_charges_list\", {customer: user.id, limit: 100});\n            return charges.data.map((c) => ({\n                id: c.id,\n                amount: c.amount,\n                refunded: c.refunded,\n                refundedAmount: c.amount_refunded,\n                captured: c.captured,\n                date: new Date(c.created * 1000),\n                currency: c.currency,\n                description: c.description,\n                dispute: c.dispute,\n                failureCode: c.failureCode,\n                failureMessage: c.failure_message,\n                paid: c.paid,\n                status: c.status,\n                invoice: c.invoice\n            }))\n        },\n        invoices: (user) => {\n            let invoices = Meteor.call(\"stripe_invoices_list\", {customer: user.id, limit: 100});\n            return invoices.data.map((i) => ({\n                id: i.id,\n                amountDue: i.amount_due,\n                attempts: i.attempt_count,\n                nextAttempt: new Date(i.next_payment_attempt * 1000),\n                charge: i.charge,\n                closed: i.closed,\n                currency: i.currency,\n                date: new Date(i.date * 1000),\n                description: i.description,\n                discount: i.discount,\n                startingBalance: i.starting_balance,\n                endingBalance: i.ending_balance,\n                forgive: i.forgiven,\n                paid: i.paid,\n                periodEnd: new Date(i.period_end * 1000),\n                periodStart: new Date(i.period_start * 1000),\n                subtotal: i.subtotal,\n                tax: i.tax,\n                taxPercent: i.tax_percent,\n                total: i.total\n            }))\n        },\n    },\n    UserCoupon: {\n        start: (coupon) => {\n            return new Date(coupon.start * 1000)\n        },\n        end: (coupon) => {\n            return new Date(coupon.end * 1000)\n        },\n    },\n    UserSupport: {\n        tickets: (user) => {\n            let tickets=Meteor.call(\"zendesk_tickets_get_by_user\",user);\n            return tickets.map((t)=>({\n                id:t.id,\n                assignee:t.assignee_id,\n                collaborators: t.collaborator_ids,\n                created: new Date(t.created_at),\n                updated: new Date(t.updated_at),\n                priority: t.priority,\n                requester: t.requester_id,\n                satisfaction: t.satisfaction_rating,\n                status: t.status,\n                subject: t.subject,\n                description: t.description,\n                tags: t.tags,\n                comments: []\n            }));\n        }\n    },\n    ZendeskTicket: {\n        assignee: (ticket) => {\n            let user=Meteor.call(\"zendesk_user_get\",ticket.assignee);\n            if(!user){\n                return null;\n            }\n            let u=user;\n            return {\n                id: u.id,\n                email: u.email,\n                name: u.name,\n                role: u.role,\n                created: new Date(u.created_at),\n                updated: new Date(u.updated_at),\n                tags: u.tags\n            }\n        },\n        requester: (ticket) => {\n            let user=Meteor.call(\"zendesk_user_get\",ticket.requester);\n            if(!user){\n                return null;\n            }\n            let u=user;\n            return {\n                id: u.id,\n                email: u.email,\n                name: u.name,\n                role: u.role,\n                created: new Date(u.created_at),\n                updated: new Date(u.updated_at),\n                tags: u.tags\n            }\n        },\n        comments: (ticket) => {\n            let comments=Meteor.call(\"zendesk_tickets_get_comments\",ticket.id);\n            return comments.comments.map((c)=>({\n                id: c.id,\n                author: c.author_id,\n                body: c.body,\n                channel: c.via.channel,\n                created: new Date(c.created_at)\n            }));\n        }\n    },\n    ZendeskComment: {\n        author: (comment) => {\n            let user=Meteor.call(\"zendesk_user_get\",comment.author);\n            if(!user){\n                return null;\n            }\n            let u=user;\n            return {\n                id: u.id,\n                email: u.email,\n                name: u.name,\n                role: u.role,\n                created: new Date(u.created_at),\n                updated: new Date(u.updated_at),\n                tags: u.tags\n            }\n        }\n    },\n    StripeCharge: {\n        invoice: (charge) => {\n            if(!charge.invoice){\n                return null\n            }\n            let i = Meteor.call(\"stripe_invoices_get\", charge.invoice);\n\n            return {\n                id: i.id,\n                amountDue: i.amount_due,\n                attempts: i.attempt_count,\n                nextAttempt: new Date(i.next_payment_attempt * 1000),\n                charge: i.charge,\n                closed: i.closed,\n                currency: i.currency,\n                date: new Date(i.date * 1000),\n                description: i.description,\n                discount: i.discount,\n                startingBalance: i.starting_balance,\n                endingBalance: i.ending_balance,\n                forgive: i.forgiven,\n                paid: i.paid,\n                periodEnd: new Date(i.period_end * 1000),\n                periodStart: new Date(i.period_start * 1000),\n                subtotal: i.subtotal,\n                tax: i.tax,\n                taxPercent: i.tax_percent,\n                total: i.total\n            }\n        },\n    },\n    StripeInvoice: {\n        charge: (invoice) => {\n            if(!invoice.charge){\n                return null\n            }\n            let c = Meteor.call(\"stripe_charges_get\", invoice.charge);\n            return {\n                id: c.id,\n                amount: c.amount,\n                refunded: c.refunded,\n                refundedAmount: c.amount_refunded,\n                captured: c.captured,\n                date: new Date(c.created * 1000),\n                currency: c.currency,\n                description: c.description,\n                dispute: c.dispute,\n                failureCode: c.failureCode,\n                failureMessage: c.failure_message,\n                paid: c.paid,\n                status: c.status,\n                invoice: c.invoice\n            }\n        },\n    }\n};","import definitions from \"./definitions/bundle\";\nimport resolvers from \"./resolvers/bundle\";\n\nexport default {definitions, resolvers}","import Users from \"./users/bundle\";\nimport Accounts from \"./accounts/bundle\";\nimport Posts from \"./posts/bundle\";\nimport Campaign from \"./campaign/bundle\";\nimport Events from \"./events/bundle\";\nimport Invites from \"./invites/bundle\";\nimport Advertising from \"./advertising/bundle\";\nimport Search from \"./search/bundle\";\nimport News from \"./news/bundle\";\nimport TeamAttack from \"./team-attack/bundle\";\nimport AccountInvites from \"./account-invites/bundle\";\nimport CampaignInvites from \"./campaign-invites/bundle\";\nimport Reports from \"./reports/bundle\";\nimport FacebookAds from \"./facebook-ads/bundle\";\nimport Payments from \"./payments/bundle\";\nimport {merge} from \"lodash\";\n\nlet typeDefs = [...Accounts.definitions, ...Posts.definitions, ...Campaign.definitions, ...Events.definitions, ...Invites.definitions, ...Advertising.definitions, ...Search.definitions, ...News.definitions, ...TeamAttack.definitions, ...AccountInvites.definitions, ...Reports.definitions, ...CampaignInvites.definitions, ...FacebookAds.definitions, ...Payments.definitions];\nlet resolvers = merge(Accounts.resolvers, Users.resolvers, Posts.resolvers, Campaign.resolvers, Events.resolvers, Invites.resolvers, Advertising.resolvers, Search.resolvers, News.resolvers, TeamAttack.resolvers, AccountInvites.resolvers, Reports.resolvers, CampaignInvites.resolvers, FacebookAds.resolvers, Payments.resolvers);\n\nexport {typeDefs, resolvers};","const Query = `\ntype Query {\n  user: User\n  getNews(lang: String!): [News]\n  account(_id: String): Account\n  accountsOwnSearch(query: String): [Account]\n  accountsByTag(tag: String): [Account]\n  accounts: [Account]\n  accountInvite(inviteID: String!): AccountInvite\n  accountInvites(accountID: String!): [AccountInvite]\n  accountFBPages(accountID: String!): [FBPage]\n  accountsTeamAttack(action_type: String,results_order: String, influencer_networks: [String], influencer_gender: String, influencer_age: RangeQuery, influencer_country: [String], influencer_languages: String, influencer_city: [String], influencer_likes: RangeQuery, influencer_followers: RangeQuery, influencer_views: RangeQuery, influencer_engagement: RangeQuery, influencer_followers: RangeQuery, audience_gender: String, audience_age: RangeQuery, audience_nrssg: String, audience_country: [String]): [Account]\n  postsOwn: [Post]\n  reportsOwn: [Report]\n  report(reportId: String!): Report\n  postsInvite(campaignID: String!, inviteID: String!): [Post]\n  campaign(_id: String!): Campaign\n  campaignsOwn: [Campaign]\n  campaignInvite(inviteID: String!): CampaignInvite\n  campaignInvites(campaignID: String!): [CampaignInvite]\n  teamAttacksOwn: [TeamAttack]\n  teamAttack(_id: String!): TeamAttack\n  paymentsOwn(year:String, month:String, accounts:[String]): [Payment]\n  woeidPlaces: [TwitterTrendingPlace]\n  twitterTrends(woeid: String!): [TwitterTrends]\n  eventsOwn(all: Boolean, created:Boolean, paused:Boolean, active:Boolean, drafts:Boolean, posts:Boolean): [Event]\n  eventsCampaign(campaignID: String, all: Boolean, draft: Boolean, pending: Boolean, sent: Boolean, accepted: Boolean,  rejected: Boolean, scheduled: Boolean, published: Boolean, completed: Boolean, cancelled: Boolean, suspended: Boolean): [Event]\n  eventsAccount(accountID: String, all: Boolean, draft: Boolean, pending: Boolean, sent: Boolean, accepted: Boolean,  rejected: Boolean, scheduled: Boolean, published: Boolean, completed: Boolean, cancelled: Boolean, suspended: Boolean): [Event]\n  invitesCampaign(campaignID: String): [Invite]\n  search(query:String, twitter: Boolean, instagram: Boolean, google: Boolean): [SearchItem]\n  facebookAdAccounts(socialAccountID: String): [FacebookAccount]\n  facebookAdsCampaigns(socialAccountID: String, adAccountID: String): [FacebookCampaign]\n  facebookAdsCampaign(socialAccountID: String, adAccountID: String, campaignID: String): FacebookCampaign\n  facebookAdsCampaignsAdSets(socialAccountID: String, adAccountID: String, campaignID: String): [FacebookAdSet]\n  facebookAdsCampaignsAdSetAds(socialAccountID: String, adAccountID: String, campaignID: String, adSetID: String): [FacebookAd]\n  facebookAdsCampaignsAdSetAd(socialAccountID: String, adAccountID: String, campaignID: String, adID: String): FacebookAd\n  facebookAdsCampaignsAudienceEstimate(socialAccountID: String, adID: String, data: FacebookAdsCampaignsAudienceEstimate): FacebookAudience\n  facebookAdsCampaignsDeliveryEstimate(socialAccountID: String, adID: String, data: FacebookAdsCampaignsDeliveryEstimate): FacebookDeliveryEstimate\n}\n`;\n\nexport default Query;\n","import {typeDefs, resolvers} from \"./bundle\";\nimport {makeExecutableSchema} from \"graphql-tools\";\nimport Query from \"./query\";\n\nconst Schema = `\nschema {\n  query: Query\n}\n`;\n\nexport default makeExecutableSchema({\n    typeDefs: [Query, Schema, ...typeDefs],\n    resolvers\n});","//export default  ['Afghanistan', 'Aland Islands', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla', 'Antarctica', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia (Plurinational State of)', 'Bonaire, Sint Eustatius and Saba', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island', 'Brazil', 'British Indian Ocean Territory', 'Brunei Darussalam', 'Bulgaria', 'Burkina Faso', 'Burundi', 'Cabo Verde', 'Cambodia', 'Cameroon', 'Canada', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile', 'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Congo (Democratic Republic of the)', 'Cook Islands', 'Costa Rica', 'Cote d\\'Ivoire', 'Croatia', 'Cuba', 'Curacao', 'Cyprus', 'Czech Republic', 'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Falkland Islands (Malvinas)', 'Faroe Islands', 'Fiji', 'Finland', 'France', 'French Guiana', 'French Polynesia', 'French Southern Territories', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti', 'Heard Island and McDonald Islands', 'Holy See', 'Honduras', 'Hong Kong', 'Hungary', 'Iceland', 'India', 'Indonesia', 'Iran (Islamic Republic of)', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jersey', 'Jordan', 'Kazakhstan', 'Kenya', 'Kiribati', 'Korea (Democratic People\\'s Republic of)', 'Korea (Republic of)', 'Kuwait', 'Kyrgyzstan', 'Lao People\\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Macao', 'Macedonia (the former Yugoslav Republic of)', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia (Federated States of)', 'Moldova (Republic of)', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nauru', 'Nepal', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway', 'Oman', 'Pakistan', 'Palau', 'Palestine, State of', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Pitcairn', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar', 'Reunion', 'Romania', 'Russian Federation', 'Rwanda', 'Saint Barthelemy', 'Saint Helena, Ascension and Tristan da Cunha', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin (French part)', 'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Sint Maarten (Dutch part)', 'Slovakia', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard and Jan Mayen', 'Swaziland', 'Sweden', 'Switzerland', 'Syrian Arab Republic', 'Taiwan, Province of China[a]', 'Tajikistan', 'Tanzania, United Republic of', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu', 'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom of Great Britain and Northern Ireland', 'United States of America', 'United States Minor Outlying Islands', 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela (Bolivarian Republic of)', 'Viet Nam', 'Virgin Islands (British)', 'Virgin Islands (U.S.)', 'Wallis and Futuna', 'Western Sahara', 'Yemen', 'Zambia', 'Zimbabwe'];\n\nexport default [\"Bangladesh\", \"Belgium\", \"Burkina Faso\", \"Bulgaria\", \"Bosnia and Herz.\", \"Brunei\", \"Bolivia\", \"Japan\", \"Burundi\", \"Benin\", \"Bhutan\", \"Jamaica\", \"Botswana\", \"Brazil\", \"Bahamas\", \"Belarus\", \"Belize\", \"Russia\", \"Rwanda\", \"Serbia\", \"Timor-Leste\", \"Turkmenistan\", \"Tajikistan\", \"Romania\", \"Guinea-Bissau\", \"Guatemala\", \"Greece\", \"Eq. Guinea\", \"Guyana\", \"Georgia\", \"United Kingdom\", \"Gabon\", \"Guinea\", \"Gambia\", \"Greenland\", \"Ghana\", \"Oman\", \"Tunisia\", \"Jordan\", \"Croatia\", \"Haiti\", \"Hungary\", \"Honduras\", \"Puerto Rico\", \"Palestine\", \"Portugal\", \"Paraguay\", \"Panama\", \"Papua New Guinea\", \"Peru\", \"Pakistan\", \"Philippines\", \"Poland\", \"Zambia\", \"W. Sahara\", \"Estonia\", \"Egypt\", \"South Africa\", \"Ecuador\", \"Italy\", \"Vietnam\", \"Solomon Is.\", \"Ethiopia\", \"Somalia\", \"Zimbabwe\", \"Spain\", \"Eritrea\", \"Montenegro\", \"Moldova\", \"Madagascar\", \"Morocco\", \"Uzbekistan\", \"Myanmar\", \"Mali\", \"Mongolia\", \"Macedonia\", \"Malawi\", \"Mauritania\", \"Uganda\", \"Malaysia\", \"Mexico\", \"Israel\", \"France\", \"Somaliland\", \"Finland\", \"Fiji\", \"Falkland Is.\", \"Nicaragua\", \"Netherlands\", \"Norway\", \"Namibia\", \"Vanuatu\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"New Zealand\", \"Nepal\", \"Kosovo\", \"Côte d'Ivoire\", \"Switzerland\", \"Colombia\", \"China\", \"Cameroon\", \"Chile\", \"N. Cyprus\", \"Canada\", \"Congo\", \"Central African Rep.\", \"Dem. Rep. Congo\", \"Czech Rep.\", \"Cyprus\", \"Costa Rica\", \"Cuba\", \"Swaziland\", \"Syria\", \"Kyrgyzstan\", \"Kenya\", \"S. Sudan\", \"Suriname\", \"Cambodia\", \"El Salvador\", \"Slovakia\", \"Korea\", \"Slovenia\", \"Dem. Rep. Korea\", \"Kuwait\", \"Senegal\", \"Sierra Leone\", \"Kazakhstan\", \"Saudi Arabia\", \"Sweden\", \"Sudan\", \"Dominican Rep.\", \"Djibouti\", \"Denmark\", \"Germany\", \"Yemen\", \"Algeria\", \"United States\", \"Uruguay\", \"Lebanon\", \"Lao PDR\", \"Taiwan\", \"Trinidad and Tobago\", \"Turkey\", \"Sri Lanka\", \"Latvia\", \"Lithuania\", \"Luxembourg\", \"Liberia\", \"Lesotho\", \"Thailand\", \"Fr. S. Antarctic Lands\", \"Togo\", \"Chad\", \"Libya\", \"United Arab Emirates\", \"Venezuela\", \"Afghanistan\", \"Iraq\", \"Iceland\", \"Iran\", \"Armenia\", \"Albania\", \"Angola\", \"Argentina\", \"Australia\", \"Austria\", \"India\", \"Tanzania\", \"Azerbaijan\", \"Ireland\", \"Indonesia\", \"Ukraine\", \"Qatar\", \"Mozambique\"];","export default {\n    name: \"IBOL\",\n    logo: \"https://s3.amazonaws.com/ibol-app-media/logo.png\",\n    altLogo: \"https://s3.amazonaws.com/ibol-app-media/logo-alt.png\",\n    social: {\n        facebook: \"\",\n        twitter: \"\"\n    },\n    email: {\n        noReply: \"no-reply@viralizing.me\"\n    },\n    support: {\n        email: \"support@viralizing.me\"\n    }\n};\n","SocialAccountsInvites = new Meteor.Collection(\"accountsInvites\");","SocialAccounts = new Meteor.Collection(\"accounts\");","Advertising = new Meteor.Collection(\"advertising\");","CampaignInvites = new Meteor.Collection(\"campaignInvites\");","Campaigns = new Meteor.Collection(\"campaigns\");","Invites = new Meteor.Collection(\"invites\");","Payments = new Meteor.Collection(\"payments\");","Posts = new Meteor.Collection(\"posts\");","Reports = new Meteor.Collection(\"reports\");","TeamAttack = new Meteor.Collection(\"teamAttack\");","Herald.addCourier('appNotifications', {\n    media: {\n        onsite: {\n            onRun: function () {\n                console.log(\"NOTIFICATION_RUN\");\n                return this.run()\n            }\n        } //Send notifications to client, with no custom configuration\n    },\n\n    //will be a function on the collection instance, returned from find()\n    message: function () {\n        return 'There is a new post: \"' + this.data.post.name + '\"';\n    }\n});","import { createApolloServer } from \"meteor/apollo\";\nimport { merge } from \"lodash\";\n\nimport schema from \"../imports/server/schemas/schema\";\n\n\ncreateApolloServer({\n    schema,\n});\n","import \"../imports/server/bundle.jsx\";\nimport \"../imports/modules/bundles/server.jsx\";\n\n    //23xcuCrdu2RP9EgvUccf9vBL9\n    //aHR0cHM6Ly90d2l0dGVyLmNvbS9yZWdpbmFiaXRh\n    //aHR0cHM6Ly90d2l0dGVyLmNvbS9jYW1pY29ydG14P2xhbmc9ZW4\n    //aHR0cHM6Ly9zY29udGVudC5mbWV4Ny0xLmZuYS5mYmNkbi5uZXQvdi90MS4wLTkvMTc5OTIyNDBfMjI4NDU0MDY2ODQzNzIxMV81NjE2MDE5NTc4NjIwOTMwMjg4X24uanBnP29oPTVjZDY2MjYyMDA2MjkwMzY0MDhkZDFiZWZjNzk5YjQxJm9lPTU5OUM2NTYy\n\nMeteor.startup(function(){\n    SyncedCron.start();\n\n\tMeteor.users._ensureIndex({\n        \"services.facebook.id\": 1,\n\t\t\"services.instagram.id\": 1,\n\t\t\"services.google.id\": 1,\n\t\t\"services.twitter.id\": 1\n    },{\n\t\tname:\"usersIndex\"\n\t});\n    //Teams._ensureIndex({ userId: 1 });\n    //Collection.rawCollection.createIndex({ userId: 1 });\n    SocialAccounts._ensureIndex({\n        \"_id\": 1,\n        \"network\": 1,\n        \"manager\": 1,\n        \"owner\": 1,\n        \"shares\": 1,\n        \"connection.id\": 1,\n        \"information.gender\": 1,\n        \"information.birthDate\": 1,\n        \"information.country\": 1,\n        \"audience.age\": 1,\n        \"audience.gender\": 1,\n        \"audience.nrssg\": 1,\n        \"audience.countries\": 1,\n        \"audience.cities\": 1,\n        \"audience.languages\": 1,\n        \"statistics.followers\":1,\n        \"pricing.post\":1,\n        \"pricing.photos.profile\":1,\n        \"pricing.photos.cover\":1,\n        \"pricing.noPost.hour\":1,\n        \"pricing.noPost.day\":1,\n        \"pricing.share\":1\n    },{\n        name:\"accountsIndex\"\n    });\n\n    Campaigns._ensureIndex({\n        \"_id\": 1,\n        \"owner\": 1,\n        \"manager\": 1,\n        \"status\": 1,\n        \"information.dateStart\":1,\n        \"information.dateEnd\":1\n    },{\n\t    name:\"campaignsIndex\"\n    });\n\n    TeamAttack._ensureIndex({\n        \"_id\":1,\n        \"owner\": 1,\n        \"members\": 1\n    },{\n\t    name:\"teamAttackIndex\"\n    });\n\n    Posts._ensureIndex({\n        \"_id\": 1,\n        \"status\": 1,\n        \"type\": 1,\n        \"date\": 1,\n        \"campaign\": 1,\n        \"announcement\": 1,\n        \"isPaid\": 1,\n        \"account\": 1,\n        \"owner\": 1\n    },{\n\t    name:\"postsIndex\"\n    });\n\n    let services = Meteor.settings.private.networks;\n\n    let configure = function() {\n        if ( services ) {\n            for( let service in services ) {\n\n                ServiceConfiguration.configurations.upsert( { service: service }, {\n                    $set: Object.assign({},services[ service ],{\"loginStyle\" : \"popup\"})\n                });\n            }\n        }\n    };\n\n    configure()\n});\n"]}}]