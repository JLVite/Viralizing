{"version":3,"sources":["meteor://ðŸ’»app/packages/apollo/src/main-server.js","meteor://ðŸ’»app/packages/apollo/src/main-client.js"],"names":["module","export","createApolloServer","getUserForContext","addCurrentUserToContext","graphqlExpress","graphiqlExpress","watch","require","v","bodyParser","default","express","Meteor","WebApp","Accounts","check","createMeteorNetworkInterface","exports","meteorClientConfig","defaultServerConfig","path","configServer","graphQLServer","graphiql","isDevelopment","graphiqlPath","graphiqlOptions","passHeader","defaultGraphQLOptions","context","formatError","e","message","locations","debug","customOptions","customConfig","config","use","json","req","customOptionsObject","options","loginToken","headers","userContext","error","console","endpointURL","connectHandlers","String","hashedToken","_hashLoginToken","currentUser","users","rawCollection","findOne","tokenInformation","services","resume","loginTokens","find","tokenInfo","expiresAt","_tokenExpiration","when","isExpired","Date","user","userId","_id","getMeteorLoginToken","createNetworkInterface","createBatchingNetworkInterface","defaultNetworkInterfaceConfig","uri","absoluteUrl","opts","useMeteorAccounts","batchingInterface","batchInterval","customNetworkInterfaceConfig","useBatchingInterface","interfaceToUse","interfaceArgument","networkInterface","isClient","Error","applyMiddlewareFn","request","next","meteorLoginToken","defaultClientConfig","ssrMode","isServer","customClientConfig","localStorageLoginToken","_storedLoginToken"],"mappings":"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","file":"/packages/apollo.js","sourcesContent":["import { graphqlExpress, graphiqlExpress } from 'graphql-server-express';\nimport bodyParser from 'body-parser';\nimport express from 'express';\n\nimport { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\n\n// import the configuration functions from the client so they can be used\n// during server-side rendering for instance\nexport { createMeteorNetworkInterface, meteorClientConfig } from './main-client';\n\n// default server configuration object\nconst defaultServerConfig = {\n  // graphql endpoint\n  path: '/graphql',\n  // additional Express server configuration (enable CORS there for instance)\n  configServer: graphQLServer => {},\n  // enable GraphiQL only in development mode\n  graphiql: Meteor.isDevelopment,\n  // GraphiQL endpoint\n  graphiqlPath: '/graphiql',\n  // GraphiQL options (default: log the current user in your request)\n  graphiqlOptions: {\n    passHeader: \"'meteor-login-token': localStorage['Meteor.loginToken']\",\n  },\n};\n\n// default graphql options to enhance the graphQLExpress server\nconst defaultGraphQLOptions = {\n  // ensure that a context object is defined for the resolvers\n  context: {},\n  // error formatting\n  formatError: e => ({\n    message: e.message,\n    locations: e.locations,\n    path: e.path,\n  }),\n  // additional debug logging if execution errors occur in dev mode\n  debug: Meteor.isDevelopment,\n};\n\nexport const createApolloServer = (customOptions = {}, customConfig = {}) => {\n  // create a new server config object based on the default server config\n  // defined above and the custom server config passed to this function\n  const config = {\n    ...defaultServerConfig,\n    ...customConfig,\n  };\n\n  if (customConfig.graphiqlOptions) {\n    config.graphiqlOptions = {\n      ...defaultServerConfig.graphiqlOptions,\n      ...customConfig.graphiqlOptions,\n    };\n  }\n\n  // the Meteor GraphQL server is an Express server\n  const graphQLServer = express();\n\n  // enhance the GraphQL server with possible express middlewares\n  config.configServer(graphQLServer);\n\n  // GraphQL endpoint, enhanced with JSON body parser\n  graphQLServer.use(\n    config.path,\n    bodyParser.json(),\n    graphqlExpress(async req => {\n      try {\n        // graphqlExpress can accept a function returning the option object\n        const customOptionsObject = typeof customOptions === 'function'\n          ? customOptions(req)\n          : customOptions;\n\n        // create a new apollo options object based on the default apollo options\n        // defined above and the custom apollo options passed to this function\n        const options = {\n          ...defaultGraphQLOptions,\n          ...customOptionsObject,\n        };\n\n        // get the login token from the headers request, given by the Meteor's\n        // network interface middleware if enabled\n        const loginToken = req.headers['meteor-login-token'];\n\n        // get the current user & the user id for the context\n        const userContext = await getUserForContext(loginToken);\n\n        // context can accept a function returning the context object\n        const context = typeof options.context === 'function'\n          ? options.context(userContext)\n          : { ...options.context, ...userContext };\n\n        // return the configured options to be used by the graphql server\n        return {\n          ...options,\n          context,\n        };\n      } catch (error) {\n        // something went bad when configuring the graphql server, we do not\n        // swallow the error and display it in the server-side logs\n        console.error(\n          '[Meteor Apollo Integration] Something bad happened when handling a request on the GraphQL server. Your GraphQL server is not working as expected:',\n          error\n        );\n\n        // return the default graphql options anyway\n        return defaultGraphQLOptions;\n      }\n    })\n  );\n\n  // Start GraphiQL if enabled\n  if (config.graphiql) {\n    // GraphiQL endpoint\n    graphQLServer.use(\n      config.graphiqlPath,\n      graphiqlExpress({\n        // GraphiQL options\n        ...config.graphiqlOptions,\n        // endpoint of the graphql server where to send requests\n        endpointURL: config.path,\n      })\n    );\n  }\n  // this binds the specified paths to the Express server running Apollo + GraphiQL\n  WebApp.connectHandlers.use(graphQLServer);\n};\n\nexport const getUserForContext = async loginToken => {\n  // there is a possible current user connected!\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String);\n\n    // the hashed token is the key to find the possible current user in the db\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n    const currentUser = await Meteor.users.rawCollection().findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken,\n    });\n\n    // the current user exists\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(\n        tokenInfo => tokenInfo.hashedToken === hashedToken\n      );\n\n      // get an exploitable token expiration date\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when);\n\n      // true if the token is expired\n      const isExpired = expiresAt < new Date();\n\n      // if the token is still valid, give access to the current user\n      // information in the resolvers context\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id,\n        };\n      }\n    }\n  }\n\n  return {};\n};\n\n// take the existing context and return a new extended context with the current\n// user if relevant (i.e. valid login token)\nexport const addCurrentUserToContext = async (context, loginToken) => {\n  const userContext = await getUserForContext(loginToken);\n  return {\n    ...context,\n    ...userContext,\n  };\n};\n","import { createNetworkInterface, createBatchingNetworkInterface } from 'apollo-client';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\n// default network interface configuration object\nconst defaultNetworkInterfaceConfig = {\n  // default graphql server endpoint: ROOT_URL/graphql\n  // ex: http://locahost:3000/graphql, or https://www.my-app.com/graphql\n  uri: Meteor.absoluteUrl('graphql'),\n  // additional fetch options like `credentials` or `headers`\n  opts: {},\n  // enable the Meteor User Accounts middleware to identify the user with\n  // every request thanks to their login token\n  useMeteorAccounts: true,\n  // use a BatchingNetworkInterface by default instead of a NetworkInterface\n  batchingInterface: true,\n  // default batch interval\n  batchInterval: 10,\n};\n\n// create a pre-configured network interface\nexport const createMeteorNetworkInterface = (customNetworkInterfaceConfig = {}) => {\n  // create a new config object based on the default network interface config\n  // defined above and the custom network interface config passed to this function\n  const config = {\n    ...defaultNetworkInterfaceConfig,\n    ...customNetworkInterfaceConfig,\n  };\n\n  // this will be true true if a BatchingNetworkInterface is meant to be used\n  // with a correct poll interval\n  const useBatchingInterface = config.batchingInterface && typeof config.batchInterval === 'number';\n\n  // allow the use of a batching network interface\n  const interfaceToUse = useBatchingInterface\n    ? createBatchingNetworkInterface\n    : createNetworkInterface;\n\n  // http://dev.apollodata.com/core/apollo-client-api.html#NetworkInterfaceOptions\n  const interfaceArgument = {\n    uri: config.uri,\n    opts: config.opts,\n  };\n\n  // http://dev.apollodata.com/core/network.html#BatchingExample\n  if (useBatchingInterface) {\n    interfaceArgument.batchInterval = config.batchInterval;\n  }\n\n  // configure the (batching?) network interface with the config defined above\n  const networkInterface = interfaceToUse(interfaceArgument);\n\n  // handle the creation of a Meteor User Accounts middleware\n  if (config.useMeteorAccounts) {\n    try {\n      // throw an error if someone tries to specify the login token\n      // manually from the client\n      if (Meteor.isClient && config.loginToken) {\n        throw Error(\n          '[Meteor Apollo Integration] The current user is not handled with your GraphQL operations: you are trying to pass a login token to an Apollo Client instance defined client-side. This is only allowed during server-side rendering, please check your implementation.'\n        );\n      }\n\n      // dynamic middleware function name depending on the interface used\n      const applyMiddlewareFn = useBatchingInterface ? 'applyBatchMiddleware' : 'applyMiddleware';\n\n      // add a middleware handling the current user to the network interface\n      networkInterface.use([\n        {\n          [applyMiddlewareFn](request, next) {\n            // get the login token on a per-request basis\n            const meteorLoginToken = getMeteorLoginToken(config);\n\n            // no token, meaning no user connected, just go to next possible middleware\n            if (!meteorLoginToken) {\n              next();\n            }\n\n            // create the header object if needed.\n            if (!request.options.headers) {\n              request.options.headers = {};\n            }\n\n            // add the login token to the request headers\n            request.options.headers['meteor-login-token'] = meteorLoginToken;\n\n            // go to next middleware\n            next();\n          },\n        },\n      ]);\n    } catch (error) {\n      // catch the potential error sent by if a login token is manually set client-side\n      console.error(error);\n    }\n  }\n\n  return networkInterface;\n};\n\n// default Apollo Client configuration object\nconst defaultClientConfig = {\n  // setup ssr mode if the client is configured server-side (ex: for SSR)\n  ssrMode: Meteor.isServer,\n};\n\n// create a new client config object based on the default Apollo Client config\n// defined above and the client config passed to this function\nexport const meteorClientConfig = (customClientConfig = {}) => ({\n  // default network interface preconfigured, the network interface key is set\n  // there to so that `createMeteorNetworkInterface` is executed only when\n  // `meteorClientConfig` is called.\n  networkInterface: createMeteorNetworkInterface(),\n  ...defaultClientConfig,\n  ...customClientConfig,\n});\n\n// grab the token from the storage or config to be used in the network interface creation\nexport const getMeteorLoginToken = (config = {}) => {\n  // possible cookie login token created by meteorhacks:fast-render\n  // and passed to the Apollo Client during server-side rendering\n  const { loginToken = null } = config;\n\n  // Meteor accounts-base login token stored in local storage,\n  // only exists client-side as of Meteor 1.4, will exist with Meteor 1.5\n  const localStorageLoginToken = Meteor.isClient && Accounts._storedLoginToken();\n\n  // return a meteor login token if existing\n  // ex: grabbed from local storage or passed during server-side rendering\n  return localStorageLoginToken || loginToken;\n};\n"]}