{"version":3,"sources":["meteor://ðŸ’»app/packages/apollo/src/main-client.js"],"names":["module","export","createMeteorNetworkInterface","meteorClientConfig","getMeteorLoginToken","createNetworkInterface","createBatchingNetworkInterface","watch","require","v","Meteor","Accounts","defaultNetworkInterfaceConfig","uri","absoluteUrl","opts","useMeteorAccounts","batchingInterface","batchInterval","customNetworkInterfaceConfig","config","useBatchingInterface","interfaceToUse","interfaceArgument","networkInterface","isClient","loginToken","Error","applyMiddlewareFn","use","request","next","meteorLoginToken","options","headers","error","console","defaultClientConfig","ssrMode","isServer","customClientConfig","localStorageLoginToken","_storedLoginToken"],"mappings":"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","file":"/packages/apollo.js","sourcesContent":["import { createNetworkInterface, createBatchingNetworkInterface } from 'apollo-client';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\n// default network interface configuration object\nconst defaultNetworkInterfaceConfig = {\n  // default graphql server endpoint: ROOT_URL/graphql\n  // ex: http://locahost:3000/graphql, or https://www.my-app.com/graphql\n  uri: Meteor.absoluteUrl('graphql'),\n  // additional fetch options like `credentials` or `headers`\n  opts: {},\n  // enable the Meteor User Accounts middleware to identify the user with\n  // every request thanks to their login token\n  useMeteorAccounts: true,\n  // use a BatchingNetworkInterface by default instead of a NetworkInterface\n  batchingInterface: true,\n  // default batch interval\n  batchInterval: 10,\n};\n\n// create a pre-configured network interface\nexport const createMeteorNetworkInterface = (customNetworkInterfaceConfig = {}) => {\n  // create a new config object based on the default network interface config\n  // defined above and the custom network interface config passed to this function\n  const config = {\n    ...defaultNetworkInterfaceConfig,\n    ...customNetworkInterfaceConfig,\n  };\n\n  // this will be true true if a BatchingNetworkInterface is meant to be used\n  // with a correct poll interval\n  const useBatchingInterface = config.batchingInterface && typeof config.batchInterval === 'number';\n\n  // allow the use of a batching network interface\n  const interfaceToUse = useBatchingInterface\n    ? createBatchingNetworkInterface\n    : createNetworkInterface;\n\n  // http://dev.apollodata.com/core/apollo-client-api.html#NetworkInterfaceOptions\n  const interfaceArgument = {\n    uri: config.uri,\n    opts: config.opts,\n  };\n\n  // http://dev.apollodata.com/core/network.html#BatchingExample\n  if (useBatchingInterface) {\n    interfaceArgument.batchInterval = config.batchInterval;\n  }\n\n  // configure the (batching?) network interface with the config defined above\n  const networkInterface = interfaceToUse(interfaceArgument);\n\n  // handle the creation of a Meteor User Accounts middleware\n  if (config.useMeteorAccounts) {\n    try {\n      // throw an error if someone tries to specify the login token\n      // manually from the client\n      if (Meteor.isClient && config.loginToken) {\n        throw Error(\n          '[Meteor Apollo Integration] The current user is not handled with your GraphQL operations: you are trying to pass a login token to an Apollo Client instance defined client-side. This is only allowed during server-side rendering, please check your implementation.'\n        );\n      }\n\n      // dynamic middleware function name depending on the interface used\n      const applyMiddlewareFn = useBatchingInterface ? 'applyBatchMiddleware' : 'applyMiddleware';\n\n      // add a middleware handling the current user to the network interface\n      networkInterface.use([\n        {\n          [applyMiddlewareFn](request, next) {\n            // get the login token on a per-request basis\n            const meteorLoginToken = getMeteorLoginToken(config);\n\n            // no token, meaning no user connected, just go to next possible middleware\n            if (!meteorLoginToken) {\n              next();\n            }\n\n            // create the header object if needed.\n            if (!request.options.headers) {\n              request.options.headers = {};\n            }\n\n            // add the login token to the request headers\n            request.options.headers['meteor-login-token'] = meteorLoginToken;\n\n            // go to next middleware\n            next();\n          },\n        },\n      ]);\n    } catch (error) {\n      // catch the potential error sent by if a login token is manually set client-side\n      console.error(error);\n    }\n  }\n\n  return networkInterface;\n};\n\n// default Apollo Client configuration object\nconst defaultClientConfig = {\n  // setup ssr mode if the client is configured server-side (ex: for SSR)\n  ssrMode: Meteor.isServer,\n};\n\n// create a new client config object based on the default Apollo Client config\n// defined above and the client config passed to this function\nexport const meteorClientConfig = (customClientConfig = {}) => ({\n  // default network interface preconfigured, the network interface key is set\n  // there to so that `createMeteorNetworkInterface` is executed only when\n  // `meteorClientConfig` is called.\n  networkInterface: createMeteorNetworkInterface(),\n  ...defaultClientConfig,\n  ...customClientConfig,\n});\n\n// grab the token from the storage or config to be used in the network interface creation\nexport const getMeteorLoginToken = (config = {}) => {\n  // possible cookie login token created by meteorhacks:fast-render\n  // and passed to the Apollo Client during server-side rendering\n  const { loginToken = null } = config;\n\n  // Meteor accounts-base login token stored in local storage,\n  // only exists client-side as of Meteor 1.4, will exist with Meteor 1.5\n  const localStorageLoginToken = Meteor.isClient && Accounts._storedLoginToken();\n\n  // return a meteor login token if existing\n  // ex: grabbed from local storage or passed during server-side rendering\n  return localStorageLoginToken || loginToken;\n};\n"]}